// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/authz/admin/v1alpha/admin_signatures.proto

package authzadminv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignaturesAdminService_CreateSignatureType_FullMethodName = "/blocky.authz.admin.v1alpha.SignaturesAdminService/CreateSignatureType"
	SignaturesAdminService_ListSignatureTypes_FullMethodName  = "/blocky.authz.admin.v1alpha.SignaturesAdminService/ListSignatureTypes"
	SignaturesAdminService_UpdateSignatureType_FullMethodName = "/blocky.authz.admin.v1alpha.SignaturesAdminService/UpdateSignatureType"
)

// SignaturesAdminServiceClient is the client API for SignaturesAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignaturesAdminServiceClient interface {
	// Creates a new signature type that can be used to create signatures.
	// The signature type defines configuration for the signatures that are created.
	// A signature type is also used to match client signatures to the signature type.
	CreateSignatureType(ctx context.Context, in *CreateSignatureTypeRequest, opts ...grpc.CallOption) (*CreateSignatureTypeResponse, error)
	// Lists all defined signature types.
	ListSignatureTypes(ctx context.Context, in *ListSignatureTypesRequest, opts ...grpc.CallOption) (*ListSignatureTypesResponse, error)
	// Updates signature type configuration.
	// If the fields are not defined in the request, the existing values are preserved.
	UpdateSignatureType(ctx context.Context, in *UpdateSignatureTypeRequest, opts ...grpc.CallOption) (*UpdateSignatureTypeResponse, error)
}

type signaturesAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignaturesAdminServiceClient(cc grpc.ClientConnInterface) SignaturesAdminServiceClient {
	return &signaturesAdminServiceClient{cc}
}

func (c *signaturesAdminServiceClient) CreateSignatureType(ctx context.Context, in *CreateSignatureTypeRequest, opts ...grpc.CallOption) (*CreateSignatureTypeResponse, error) {
	out := new(CreateSignatureTypeResponse)
	err := c.cc.Invoke(ctx, SignaturesAdminService_CreateSignatureType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signaturesAdminServiceClient) ListSignatureTypes(ctx context.Context, in *ListSignatureTypesRequest, opts ...grpc.CallOption) (*ListSignatureTypesResponse, error) {
	out := new(ListSignatureTypesResponse)
	err := c.cc.Invoke(ctx, SignaturesAdminService_ListSignatureTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signaturesAdminServiceClient) UpdateSignatureType(ctx context.Context, in *UpdateSignatureTypeRequest, opts ...grpc.CallOption) (*UpdateSignatureTypeResponse, error) {
	out := new(UpdateSignatureTypeResponse)
	err := c.cc.Invoke(ctx, SignaturesAdminService_UpdateSignatureType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignaturesAdminServiceServer is the server API for SignaturesAdminService service.
// All implementations must embed UnimplementedSignaturesAdminServiceServer
// for forward compatibility
type SignaturesAdminServiceServer interface {
	// Creates a new signature type that can be used to create signatures.
	// The signature type defines configuration for the signatures that are created.
	// A signature type is also used to match client signatures to the signature type.
	CreateSignatureType(context.Context, *CreateSignatureTypeRequest) (*CreateSignatureTypeResponse, error)
	// Lists all defined signature types.
	ListSignatureTypes(context.Context, *ListSignatureTypesRequest) (*ListSignatureTypesResponse, error)
	// Updates signature type configuration.
	// If the fields are not defined in the request, the existing values are preserved.
	UpdateSignatureType(context.Context, *UpdateSignatureTypeRequest) (*UpdateSignatureTypeResponse, error)
	mustEmbedUnimplementedSignaturesAdminServiceServer()
}

// UnimplementedSignaturesAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignaturesAdminServiceServer struct {
}

func (UnimplementedSignaturesAdminServiceServer) CreateSignatureType(context.Context, *CreateSignatureTypeRequest) (*CreateSignatureTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignatureType not implemented")
}
func (UnimplementedSignaturesAdminServiceServer) ListSignatureTypes(context.Context, *ListSignatureTypesRequest) (*ListSignatureTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignatureTypes not implemented")
}
func (UnimplementedSignaturesAdminServiceServer) UpdateSignatureType(context.Context, *UpdateSignatureTypeRequest) (*UpdateSignatureTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignatureType not implemented")
}
func (UnimplementedSignaturesAdminServiceServer) mustEmbedUnimplementedSignaturesAdminServiceServer() {
}

// UnsafeSignaturesAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignaturesAdminServiceServer will
// result in compilation errors.
type UnsafeSignaturesAdminServiceServer interface {
	mustEmbedUnimplementedSignaturesAdminServiceServer()
}

func RegisterSignaturesAdminServiceServer(s grpc.ServiceRegistrar, srv SignaturesAdminServiceServer) {
	s.RegisterService(&SignaturesAdminService_ServiceDesc, srv)
}

func _SignaturesAdminService_CreateSignatureType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignatureTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignaturesAdminServiceServer).CreateSignatureType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignaturesAdminService_CreateSignatureType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignaturesAdminServiceServer).CreateSignatureType(ctx, req.(*CreateSignatureTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignaturesAdminService_ListSignatureTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignatureTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignaturesAdminServiceServer).ListSignatureTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignaturesAdminService_ListSignatureTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignaturesAdminServiceServer).ListSignatureTypes(ctx, req.(*ListSignatureTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignaturesAdminService_UpdateSignatureType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSignatureTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignaturesAdminServiceServer).UpdateSignatureType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignaturesAdminService_UpdateSignatureType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignaturesAdminServiceServer).UpdateSignatureType(ctx, req.(*UpdateSignatureTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignaturesAdminService_ServiceDesc is the grpc.ServiceDesc for SignaturesAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignaturesAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.authz.admin.v1alpha.SignaturesAdminService",
	HandlerType: (*SignaturesAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSignatureType",
			Handler:    _SignaturesAdminService_CreateSignatureType_Handler,
		},
		{
			MethodName: "ListSignatureTypes",
			Handler:    _SignaturesAdminService_ListSignatureTypes_Handler,
		},
		{
			MethodName: "UpdateSignatureType",
			Handler:    _SignaturesAdminService_UpdateSignatureType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/authz/admin/v1alpha/admin_signatures.proto",
}
