// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blocky/authz/admin/v1alpha/admin_signatures.proto

package authzadminv1alpha

import (
	signalgpb "github.com/blockysource/go-genproto/blocky/authz/type/signalgpb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [SignaturesAdminService.CreateSignatureType][blocky.authz.v1alpha.SignaturesAdminService.CreateSignatureType].
type CreateSignatureTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional user-provided ID for the signature type.
	// The identifier needs to be unique within the project.
	// If not provided, a random signature identifier will be generated.
	SignatureTypeId string `protobuf:"bytes,1,opt,name=signature_type_id,json=signatureTypeId,proto3" json:"signature_type_id,omitempty"`
	// Optional, user-provided name for the signature type.
	// Only used for display purposes.
	// If not provided, a new name will be generated.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional identifier of the key used to sign the signatures that are created from this signature type.
	// If not provided, the service chooses a signing key with the highest priority from the key set,
	// and optionally that matches the favored algorithm.
	// This field matches the identifier of a key, not a key version.
	// [Key.key_id][blocky.authz.v1alpha.Key.key_id]
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Optional, favored algorithm for the signatures that are created from this signature type.
	// If not provided, the server will choose a default signing key algorithm.
	// If the key set doesn't contain a key for the favored algorithm, the server will choose a
	// different algorithm.
	FavoredAlgorithm signalgpb.SigningAlgorithm `protobuf:"varint,4,opt,name=favored_algorithm,json=favoredAlgorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"favored_algorithm,omitempty"`
	// Token expiration duration.
	SignatureExpiration *durationpb.Duration `protobuf:"bytes,5,opt,name=signature_expiration,json=signatureExpiration,proto3" json:"signature_expiration,omitempty"`
}

func (x *CreateSignatureTypeRequest) Reset() {
	*x = CreateSignatureTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSignatureTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSignatureTypeRequest) ProtoMessage() {}

func (x *CreateSignatureTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSignatureTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateSignatureTypeRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSignatureTypeRequest) GetSignatureTypeId() string {
	if x != nil {
		return x.SignatureTypeId
	}
	return ""
}

func (x *CreateSignatureTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSignatureTypeRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *CreateSignatureTypeRequest) GetFavoredAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.FavoredAlgorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *CreateSignatureTypeRequest) GetSignatureExpiration() *durationpb.Duration {
	if x != nil {
		return x.SignatureExpiration
	}
	return nil
}

// Response message for
// [SignaturesAdminService.CreateSignatureType][blocky.authz.v1alpha.SignaturesAdminService.CreateSignatureType].
type CreateSignatureTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the created signature type.
	// If the request specified an identifier, the server returns the same identifier.
	// Otherwise, the server generates a random identifier.
	SignatureTypeId string `protobuf:"bytes,1,opt,name=signature_type_id,json=signatureTypeId,proto3" json:"signature_type_id,omitempty"`
	// The name of the created signature type.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The time when the signature type was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Token expiration time.
	SignatureExpiration *durationpb.Duration `protobuf:"bytes,4,opt,name=signature_expiration,json=signatureExpiration,proto3" json:"signature_expiration,omitempty"`
}

func (x *CreateSignatureTypeResponse) Reset() {
	*x = CreateSignatureTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSignatureTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSignatureTypeResponse) ProtoMessage() {}

func (x *CreateSignatureTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSignatureTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateSignatureTypeResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSignatureTypeResponse) GetSignatureTypeId() string {
	if x != nil {
		return x.SignatureTypeId
	}
	return ""
}

func (x *CreateSignatureTypeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSignatureTypeResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateSignatureTypeResponse) GetSignatureExpiration() *durationpb.Duration {
	if x != nil {
		return x.SignatureExpiration
	}
	return nil
}

// Request message for
// [SignaturesAdminService.ListSignatureTypes][blocky.authz.v1alpha.SignaturesAdminService.ListSignatureTypes].
type ListSignatureTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional, the maximum number of signature types to return.
	// If not specified, a server-defined default is used - usually 50.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional, a page signature to request the next page of results.
	// If not specified, the first page of results is returned.
	PageSignature string `protobuf:"bytes,2,opt,name=page_signature,json=pageSignature,proto3" json:"page_signature,omitempty"`
}

func (x *ListSignatureTypesRequest) Reset() {
	*x = ListSignatureTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSignatureTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignatureTypesRequest) ProtoMessage() {}

func (x *ListSignatureTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignatureTypesRequest.ProtoReflect.Descriptor instead.
func (*ListSignatureTypesRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP(), []int{2}
}

func (x *ListSignatureTypesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSignatureTypesRequest) GetPageSignature() string {
	if x != nil {
		return x.PageSignature
	}
	return ""
}

// Response message for
// [SignaturesAdminService.ListSignatureTypes][blocky.authz.v1alpha.SignaturesAdminService.ListSignatureTypes].
type ListSignatureTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signature types that matched the request.
	SignatureTypes []*SignatureType `protobuf:"bytes,1,rep,name=signature_types,json=signatureTypes,proto3" json:"signature_types,omitempty"`
	// A signature that can be used to request the next page of results.
	// If empty, there are no more results.
	NextPageSignature string `protobuf:"bytes,2,opt,name=next_page_signature,json=nextPageSignature,proto3" json:"next_page_signature,omitempty"`
}

func (x *ListSignatureTypesResponse) Reset() {
	*x = ListSignatureTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSignatureTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignatureTypesResponse) ProtoMessage() {}

func (x *ListSignatureTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignatureTypesResponse.ProtoReflect.Descriptor instead.
func (*ListSignatureTypesResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP(), []int{3}
}

func (x *ListSignatureTypesResponse) GetSignatureTypes() []*SignatureType {
	if x != nil {
		return x.SignatureTypes
	}
	return nil
}

func (x *ListSignatureTypesResponse) GetNextPageSignature() string {
	if x != nil {
		return x.NextPageSignature
	}
	return ""
}

// SignatureType represents a type of signature that can be used to create signatures.
type SignatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the signature type.
	SignatureTypeId string `protobuf:"bytes,1,opt,name=signature_type_id,json=signatureTypeId,proto3" json:"signature_type_id,omitempty"`
	// The name of the signature type.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The time when the signature type was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The time when the signature type was last modified.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Token expiration time.
	SignatureExpiration *durationpb.Duration `protobuf:"bytes,5,opt,name=signature_expiration,json=signatureExpiration,proto3" json:"signature_expiration,omitempty"`
	// Favored algorithm for the signatures that are created from this signature type.
	FavoredAlgorithm signalgpb.SigningAlgorithm `protobuf:"varint,6,opt,name=favored_algorithm,json=favoredAlgorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"favored_algorithm,omitempty"`
	// Optional, the identifier of the key used to sign the signatures that are created from this signature type.
	KeyId string `protobuf:"bytes,7,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Determines if the signature type is built-in or user-defined.
	// Built-in signature types are created by the system and cannot be deleted.
	BuiltIn bool `protobuf:"varint,8,opt,name=built_in,json=builtIn,proto3" json:"built_in,omitempty"`
}

func (x *SignatureType) Reset() {
	*x = SignatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureType) ProtoMessage() {}

func (x *SignatureType) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureType.ProtoReflect.Descriptor instead.
func (*SignatureType) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP(), []int{4}
}

func (x *SignatureType) GetSignatureTypeId() string {
	if x != nil {
		return x.SignatureTypeId
	}
	return ""
}

func (x *SignatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignatureType) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SignatureType) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *SignatureType) GetSignatureExpiration() *durationpb.Duration {
	if x != nil {
		return x.SignatureExpiration
	}
	return nil
}

func (x *SignatureType) GetFavoredAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.FavoredAlgorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *SignatureType) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignatureType) GetBuiltIn() bool {
	if x != nil {
		return x.BuiltIn
	}
	return false
}

// Request message for
// [SignaturesAdminService.UpdateSignatureType][blocky.authz.v1alpha.SignaturesAdminService.UpdateSignatureType].
// If all fields are empty, the request is a no-op.
type UpdateSignatureTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the signature type to update.
	SignatureTypeId string `protobuf:"bytes,1,opt,name=signature_type_id,json=signatureTypeId,proto3" json:"signature_type_id,omitempty"`
	// Optional, the new name of the signature type.
	// If not provided, the existing name is preserved.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional, the new key identifier used for the signatures that are created from this signature type.
	// If not provided, the existing key identifier is preserved.
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Optional, the new favored algorithm for the signatures that are created from this signature type.
	// If not provided, the existing algorithm is preserved.
	FavoredAlgorithm signalgpb.SigningAlgorithm `protobuf:"varint,4,opt,name=favored_algorithm,json=favoredAlgorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"favored_algorithm,omitempty"`
	// Optional, the new signature expiration duration.
	// If not provided, the existing expiration duration is preserved.
	SignatureExpiration *durationpb.Duration `protobuf:"bytes,5,opt,name=signature_expiration,json=signatureExpiration,proto3" json:"signature_expiration,omitempty"`
}

func (x *UpdateSignatureTypeRequest) Reset() {
	*x = UpdateSignatureTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSignatureTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSignatureTypeRequest) ProtoMessage() {}

func (x *UpdateSignatureTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSignatureTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateSignatureTypeRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSignatureTypeRequest) GetSignatureTypeId() string {
	if x != nil {
		return x.SignatureTypeId
	}
	return ""
}

func (x *UpdateSignatureTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSignatureTypeRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *UpdateSignatureTypeRequest) GetFavoredAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.FavoredAlgorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *UpdateSignatureTypeRequest) GetSignatureExpiration() *durationpb.Duration {
	if x != nil {
		return x.SignatureExpiration
	}
	return nil
}

// Response message for
// [SignaturesAdminService.UpdateSignatureType][blocky.authz.v1alpha.SignaturesAdminService.UpdateSignatureType].
type UpdateSignatureTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated signature type.
	SignatureType *SignatureType `protobuf:"bytes,1,opt,name=signature_type,json=signatureType,proto3" json:"signature_type,omitempty"`
}

func (x *UpdateSignatureTypeResponse) Reset() {
	*x = UpdateSignatureTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSignatureTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSignatureTypeResponse) ProtoMessage() {}

func (x *UpdateSignatureTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSignatureTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateSignatureTypeResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSignatureTypeResponse) GetSignatureType() *SignatureType {
	if x != nil {
		return x.SignatureType
	}
	return nil
}

var File_blocky_authz_admin_v1alpha_admin_signatures_proto protoreflect.FileDescriptor

var file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDesc = []byte{
	0x0a, 0x31, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a,
	0x29, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x11, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x10, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5f, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x11, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x49,
	0x6e, 0x22, 0xa7, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0xe0, 0x03, 0x0a,
	0x16, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0x2e, 0xd2, 0x41, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42,
	0x93, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x42, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x42,
	0x41, 0x41, 0xaa, 0x02, 0x1a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca,
	0x02, 0x1a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x26, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x3a, 0x3a,
	0x41, 0x75, 0x74, 0x68, 0x7a, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescOnce sync.Once
	file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescData = file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDesc
)

func file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescGZIP() []byte {
	file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescOnce.Do(func() {
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescData)
	})
	return file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDescData
}

var file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_blocky_authz_admin_v1alpha_admin_signatures_proto_goTypes = []interface{}{
	(*CreateSignatureTypeRequest)(nil),  // 0: blocky.authz.admin.v1alpha.CreateSignatureTypeRequest
	(*CreateSignatureTypeResponse)(nil), // 1: blocky.authz.admin.v1alpha.CreateSignatureTypeResponse
	(*ListSignatureTypesRequest)(nil),   // 2: blocky.authz.admin.v1alpha.ListSignatureTypesRequest
	(*ListSignatureTypesResponse)(nil),  // 3: blocky.authz.admin.v1alpha.ListSignatureTypesResponse
	(*SignatureType)(nil),               // 4: blocky.authz.admin.v1alpha.SignatureType
	(*UpdateSignatureTypeRequest)(nil),  // 5: blocky.authz.admin.v1alpha.UpdateSignatureTypeRequest
	(*UpdateSignatureTypeResponse)(nil), // 6: blocky.authz.admin.v1alpha.UpdateSignatureTypeResponse
	(signalgpb.SigningAlgorithm)(0),     // 7: blocky.authz.type.SigningAlgorithm
	(*durationpb.Duration)(nil),         // 8: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),       // 9: google.protobuf.Timestamp
}
var file_blocky_authz_admin_v1alpha_admin_signatures_proto_depIdxs = []int32{
	7,  // 0: blocky.authz.admin.v1alpha.CreateSignatureTypeRequest.favored_algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	8,  // 1: blocky.authz.admin.v1alpha.CreateSignatureTypeRequest.signature_expiration:type_name -> google.protobuf.Duration
	9,  // 2: blocky.authz.admin.v1alpha.CreateSignatureTypeResponse.create_time:type_name -> google.protobuf.Timestamp
	8,  // 3: blocky.authz.admin.v1alpha.CreateSignatureTypeResponse.signature_expiration:type_name -> google.protobuf.Duration
	4,  // 4: blocky.authz.admin.v1alpha.ListSignatureTypesResponse.signature_types:type_name -> blocky.authz.admin.v1alpha.SignatureType
	9,  // 5: blocky.authz.admin.v1alpha.SignatureType.create_time:type_name -> google.protobuf.Timestamp
	9,  // 6: blocky.authz.admin.v1alpha.SignatureType.update_time:type_name -> google.protobuf.Timestamp
	8,  // 7: blocky.authz.admin.v1alpha.SignatureType.signature_expiration:type_name -> google.protobuf.Duration
	7,  // 8: blocky.authz.admin.v1alpha.SignatureType.favored_algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	7,  // 9: blocky.authz.admin.v1alpha.UpdateSignatureTypeRequest.favored_algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	8,  // 10: blocky.authz.admin.v1alpha.UpdateSignatureTypeRequest.signature_expiration:type_name -> google.protobuf.Duration
	4,  // 11: blocky.authz.admin.v1alpha.UpdateSignatureTypeResponse.signature_type:type_name -> blocky.authz.admin.v1alpha.SignatureType
	0,  // 12: blocky.authz.admin.v1alpha.SignaturesAdminService.CreateSignatureType:input_type -> blocky.authz.admin.v1alpha.CreateSignatureTypeRequest
	2,  // 13: blocky.authz.admin.v1alpha.SignaturesAdminService.ListSignatureTypes:input_type -> blocky.authz.admin.v1alpha.ListSignatureTypesRequest
	5,  // 14: blocky.authz.admin.v1alpha.SignaturesAdminService.UpdateSignatureType:input_type -> blocky.authz.admin.v1alpha.UpdateSignatureTypeRequest
	1,  // 15: blocky.authz.admin.v1alpha.SignaturesAdminService.CreateSignatureType:output_type -> blocky.authz.admin.v1alpha.CreateSignatureTypeResponse
	3,  // 16: blocky.authz.admin.v1alpha.SignaturesAdminService.ListSignatureTypes:output_type -> blocky.authz.admin.v1alpha.ListSignatureTypesResponse
	6,  // 17: blocky.authz.admin.v1alpha.SignaturesAdminService.UpdateSignatureType:output_type -> blocky.authz.admin.v1alpha.UpdateSignatureTypeResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_blocky_authz_admin_v1alpha_admin_signatures_proto_init() }
func file_blocky_authz_admin_v1alpha_admin_signatures_proto_init() {
	if File_blocky_authz_admin_v1alpha_admin_signatures_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSignatureTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSignatureTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSignatureTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSignatureTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSignatureTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSignatureTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blocky_authz_admin_v1alpha_admin_signatures_proto_goTypes,
		DependencyIndexes: file_blocky_authz_admin_v1alpha_admin_signatures_proto_depIdxs,
		MessageInfos:      file_blocky_authz_admin_v1alpha_admin_signatures_proto_msgTypes,
	}.Build()
	File_blocky_authz_admin_v1alpha_admin_signatures_proto = out.File
	file_blocky_authz_admin_v1alpha_admin_signatures_proto_rawDesc = nil
	file_blocky_authz_admin_v1alpha_admin_signatures_proto_goTypes = nil
	file_blocky_authz_admin_v1alpha_admin_signatures_proto_depIdxs = nil
}
