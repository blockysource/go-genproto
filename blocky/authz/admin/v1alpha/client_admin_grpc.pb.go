// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/authz/admin/v1alpha/client_admin.proto

package authzadminv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientAdminService_CreateClient_FullMethodName          = "/blocky.authz.admin.v1alpha.ClientAdminService/CreateClient"
	ClientAdminService_ListClient_FullMethodName            = "/blocky.authz.admin.v1alpha.ClientAdminService/ListClient"
	ClientAdminService_GetClient_FullMethodName             = "/blocky.authz.admin.v1alpha.ClientAdminService/GetClient"
	ClientAdminService_UpdateClient_FullMethodName          = "/blocky.authz.admin.v1alpha.ClientAdminService/UpdateClient"
	ClientAdminService_DeleteClient_FullMethodName          = "/blocky.authz.admin.v1alpha.ClientAdminService/DeleteClient"
	ClientAdminService_ShowClientCredentials_FullMethodName = "/blocky.authz.admin.v1alpha.ClientAdminService/ShowClientCredentials"
)

// ClientAdminServiceClient is the client API for ClientAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientAdminServiceClient interface {
	// Creates a new authorization client with the specified name,
	// and returns the new client.
	// A newly created client will have a secret generated.
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Lists authorization clients matching the specified filter.
	ListClient(ctx context.Context, in *ListClientRequest, opts ...grpc.CallOption) (*ListClientResponse, error)
	// Gets an authorization client by its identifier.
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Updates an authorization client, and returns the updated client.
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Deletes an authorization client.
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Shows the credentials for an authorization client.
	ShowClientCredentials(ctx context.Context, in *ShowClientCredentialsRequest, opts ...grpc.CallOption) (*ClientCredentials, error)
}

type clientAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientAdminServiceClient(cc grpc.ClientConnInterface) ClientAdminServiceClient {
	return &clientAdminServiceClient{cc}
}

func (c *clientAdminServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientAdminService_CreateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAdminServiceClient) ListClient(ctx context.Context, in *ListClientRequest, opts ...grpc.CallOption) (*ListClientResponse, error) {
	out := new(ListClientResponse)
	err := c.cc.Invoke(ctx, ClientAdminService_ListClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAdminServiceClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientAdminService_GetClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAdminServiceClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientAdminService_UpdateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAdminServiceClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientAdminService_DeleteClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAdminServiceClient) ShowClientCredentials(ctx context.Context, in *ShowClientCredentialsRequest, opts ...grpc.CallOption) (*ClientCredentials, error) {
	out := new(ClientCredentials)
	err := c.cc.Invoke(ctx, ClientAdminService_ShowClientCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAdminServiceServer is the server API for ClientAdminService service.
// All implementations must embed UnimplementedClientAdminServiceServer
// for forward compatibility
type ClientAdminServiceServer interface {
	// Creates a new authorization client with the specified name,
	// and returns the new client.
	// A newly created client will have a secret generated.
	CreateClient(context.Context, *CreateClientRequest) (*Client, error)
	// Lists authorization clients matching the specified filter.
	ListClient(context.Context, *ListClientRequest) (*ListClientResponse, error)
	// Gets an authorization client by its identifier.
	GetClient(context.Context, *GetClientRequest) (*Client, error)
	// Updates an authorization client, and returns the updated client.
	UpdateClient(context.Context, *UpdateClientRequest) (*Client, error)
	// Deletes an authorization client.
	DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error)
	// Shows the credentials for an authorization client.
	ShowClientCredentials(context.Context, *ShowClientCredentialsRequest) (*ClientCredentials, error)
	mustEmbedUnimplementedClientAdminServiceServer()
}

// UnimplementedClientAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientAdminServiceServer struct {
}

func (UnimplementedClientAdminServiceServer) CreateClient(context.Context, *CreateClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedClientAdminServiceServer) ListClient(context.Context, *ListClientRequest) (*ListClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClient not implemented")
}
func (UnimplementedClientAdminServiceServer) GetClient(context.Context, *GetClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedClientAdminServiceServer) UpdateClient(context.Context, *UpdateClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedClientAdminServiceServer) DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedClientAdminServiceServer) ShowClientCredentials(context.Context, *ShowClientCredentialsRequest) (*ClientCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowClientCredentials not implemented")
}
func (UnimplementedClientAdminServiceServer) mustEmbedUnimplementedClientAdminServiceServer() {}

// UnsafeClientAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientAdminServiceServer will
// result in compilation errors.
type UnsafeClientAdminServiceServer interface {
	mustEmbedUnimplementedClientAdminServiceServer()
}

func RegisterClientAdminServiceServer(s grpc.ServiceRegistrar, srv ClientAdminServiceServer) {
	s.RegisterService(&ClientAdminService_ServiceDesc, srv)
}

func _ClientAdminService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAdminServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAdminService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAdminServiceServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAdminService_ListClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAdminServiceServer).ListClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAdminService_ListClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAdminServiceServer).ListClient(ctx, req.(*ListClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAdminService_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAdminServiceServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAdminService_GetClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAdminServiceServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAdminService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAdminServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAdminService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAdminServiceServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAdminService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAdminServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAdminService_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAdminServiceServer).DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAdminService_ShowClientCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowClientCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAdminServiceServer).ShowClientCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAdminService_ShowClientCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAdminServiceServer).ShowClientCredentials(ctx, req.(*ShowClientCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientAdminService_ServiceDesc is the grpc.ServiceDesc for ClientAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.authz.admin.v1alpha.ClientAdminService",
	HandlerType: (*ClientAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _ClientAdminService_CreateClient_Handler,
		},
		{
			MethodName: "ListClient",
			Handler:    _ClientAdminService_ListClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _ClientAdminService_GetClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _ClientAdminService_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _ClientAdminService_DeleteClient_Handler,
		},
		{
			MethodName: "ShowClientCredentials",
			Handler:    _ClientAdminService_ShowClientCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/authz/admin/v1alpha/client_admin.proto",
}
