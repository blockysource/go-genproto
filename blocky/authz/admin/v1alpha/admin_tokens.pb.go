// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blocky/authz/admin/v1alpha/admin_tokens.proto

package authzadminv1alpha

import (
	signalgpb "github.com/blockysource/go-genproto/blocky/authz/type/signalgpb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [TokensAdminService.ConfigureTokenCreation][blocky.authz.v1alpha.TokensAdminService.ConfigureTokenCreation].
type ConfigureTokenCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The new configuration for the access token creation.
	AccessConfig *AccessTokenCreationConfig `protobuf:"bytes,1,opt,name=access_config,json=accessConfig,proto3" json:"access_config,omitempty"`
}

func (x *ConfigureTokenCreationRequest) Reset() {
	*x = ConfigureTokenCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureTokenCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureTokenCreationRequest) ProtoMessage() {}

func (x *ConfigureTokenCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureTokenCreationRequest.ProtoReflect.Descriptor instead.
func (*ConfigureTokenCreationRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigureTokenCreationRequest) GetAccessConfig() *AccessTokenCreationConfig {
	if x != nil {
		return x.AccessConfig
	}
	return nil
}

// Response message for
// [TokensAdminService.ConfigureTokenCreation][blocky.authz.v1alpha.TokensAdminService.ConfigureTokenCreation].
type ConfigureTokenCreationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new configuration for the access token creation.
	Config *AccessTokenCreationConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigureTokenCreationResponse) Reset() {
	*x = ConfigureTokenCreationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureTokenCreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureTokenCreationResponse) ProtoMessage() {}

func (x *ConfigureTokenCreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureTokenCreationResponse.ProtoReflect.Descriptor instead.
func (*ConfigureTokenCreationResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigureTokenCreationResponse) GetConfig() *AccessTokenCreationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Request message for
// [TokensAdminService.ConfigureRefreshTokenCreation][blocky.authz.v1alpha.TokensAdminService.ConfigureRefreshTokenCreation].
type ConfigureRefreshTokenCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The new configuration for the refresh token creation.
	RefreshConfig *RefreshTokenCreationConfig `protobuf:"bytes,1,opt,name=refresh_config,json=refreshConfig,proto3" json:"refresh_config,omitempty"`
}

func (x *ConfigureRefreshTokenCreationRequest) Reset() {
	*x = ConfigureRefreshTokenCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureRefreshTokenCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureRefreshTokenCreationRequest) ProtoMessage() {}

func (x *ConfigureRefreshTokenCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureRefreshTokenCreationRequest.ProtoReflect.Descriptor instead.
func (*ConfigureRefreshTokenCreationRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigureRefreshTokenCreationRequest) GetRefreshConfig() *RefreshTokenCreationConfig {
	if x != nil {
		return x.RefreshConfig
	}
	return nil
}

// Response message for
// [TokensAdminService.ConfigureRefreshTokenCreation][blocky.authz.v1alpha.TokensAdminService.ConfigureRefreshTokenCreation].
type ConfigureRefreshTokenCreationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new configuration for the refresh token creation.
	Config *RefreshTokenCreationConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigureRefreshTokenCreationResponse) Reset() {
	*x = ConfigureRefreshTokenCreationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureRefreshTokenCreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureRefreshTokenCreationResponse) ProtoMessage() {}

func (x *ConfigureRefreshTokenCreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureRefreshTokenCreationResponse.ProtoReflect.Descriptor instead.
func (*ConfigureRefreshTokenCreationResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigureRefreshTokenCreationResponse) GetConfig() *RefreshTokenCreationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Request message for
// [TokensAdminService.ShowTokenCreationConfig][blocky.authz.v1alpha.TokensAdminService.ShowTokenCreationConfig].
type ShowTokenCreationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowTokenCreationConfigRequest) Reset() {
	*x = ShowTokenCreationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowTokenCreationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowTokenCreationConfigRequest) ProtoMessage() {}

func (x *ShowTokenCreationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowTokenCreationConfigRequest.ProtoReflect.Descriptor instead.
func (*ShowTokenCreationConfigRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{4}
}

// Response message for
// [TokensAdminService.ShowTokenCreationConfig][blocky.authz.v1alpha.TokensAdminService.ShowTokenCreationConfig].
type ShowTokenCreationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current configuration for the access token creation.
	Config *AccessTokenCreationConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Current configuration for the refresh token creation.
	RefreshConfig *RefreshTokenCreationConfig `protobuf:"bytes,2,opt,name=refresh_config,json=refreshConfig,proto3" json:"refresh_config,omitempty"`
}

func (x *ShowTokenCreationConfigResponse) Reset() {
	*x = ShowTokenCreationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowTokenCreationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowTokenCreationConfigResponse) ProtoMessage() {}

func (x *ShowTokenCreationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowTokenCreationConfigResponse.ProtoReflect.Descriptor instead.
func (*ShowTokenCreationConfigResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{5}
}

func (x *ShowTokenCreationConfigResponse) GetConfig() *AccessTokenCreationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ShowTokenCreationConfigResponse) GetRefreshConfig() *RefreshTokenCreationConfig {
	if x != nil {
		return x.RefreshConfig
	}
	return nil
}

// Configuration for the access token creation.
type AccessTokenCreationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The algorithm to use for the access token creation.
	FavoredKeyAlgorithm signalgpb.SigningAlgorithm `protobuf:"varint,1,opt,name=favored_key_algorithm,json=favoredKeyAlgorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"favored_key_algorithm,omitempty"`
	// The duration for which the access token is valid.
	TokenExpiration *durationpb.Duration `protobuf:"bytes,2,opt,name=token_expiration,json=tokenExpiration,proto3" json:"token_expiration,omitempty"`
	// Default key identifier to use for the access token creation.
	DefaultKeyId string `protobuf:"bytes,3,opt,name=default_key_id,json=defaultKeyId,proto3" json:"default_key_id,omitempty"`
	// The name of the issuer of the access token.
	// If not set, the default value is "blocky".
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *AccessTokenCreationConfig) Reset() {
	*x = AccessTokenCreationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessTokenCreationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTokenCreationConfig) ProtoMessage() {}

func (x *AccessTokenCreationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTokenCreationConfig.ProtoReflect.Descriptor instead.
func (*AccessTokenCreationConfig) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{6}
}

func (x *AccessTokenCreationConfig) GetFavoredKeyAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.FavoredKeyAlgorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *AccessTokenCreationConfig) GetTokenExpiration() *durationpb.Duration {
	if x != nil {
		return x.TokenExpiration
	}
	return nil
}

func (x *AccessTokenCreationConfig) GetDefaultKeyId() string {
	if x != nil {
		return x.DefaultKeyId
	}
	return ""
}

func (x *AccessTokenCreationConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

// Configuration for the refresh token creation.
type RefreshTokenCreationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The algorithm to use for the access token creation.
	FavoredKeyAlgorithm signalgpb.SigningAlgorithm `protobuf:"varint,1,opt,name=favored_key_algorithm,json=favoredKeyAlgorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"favored_key_algorithm,omitempty"`
	// The duration for which the access token is valid.
	// If not set, the default value is 1 hour.
	TokenExpiration *durationpb.Duration `protobuf:"bytes,2,opt,name=token_expiration,json=tokenExpiration,proto3" json:"token_expiration,omitempty"`
	// Default key identifier to use for the access token creation.
	DefaultKeyId string `protobuf:"bytes,3,opt,name=default_key_id,json=defaultKeyId,proto3" json:"default_key_id,omitempty"`
	// The number of bytes used as a refresh token random value.
	// By default this value is 128 bytes.
	// This value should not be greater than 2048 bytes.
	TokenSize int32 `protobuf:"varint,4,opt,name=token_size,json=tokenSize,proto3" json:"token_size,omitempty"`
}

func (x *RefreshTokenCreationConfig) Reset() {
	*x = RefreshTokenCreationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenCreationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenCreationConfig) ProtoMessage() {}

func (x *RefreshTokenCreationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenCreationConfig.ProtoReflect.Descriptor instead.
func (*RefreshTokenCreationConfig) Descriptor() ([]byte, []int) {
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP(), []int{7}
}

func (x *RefreshTokenCreationConfig) GetFavoredKeyAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.FavoredKeyAlgorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *RefreshTokenCreationConfig) GetTokenExpiration() *durationpb.Duration {
	if x != nil {
		return x.TokenExpiration
	}
	return nil
}

func (x *RefreshTokenCreationConfig) GetDefaultKeyId() string {
	if x != nil {
		return x.DefaultKeyId
	}
	return ""
}

func (x *RefreshTokenCreationConfig) GetTokenSize() int32 {
	if x != nil {
		return x.TokenSize
	}
	return 0
}

var File_blocky_authz_admin_v1alpha_admin_tokens_proto protoreflect.FileDescriptor

var file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x29, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x80, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x6f, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8a, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62,
	0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x77, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x20, 0x0a, 0x1e, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcf, 0x01,
	0x0a, 0x1f, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x5d, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x8c, 0x02, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a,
	0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x49, 0x0a, 0x10, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x94,
	0x02, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a,
	0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x49, 0x0a, 0x10, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x84, 0x04, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96,
	0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x2e, 0xd2, 0x41,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x8f, 0x02, 0x0a,
	0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42,
	0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x42, 0x41, 0x41, 0xaa, 0x02, 0x1a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x1a, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x26, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x41,
	0x75, 0x74, 0x68, 0x7a, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x3a, 0x3a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescOnce sync.Once
	file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescData = file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDesc
)

func file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescGZIP() []byte {
	file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescOnce.Do(func() {
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescData)
	})
	return file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDescData
}

var file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_blocky_authz_admin_v1alpha_admin_tokens_proto_goTypes = []interface{}{
	(*ConfigureTokenCreationRequest)(nil),         // 0: blocky.authz.admin.v1alpha.ConfigureTokenCreationRequest
	(*ConfigureTokenCreationResponse)(nil),        // 1: blocky.authz.admin.v1alpha.ConfigureTokenCreationResponse
	(*ConfigureRefreshTokenCreationRequest)(nil),  // 2: blocky.authz.admin.v1alpha.ConfigureRefreshTokenCreationRequest
	(*ConfigureRefreshTokenCreationResponse)(nil), // 3: blocky.authz.admin.v1alpha.ConfigureRefreshTokenCreationResponse
	(*ShowTokenCreationConfigRequest)(nil),        // 4: blocky.authz.admin.v1alpha.ShowTokenCreationConfigRequest
	(*ShowTokenCreationConfigResponse)(nil),       // 5: blocky.authz.admin.v1alpha.ShowTokenCreationConfigResponse
	(*AccessTokenCreationConfig)(nil),             // 6: blocky.authz.admin.v1alpha.AccessTokenCreationConfig
	(*RefreshTokenCreationConfig)(nil),            // 7: blocky.authz.admin.v1alpha.RefreshTokenCreationConfig
	(signalgpb.SigningAlgorithm)(0),               // 8: blocky.authz.type.SigningAlgorithm
	(*durationpb.Duration)(nil),                   // 9: google.protobuf.Duration
}
var file_blocky_authz_admin_v1alpha_admin_tokens_proto_depIdxs = []int32{
	6,  // 0: blocky.authz.admin.v1alpha.ConfigureTokenCreationRequest.access_config:type_name -> blocky.authz.admin.v1alpha.AccessTokenCreationConfig
	6,  // 1: blocky.authz.admin.v1alpha.ConfigureTokenCreationResponse.config:type_name -> blocky.authz.admin.v1alpha.AccessTokenCreationConfig
	7,  // 2: blocky.authz.admin.v1alpha.ConfigureRefreshTokenCreationRequest.refresh_config:type_name -> blocky.authz.admin.v1alpha.RefreshTokenCreationConfig
	7,  // 3: blocky.authz.admin.v1alpha.ConfigureRefreshTokenCreationResponse.config:type_name -> blocky.authz.admin.v1alpha.RefreshTokenCreationConfig
	6,  // 4: blocky.authz.admin.v1alpha.ShowTokenCreationConfigResponse.config:type_name -> blocky.authz.admin.v1alpha.AccessTokenCreationConfig
	7,  // 5: blocky.authz.admin.v1alpha.ShowTokenCreationConfigResponse.refresh_config:type_name -> blocky.authz.admin.v1alpha.RefreshTokenCreationConfig
	8,  // 6: blocky.authz.admin.v1alpha.AccessTokenCreationConfig.favored_key_algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	9,  // 7: blocky.authz.admin.v1alpha.AccessTokenCreationConfig.token_expiration:type_name -> google.protobuf.Duration
	8,  // 8: blocky.authz.admin.v1alpha.RefreshTokenCreationConfig.favored_key_algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	9,  // 9: blocky.authz.admin.v1alpha.RefreshTokenCreationConfig.token_expiration:type_name -> google.protobuf.Duration
	0,  // 10: blocky.authz.admin.v1alpha.TokensAdminService.ConfigureTokenCreation:input_type -> blocky.authz.admin.v1alpha.ConfigureTokenCreationRequest
	0,  // 11: blocky.authz.admin.v1alpha.TokensAdminService.ConfigureRefreshTokenCreation:input_type -> blocky.authz.admin.v1alpha.ConfigureTokenCreationRequest
	4,  // 12: blocky.authz.admin.v1alpha.TokensAdminService.ShowTokenCreationConfig:input_type -> blocky.authz.admin.v1alpha.ShowTokenCreationConfigRequest
	1,  // 13: blocky.authz.admin.v1alpha.TokensAdminService.ConfigureTokenCreation:output_type -> blocky.authz.admin.v1alpha.ConfigureTokenCreationResponse
	1,  // 14: blocky.authz.admin.v1alpha.TokensAdminService.ConfigureRefreshTokenCreation:output_type -> blocky.authz.admin.v1alpha.ConfigureTokenCreationResponse
	5,  // 15: blocky.authz.admin.v1alpha.TokensAdminService.ShowTokenCreationConfig:output_type -> blocky.authz.admin.v1alpha.ShowTokenCreationConfigResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_blocky_authz_admin_v1alpha_admin_tokens_proto_init() }
func file_blocky_authz_admin_v1alpha_admin_tokens_proto_init() {
	if File_blocky_authz_admin_v1alpha_admin_tokens_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureTokenCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureTokenCreationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureRefreshTokenCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureRefreshTokenCreationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowTokenCreationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowTokenCreationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessTokenCreationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenCreationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blocky_authz_admin_v1alpha_admin_tokens_proto_goTypes,
		DependencyIndexes: file_blocky_authz_admin_v1alpha_admin_tokens_proto_depIdxs,
		MessageInfos:      file_blocky_authz_admin_v1alpha_admin_tokens_proto_msgTypes,
	}.Build()
	File_blocky_authz_admin_v1alpha_admin_tokens_proto = out.File
	file_blocky_authz_admin_v1alpha_admin_tokens_proto_rawDesc = nil
	file_blocky_authz_admin_v1alpha_admin_tokens_proto_goTypes = nil
	file_blocky_authz_admin_v1alpha_admin_tokens_proto_depIdxs = nil
}
