// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/authz/admin/v1alpha/key_admin.proto

package authzadminv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyAdminService_CreateKey_FullMethodName         = "/blocky.authz.admin.v1alpha.KeyAdminService/CreateKey"
	KeyAdminService_GetKey_FullMethodName            = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKey"
	KeyAdminService_ListKeys_FullMethodName          = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeys"
	KeyAdminService_UpdateKey_FullMethodName         = "/blocky.authz.admin.v1alpha.KeyAdminService/UpdateKey"
	KeyAdminService_CreateKeyRevision_FullMethodName = "/blocky.authz.admin.v1alpha.KeyAdminService/CreateKeyRevision"
	KeyAdminService_GetKeyRevision_FullMethodName    = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKeyRevision"
	KeyAdminService_ListKeyRevisions_FullMethodName  = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeyRevisions"
	KeyAdminService_RevokeKeyRevision_FullMethodName = "/blocky.authz.admin.v1alpha.KeyAdminService/RevokeKeyRevision"
)

// KeyAdminServiceClient is the client API for KeyAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyAdminServiceClient interface {
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// GetKey returns the specified authorization key.
	// The name of the key may be used as:
	// 'projects/{project}/keys/default' to get the default key for the project.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// UpdateKey updates the specified authorization key.
	UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Creates a new key revision and rotates the key.
	CreateKeyRevision(ctx context.Context, in *CreateKeyRevisionRequest, opts ...grpc.CallOption) (*KeyRevision, error)
	// GetKeyRevision returns the specified key revision.
	GetKeyRevision(ctx context.Context, in *GetKeyRevisionRequest, opts ...grpc.CallOption) (*KeyRevision, error)
	// ListKeyRevisions lists authorization key revisions that matches given request.
	// The key revisions are derived from the parent key.
	ListKeyRevisions(ctx context.Context, in *ListKeyRevisionsRequest, opts ...grpc.CallOption) (*ListKeyRevisionsResponse, error)
	// RevokeKeyRevision revokes an authorization key revision.
	// Once revoked the key revision is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyRevision(ctx context.Context, in *RevokeKeyRevisionRequest, opts ...grpc.CallOption) (*KeyRevision, error)
}

type keyAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyAdminServiceClient(cc grpc.ClientConnInterface) KeyAdminServiceClient {
	return &keyAdminServiceClient{cc}
}

func (c *keyAdminServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyAdminService_CreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAdminServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyAdminService_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAdminServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, KeyAdminService_ListKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAdminServiceClient) UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyAdminService_UpdateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAdminServiceClient) CreateKeyRevision(ctx context.Context, in *CreateKeyRevisionRequest, opts ...grpc.CallOption) (*KeyRevision, error) {
	out := new(KeyRevision)
	err := c.cc.Invoke(ctx, KeyAdminService_CreateKeyRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAdminServiceClient) GetKeyRevision(ctx context.Context, in *GetKeyRevisionRequest, opts ...grpc.CallOption) (*KeyRevision, error) {
	out := new(KeyRevision)
	err := c.cc.Invoke(ctx, KeyAdminService_GetKeyRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAdminServiceClient) ListKeyRevisions(ctx context.Context, in *ListKeyRevisionsRequest, opts ...grpc.CallOption) (*ListKeyRevisionsResponse, error) {
	out := new(ListKeyRevisionsResponse)
	err := c.cc.Invoke(ctx, KeyAdminService_ListKeyRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAdminServiceClient) RevokeKeyRevision(ctx context.Context, in *RevokeKeyRevisionRequest, opts ...grpc.CallOption) (*KeyRevision, error) {
	out := new(KeyRevision)
	err := c.cc.Invoke(ctx, KeyAdminService_RevokeKeyRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyAdminServiceServer is the server API for KeyAdminService service.
// All implementations must embed UnimplementedKeyAdminServiceServer
// for forward compatibility
type KeyAdminServiceServer interface {
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *CreateKeyRequest) (*Key, error)
	// GetKey returns the specified authorization key.
	// The name of the key may be used as:
	// 'projects/{project}/keys/default' to get the default key for the project.
	GetKey(context.Context, *GetKeyRequest) (*Key, error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// UpdateKey updates the specified authorization key.
	UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error)
	// Creates a new key revision and rotates the key.
	CreateKeyRevision(context.Context, *CreateKeyRevisionRequest) (*KeyRevision, error)
	// GetKeyRevision returns the specified key revision.
	GetKeyRevision(context.Context, *GetKeyRevisionRequest) (*KeyRevision, error)
	// ListKeyRevisions lists authorization key revisions that matches given request.
	// The key revisions are derived from the parent key.
	ListKeyRevisions(context.Context, *ListKeyRevisionsRequest) (*ListKeyRevisionsResponse, error)
	// RevokeKeyRevision revokes an authorization key revision.
	// Once revoked the key revision is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyRevision(context.Context, *RevokeKeyRevisionRequest) (*KeyRevision, error)
	mustEmbedUnimplementedKeyAdminServiceServer()
}

// UnimplementedKeyAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyAdminServiceServer struct {
}

func (UnimplementedKeyAdminServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKeyAdminServiceServer) GetKey(context.Context, *GetKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeyAdminServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKeyAdminServiceServer) UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedKeyAdminServiceServer) CreateKeyRevision(context.Context, *CreateKeyRevisionRequest) (*KeyRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyRevision not implemented")
}
func (UnimplementedKeyAdminServiceServer) GetKeyRevision(context.Context, *GetKeyRevisionRequest) (*KeyRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyRevision not implemented")
}
func (UnimplementedKeyAdminServiceServer) ListKeyRevisions(context.Context, *ListKeyRevisionsRequest) (*ListKeyRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyRevisions not implemented")
}
func (UnimplementedKeyAdminServiceServer) RevokeKeyRevision(context.Context, *RevokeKeyRevisionRequest) (*KeyRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeKeyRevision not implemented")
}
func (UnimplementedKeyAdminServiceServer) mustEmbedUnimplementedKeyAdminServiceServer() {}

// UnsafeKeyAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyAdminServiceServer will
// result in compilation errors.
type UnsafeKeyAdminServiceServer interface {
	mustEmbedUnimplementedKeyAdminServiceServer()
}

func RegisterKeyAdminServiceServer(s grpc.ServiceRegistrar, srv KeyAdminServiceServer) {
	s.RegisterService(&KeyAdminService_ServiceDesc, srv)
}

func _KeyAdminService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAdminService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAdminService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAdminService_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_UpdateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).UpdateKey(ctx, req.(*UpdateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAdminService_CreateKeyRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).CreateKeyRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_CreateKeyRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).CreateKeyRevision(ctx, req.(*CreateKeyRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAdminService_GetKeyRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).GetKeyRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_GetKeyRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).GetKeyRevision(ctx, req.(*GetKeyRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAdminService_ListKeyRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).ListKeyRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_ListKeyRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).ListKeyRevisions(ctx, req.(*ListKeyRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAdminService_RevokeKeyRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeKeyRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAdminServiceServer).RevokeKeyRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAdminService_RevokeKeyRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAdminServiceServer).RevokeKeyRevision(ctx, req.(*RevokeKeyRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyAdminService_ServiceDesc is the grpc.ServiceDesc for KeyAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.authz.admin.v1alpha.KeyAdminService",
	HandlerType: (*KeyAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KeyAdminService_CreateKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _KeyAdminService_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _KeyAdminService_ListKeys_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _KeyAdminService_UpdateKey_Handler,
		},
		{
			MethodName: "CreateKeyRevision",
			Handler:    _KeyAdminService_CreateKeyRevision_Handler,
		},
		{
			MethodName: "GetKeyRevision",
			Handler:    _KeyAdminService_GetKeyRevision_Handler,
		},
		{
			MethodName: "ListKeyRevisions",
			Handler:    _KeyAdminService_ListKeyRevisions_Handler,
		},
		{
			MethodName: "RevokeKeyRevision",
			Handler:    _KeyAdminService_RevokeKeyRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/authz/admin/v1alpha/key_admin.proto",
}
