// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/authz/admin/v1alpha/admin_tokens.proto

package authzadminv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokensAdminService_ConfigureTokenCreation_FullMethodName        = "/blocky.authz.admin.v1alpha.TokensAdminService/ConfigureTokenCreation"
	TokensAdminService_ConfigureRefreshTokenCreation_FullMethodName = "/blocky.authz.admin.v1alpha.TokensAdminService/ConfigureRefreshTokenCreation"
	TokensAdminService_ShowTokenCreationConfig_FullMethodName       = "/blocky.authz.admin.v1alpha.TokensAdminService/ShowTokenCreationConfig"
)

// TokensAdminServiceClient is the client API for TokensAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokensAdminServiceClient interface {
	// Configures the access token creation.
	ConfigureTokenCreation(ctx context.Context, in *ConfigureTokenCreationRequest, opts ...grpc.CallOption) (*ConfigureTokenCreationResponse, error)
	// Configures the refresh token creation.
	ConfigureRefreshTokenCreation(ctx context.Context, in *ConfigureTokenCreationRequest, opts ...grpc.CallOption) (*ConfigureTokenCreationResponse, error)
	// Returns the current configuration for the access token creation.
	ShowTokenCreationConfig(ctx context.Context, in *ShowTokenCreationConfigRequest, opts ...grpc.CallOption) (*ShowTokenCreationConfigResponse, error)
}

type tokensAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensAdminServiceClient(cc grpc.ClientConnInterface) TokensAdminServiceClient {
	return &tokensAdminServiceClient{cc}
}

func (c *tokensAdminServiceClient) ConfigureTokenCreation(ctx context.Context, in *ConfigureTokenCreationRequest, opts ...grpc.CallOption) (*ConfigureTokenCreationResponse, error) {
	out := new(ConfigureTokenCreationResponse)
	err := c.cc.Invoke(ctx, TokensAdminService_ConfigureTokenCreation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensAdminServiceClient) ConfigureRefreshTokenCreation(ctx context.Context, in *ConfigureTokenCreationRequest, opts ...grpc.CallOption) (*ConfigureTokenCreationResponse, error) {
	out := new(ConfigureTokenCreationResponse)
	err := c.cc.Invoke(ctx, TokensAdminService_ConfigureRefreshTokenCreation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensAdminServiceClient) ShowTokenCreationConfig(ctx context.Context, in *ShowTokenCreationConfigRequest, opts ...grpc.CallOption) (*ShowTokenCreationConfigResponse, error) {
	out := new(ShowTokenCreationConfigResponse)
	err := c.cc.Invoke(ctx, TokensAdminService_ShowTokenCreationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokensAdminServiceServer is the server API for TokensAdminService service.
// All implementations must embed UnimplementedTokensAdminServiceServer
// for forward compatibility
type TokensAdminServiceServer interface {
	// Configures the access token creation.
	ConfigureTokenCreation(context.Context, *ConfigureTokenCreationRequest) (*ConfigureTokenCreationResponse, error)
	// Configures the refresh token creation.
	ConfigureRefreshTokenCreation(context.Context, *ConfigureTokenCreationRequest) (*ConfigureTokenCreationResponse, error)
	// Returns the current configuration for the access token creation.
	ShowTokenCreationConfig(context.Context, *ShowTokenCreationConfigRequest) (*ShowTokenCreationConfigResponse, error)
	mustEmbedUnimplementedTokensAdminServiceServer()
}

// UnimplementedTokensAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokensAdminServiceServer struct {
}

func (UnimplementedTokensAdminServiceServer) ConfigureTokenCreation(context.Context, *ConfigureTokenCreationRequest) (*ConfigureTokenCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureTokenCreation not implemented")
}
func (UnimplementedTokensAdminServiceServer) ConfigureRefreshTokenCreation(context.Context, *ConfigureTokenCreationRequest) (*ConfigureTokenCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureRefreshTokenCreation not implemented")
}
func (UnimplementedTokensAdminServiceServer) ShowTokenCreationConfig(context.Context, *ShowTokenCreationConfigRequest) (*ShowTokenCreationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTokenCreationConfig not implemented")
}
func (UnimplementedTokensAdminServiceServer) mustEmbedUnimplementedTokensAdminServiceServer() {}

// UnsafeTokensAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokensAdminServiceServer will
// result in compilation errors.
type UnsafeTokensAdminServiceServer interface {
	mustEmbedUnimplementedTokensAdminServiceServer()
}

func RegisterTokensAdminServiceServer(s grpc.ServiceRegistrar, srv TokensAdminServiceServer) {
	s.RegisterService(&TokensAdminService_ServiceDesc, srv)
}

func _TokensAdminService_ConfigureTokenCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureTokenCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensAdminServiceServer).ConfigureTokenCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokensAdminService_ConfigureTokenCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensAdminServiceServer).ConfigureTokenCreation(ctx, req.(*ConfigureTokenCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensAdminService_ConfigureRefreshTokenCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureTokenCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensAdminServiceServer).ConfigureRefreshTokenCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokensAdminService_ConfigureRefreshTokenCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensAdminServiceServer).ConfigureRefreshTokenCreation(ctx, req.(*ConfigureTokenCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensAdminService_ShowTokenCreationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowTokenCreationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensAdminServiceServer).ShowTokenCreationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokensAdminService_ShowTokenCreationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensAdminServiceServer).ShowTokenCreationConfig(ctx, req.(*ShowTokenCreationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokensAdminService_ServiceDesc is the grpc.ServiceDesc for TokensAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokensAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.authz.admin.v1alpha.TokensAdminService",
	HandlerType: (*TokensAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureTokenCreation",
			Handler:    _TokensAdminService_ConfigureTokenCreation_Handler,
		},
		{
			MethodName: "ConfigureRefreshTokenCreation",
			Handler:    _TokensAdminService_ConfigureRefreshTokenCreation_Handler,
		},
		{
			MethodName: "ShowTokenCreationConfig",
			Handler:    _TokensAdminService_ShowTokenCreationConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/authz/admin/v1alpha/admin_tokens.proto",
}
