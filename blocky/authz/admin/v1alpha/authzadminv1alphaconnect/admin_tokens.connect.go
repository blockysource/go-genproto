// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/admin_tokens.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TokensAdminServiceName is the fully-qualified name of the TokensAdminService service.
	TokensAdminServiceName = "blocky.authz.admin.v1alpha.TokensAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokensAdminServiceConfigureTokenCreationProcedure is the fully-qualified name of the
	// TokensAdminService's ConfigureTokenCreation RPC.
	TokensAdminServiceConfigureTokenCreationProcedure = "/blocky.authz.admin.v1alpha.TokensAdminService/ConfigureTokenCreation"
	// TokensAdminServiceConfigureRefreshTokenCreationProcedure is the fully-qualified name of the
	// TokensAdminService's ConfigureRefreshTokenCreation RPC.
	TokensAdminServiceConfigureRefreshTokenCreationProcedure = "/blocky.authz.admin.v1alpha.TokensAdminService/ConfigureRefreshTokenCreation"
	// TokensAdminServiceShowTokenCreationConfigProcedure is the fully-qualified name of the
	// TokensAdminService's ShowTokenCreationConfig RPC.
	TokensAdminServiceShowTokenCreationConfigProcedure = "/blocky.authz.admin.v1alpha.TokensAdminService/ShowTokenCreationConfig"
)

// TokensAdminServiceClient is a client for the blocky.authz.admin.v1alpha.TokensAdminService
// service.
type TokensAdminServiceClient interface {
	// Configures the access token creation.
	ConfigureTokenCreation(context.Context, *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error)
	// Configures the refresh token creation.
	ConfigureRefreshTokenCreation(context.Context, *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error)
	// Returns the current configuration for the access token creation.
	ShowTokenCreationConfig(context.Context, *connect_go.Request[v1alpha.ShowTokenCreationConfigRequest]) (*connect_go.Response[v1alpha.ShowTokenCreationConfigResponse], error)
}

// NewTokensAdminServiceClient constructs a client for the
// blocky.authz.admin.v1alpha.TokensAdminService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokensAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TokensAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokensAdminServiceClient{
		configureTokenCreation: connect_go.NewClient[v1alpha.ConfigureTokenCreationRequest, v1alpha.ConfigureTokenCreationResponse](
			httpClient,
			baseURL+TokensAdminServiceConfigureTokenCreationProcedure,
			opts...,
		),
		configureRefreshTokenCreation: connect_go.NewClient[v1alpha.ConfigureTokenCreationRequest, v1alpha.ConfigureTokenCreationResponse](
			httpClient,
			baseURL+TokensAdminServiceConfigureRefreshTokenCreationProcedure,
			opts...,
		),
		showTokenCreationConfig: connect_go.NewClient[v1alpha.ShowTokenCreationConfigRequest, v1alpha.ShowTokenCreationConfigResponse](
			httpClient,
			baseURL+TokensAdminServiceShowTokenCreationConfigProcedure,
			opts...,
		),
	}
}

// tokensAdminServiceClient implements TokensAdminServiceClient.
type tokensAdminServiceClient struct {
	configureTokenCreation        *connect_go.Client[v1alpha.ConfigureTokenCreationRequest, v1alpha.ConfigureTokenCreationResponse]
	configureRefreshTokenCreation *connect_go.Client[v1alpha.ConfigureTokenCreationRequest, v1alpha.ConfigureTokenCreationResponse]
	showTokenCreationConfig       *connect_go.Client[v1alpha.ShowTokenCreationConfigRequest, v1alpha.ShowTokenCreationConfigResponse]
}

// ConfigureTokenCreation calls
// blocky.authz.admin.v1alpha.TokensAdminService.ConfigureTokenCreation.
func (c *tokensAdminServiceClient) ConfigureTokenCreation(ctx context.Context, req *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error) {
	return c.configureTokenCreation.CallUnary(ctx, req)
}

// ConfigureRefreshTokenCreation calls
// blocky.authz.admin.v1alpha.TokensAdminService.ConfigureRefreshTokenCreation.
func (c *tokensAdminServiceClient) ConfigureRefreshTokenCreation(ctx context.Context, req *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error) {
	return c.configureRefreshTokenCreation.CallUnary(ctx, req)
}

// ShowTokenCreationConfig calls
// blocky.authz.admin.v1alpha.TokensAdminService.ShowTokenCreationConfig.
func (c *tokensAdminServiceClient) ShowTokenCreationConfig(ctx context.Context, req *connect_go.Request[v1alpha.ShowTokenCreationConfigRequest]) (*connect_go.Response[v1alpha.ShowTokenCreationConfigResponse], error) {
	return c.showTokenCreationConfig.CallUnary(ctx, req)
}

// TokensAdminServiceHandler is an implementation of the
// blocky.authz.admin.v1alpha.TokensAdminService service.
type TokensAdminServiceHandler interface {
	// Configures the access token creation.
	ConfigureTokenCreation(context.Context, *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error)
	// Configures the refresh token creation.
	ConfigureRefreshTokenCreation(context.Context, *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error)
	// Returns the current configuration for the access token creation.
	ShowTokenCreationConfig(context.Context, *connect_go.Request[v1alpha.ShowTokenCreationConfigRequest]) (*connect_go.Response[v1alpha.ShowTokenCreationConfigResponse], error)
}

// NewTokensAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokensAdminServiceHandler(svc TokensAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	tokensAdminServiceConfigureTokenCreationHandler := connect_go.NewUnaryHandler(
		TokensAdminServiceConfigureTokenCreationProcedure,
		svc.ConfigureTokenCreation,
		opts...,
	)
	tokensAdminServiceConfigureRefreshTokenCreationHandler := connect_go.NewUnaryHandler(
		TokensAdminServiceConfigureRefreshTokenCreationProcedure,
		svc.ConfigureRefreshTokenCreation,
		opts...,
	)
	tokensAdminServiceShowTokenCreationConfigHandler := connect_go.NewUnaryHandler(
		TokensAdminServiceShowTokenCreationConfigProcedure,
		svc.ShowTokenCreationConfig,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.TokensAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokensAdminServiceConfigureTokenCreationProcedure:
			tokensAdminServiceConfigureTokenCreationHandler.ServeHTTP(w, r)
		case TokensAdminServiceConfigureRefreshTokenCreationProcedure:
			tokensAdminServiceConfigureRefreshTokenCreationHandler.ServeHTTP(w, r)
		case TokensAdminServiceShowTokenCreationConfigProcedure:
			tokensAdminServiceShowTokenCreationConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokensAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokensAdminServiceHandler struct{}

func (UnimplementedTokensAdminServiceHandler) ConfigureTokenCreation(context.Context, *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.TokensAdminService.ConfigureTokenCreation is not implemented"))
}

func (UnimplementedTokensAdminServiceHandler) ConfigureRefreshTokenCreation(context.Context, *connect_go.Request[v1alpha.ConfigureTokenCreationRequest]) (*connect_go.Response[v1alpha.ConfigureTokenCreationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.TokensAdminService.ConfigureRefreshTokenCreation is not implemented"))
}

func (UnimplementedTokensAdminServiceHandler) ShowTokenCreationConfig(context.Context, *connect_go.Request[v1alpha.ShowTokenCreationConfigRequest]) (*connect_go.Response[v1alpha.ShowTokenCreationConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.TokensAdminService.ShowTokenCreationConfig is not implemented"))
}
