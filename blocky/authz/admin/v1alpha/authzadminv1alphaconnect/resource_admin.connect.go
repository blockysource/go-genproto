// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/resource_admin.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ResourceAdminServiceName is the fully-qualified name of the ResourceAdminService service.
	ResourceAdminServiceName = "blocky.authz.admin.v1alpha.ResourceAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ResourceAdminServiceCreateResourceManagerProcedure is the fully-qualified name of the
	// ResourceAdminService's CreateResourceManager RPC.
	ResourceAdminServiceCreateResourceManagerProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/CreateResourceManager"
	// ResourceAdminServiceGetResourceManagerProcedure is the fully-qualified name of the
	// ResourceAdminService's GetResourceManager RPC.
	ResourceAdminServiceGetResourceManagerProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/GetResourceManager"
	// ResourceAdminServiceListResourceManagersProcedure is the fully-qualified name of the
	// ResourceAdminService's ListResourceManagers RPC.
	ResourceAdminServiceListResourceManagersProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/ListResourceManagers"
	// ResourceAdminServiceUpdateResourceManagerProcedure is the fully-qualified name of the
	// ResourceAdminService's UpdateResourceManager RPC.
	ResourceAdminServiceUpdateResourceManagerProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/UpdateResourceManager"
	// ResourceAdminServiceDeleteResourceManagerProcedure is the fully-qualified name of the
	// ResourceAdminService's DeleteResourceManager RPC.
	ResourceAdminServiceDeleteResourceManagerProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/DeleteResourceManager"
	// ResourceAdminServiceAliasResourceManagerProcedure is the fully-qualified name of the
	// ResourceAdminService's AliasResourceManager RPC.
	ResourceAdminServiceAliasResourceManagerProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/AliasResourceManager"
	// ResourceAdminServiceCreateResourcePermissionProcedure is the fully-qualified name of the
	// ResourceAdminService's CreateResourcePermission RPC.
	ResourceAdminServiceCreateResourcePermissionProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/CreateResourcePermission"
	// ResourceAdminServiceListResourcePermissionProcedure is the fully-qualified name of the
	// ResourceAdminService's ListResourcePermission RPC.
	ResourceAdminServiceListResourcePermissionProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/ListResourcePermission"
	// ResourceAdminServiceGetResourcePermissionProcedure is the fully-qualified name of the
	// ResourceAdminService's GetResourcePermission RPC.
	ResourceAdminServiceGetResourcePermissionProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/GetResourcePermission"
	// ResourceAdminServiceUpdateResourcePermissionProcedure is the fully-qualified name of the
	// ResourceAdminService's UpdateResourcePermission RPC.
	ResourceAdminServiceUpdateResourcePermissionProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/UpdateResourcePermission"
	// ResourceAdminServiceDeleteResourcePermissionProcedure is the fully-qualified name of the
	// ResourceAdminService's DeleteResourcePermission RPC.
	ResourceAdminServiceDeleteResourcePermissionProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/DeleteResourcePermission"
	// ResourceAdminServiceAliasResourcePermissionProcedure is the fully-qualified name of the
	// ResourceAdminService's AliasResourcePermission RPC.
	ResourceAdminServiceAliasResourcePermissionProcedure = "/blocky.authz.admin.v1alpha.ResourceAdminService/AliasResourcePermission"
)

// ResourceAdminServiceClient is a client for the blocky.authz.admin.v1alpha.ResourceAdminService
// service.
type ResourceAdminServiceClient interface {
	// Creates a new resource manager within given project.
	CreateResourceManager(context.Context, *connect_go.Request[v1alpha.CreateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Gets a resource manager.
	GetResourceManager(context.Context, *connect_go.Request[v1alpha.GetResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Gets a list of resource managers.
	ListResourceManagers(context.Context, *connect_go.Request[v1alpha.ListResourceManagersRequest]) (*connect_go.Response[v1alpha.ListResourceManagersResponse], error)
	// Updates an existing resource manager with new information.
	UpdateResourceManager(context.Context, *connect_go.Request[v1alpha.UpdateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Deletes a resource manager along with all its dependent permissions.
	DeleteResourceManager(context.Context, *connect_go.Request[v1alpha.DeleteResourceRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Creates an alias for a resource manager.
	// If the alias already exists, the former aliased resource manager
	// will have no alias.
	AliasResourceManager(context.Context, *connect_go.Request[v1alpha.AliasResourceRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Creates a new authorization resource permission.
	CreateResourcePermission(context.Context, *connect_go.Request[v1alpha.CreateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
	// Lists authorization resource permissions that are registered with the service.
	ListResourcePermission(context.Context, *connect_go.Request[v1alpha.ListResourcePermissionRequest]) (*connect_go.Response[v1alpha.ListResourcePermissionResponse], error)
	// Gets an existing resource permission.
	GetResourcePermission(context.Context, *connect_go.Request[v1alpha.GetResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
	// Updates an existing authorization resource permission with new information.
	UpdateResourcePermission(context.Context, *connect_go.Request[v1alpha.UpdateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
	// Deletes an authorization resource permission.
	DeleteResourcePermission(context.Context, *connect_go.Request[v1alpha.DeleteResourcePermissionRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Creates an alias for an authorization resource permission.
	// If the alias already exists, the former aliased resource permission will have
	// no alias.
	AliasResourcePermission(context.Context, *connect_go.Request[v1alpha.AliasResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
}

// NewResourceAdminServiceClient constructs a client for the
// blocky.authz.admin.v1alpha.ResourceAdminService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourceAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ResourceAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourceAdminServiceClient{
		createResourceManager: connect_go.NewClient[v1alpha.CreateResourceManagerRequest, v1alpha.ResourceManager](
			httpClient,
			baseURL+ResourceAdminServiceCreateResourceManagerProcedure,
			opts...,
		),
		getResourceManager: connect_go.NewClient[v1alpha.GetResourceManagerRequest, v1alpha.ResourceManager](
			httpClient,
			baseURL+ResourceAdminServiceGetResourceManagerProcedure,
			opts...,
		),
		listResourceManagers: connect_go.NewClient[v1alpha.ListResourceManagersRequest, v1alpha.ListResourceManagersResponse](
			httpClient,
			baseURL+ResourceAdminServiceListResourceManagersProcedure,
			opts...,
		),
		updateResourceManager: connect_go.NewClient[v1alpha.UpdateResourceManagerRequest, v1alpha.ResourceManager](
			httpClient,
			baseURL+ResourceAdminServiceUpdateResourceManagerProcedure,
			opts...,
		),
		deleteResourceManager: connect_go.NewClient[v1alpha.DeleteResourceRequest, emptypb.Empty](
			httpClient,
			baseURL+ResourceAdminServiceDeleteResourceManagerProcedure,
			opts...,
		),
		aliasResourceManager: connect_go.NewClient[v1alpha.AliasResourceRequest, v1alpha.ResourceManager](
			httpClient,
			baseURL+ResourceAdminServiceAliasResourceManagerProcedure,
			opts...,
		),
		createResourcePermission: connect_go.NewClient[v1alpha.CreateResourcePermissionRequest, v1alpha.ResourcePermission](
			httpClient,
			baseURL+ResourceAdminServiceCreateResourcePermissionProcedure,
			opts...,
		),
		listResourcePermission: connect_go.NewClient[v1alpha.ListResourcePermissionRequest, v1alpha.ListResourcePermissionResponse](
			httpClient,
			baseURL+ResourceAdminServiceListResourcePermissionProcedure,
			opts...,
		),
		getResourcePermission: connect_go.NewClient[v1alpha.GetResourcePermissionRequest, v1alpha.ResourcePermission](
			httpClient,
			baseURL+ResourceAdminServiceGetResourcePermissionProcedure,
			opts...,
		),
		updateResourcePermission: connect_go.NewClient[v1alpha.UpdateResourcePermissionRequest, v1alpha.ResourcePermission](
			httpClient,
			baseURL+ResourceAdminServiceUpdateResourcePermissionProcedure,
			opts...,
		),
		deleteResourcePermission: connect_go.NewClient[v1alpha.DeleteResourcePermissionRequest, emptypb.Empty](
			httpClient,
			baseURL+ResourceAdminServiceDeleteResourcePermissionProcedure,
			opts...,
		),
		aliasResourcePermission: connect_go.NewClient[v1alpha.AliasResourcePermissionRequest, v1alpha.ResourcePermission](
			httpClient,
			baseURL+ResourceAdminServiceAliasResourcePermissionProcedure,
			opts...,
		),
	}
}

// resourceAdminServiceClient implements ResourceAdminServiceClient.
type resourceAdminServiceClient struct {
	createResourceManager    *connect_go.Client[v1alpha.CreateResourceManagerRequest, v1alpha.ResourceManager]
	getResourceManager       *connect_go.Client[v1alpha.GetResourceManagerRequest, v1alpha.ResourceManager]
	listResourceManagers     *connect_go.Client[v1alpha.ListResourceManagersRequest, v1alpha.ListResourceManagersResponse]
	updateResourceManager    *connect_go.Client[v1alpha.UpdateResourceManagerRequest, v1alpha.ResourceManager]
	deleteResourceManager    *connect_go.Client[v1alpha.DeleteResourceRequest, emptypb.Empty]
	aliasResourceManager     *connect_go.Client[v1alpha.AliasResourceRequest, v1alpha.ResourceManager]
	createResourcePermission *connect_go.Client[v1alpha.CreateResourcePermissionRequest, v1alpha.ResourcePermission]
	listResourcePermission   *connect_go.Client[v1alpha.ListResourcePermissionRequest, v1alpha.ListResourcePermissionResponse]
	getResourcePermission    *connect_go.Client[v1alpha.GetResourcePermissionRequest, v1alpha.ResourcePermission]
	updateResourcePermission *connect_go.Client[v1alpha.UpdateResourcePermissionRequest, v1alpha.ResourcePermission]
	deleteResourcePermission *connect_go.Client[v1alpha.DeleteResourcePermissionRequest, emptypb.Empty]
	aliasResourcePermission  *connect_go.Client[v1alpha.AliasResourcePermissionRequest, v1alpha.ResourcePermission]
}

// CreateResourceManager calls
// blocky.authz.admin.v1alpha.ResourceAdminService.CreateResourceManager.
func (c *resourceAdminServiceClient) CreateResourceManager(ctx context.Context, req *connect_go.Request[v1alpha.CreateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return c.createResourceManager.CallUnary(ctx, req)
}

// GetResourceManager calls blocky.authz.admin.v1alpha.ResourceAdminService.GetResourceManager.
func (c *resourceAdminServiceClient) GetResourceManager(ctx context.Context, req *connect_go.Request[v1alpha.GetResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return c.getResourceManager.CallUnary(ctx, req)
}

// ListResourceManagers calls blocky.authz.admin.v1alpha.ResourceAdminService.ListResourceManagers.
func (c *resourceAdminServiceClient) ListResourceManagers(ctx context.Context, req *connect_go.Request[v1alpha.ListResourceManagersRequest]) (*connect_go.Response[v1alpha.ListResourceManagersResponse], error) {
	return c.listResourceManagers.CallUnary(ctx, req)
}

// UpdateResourceManager calls
// blocky.authz.admin.v1alpha.ResourceAdminService.UpdateResourceManager.
func (c *resourceAdminServiceClient) UpdateResourceManager(ctx context.Context, req *connect_go.Request[v1alpha.UpdateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return c.updateResourceManager.CallUnary(ctx, req)
}

// DeleteResourceManager calls
// blocky.authz.admin.v1alpha.ResourceAdminService.DeleteResourceManager.
func (c *resourceAdminServiceClient) DeleteResourceManager(ctx context.Context, req *connect_go.Request[v1alpha.DeleteResourceRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteResourceManager.CallUnary(ctx, req)
}

// AliasResourceManager calls blocky.authz.admin.v1alpha.ResourceAdminService.AliasResourceManager.
func (c *resourceAdminServiceClient) AliasResourceManager(ctx context.Context, req *connect_go.Request[v1alpha.AliasResourceRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return c.aliasResourceManager.CallUnary(ctx, req)
}

// CreateResourcePermission calls
// blocky.authz.admin.v1alpha.ResourceAdminService.CreateResourcePermission.
func (c *resourceAdminServiceClient) CreateResourcePermission(ctx context.Context, req *connect_go.Request[v1alpha.CreateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return c.createResourcePermission.CallUnary(ctx, req)
}

// ListResourcePermission calls
// blocky.authz.admin.v1alpha.ResourceAdminService.ListResourcePermission.
func (c *resourceAdminServiceClient) ListResourcePermission(ctx context.Context, req *connect_go.Request[v1alpha.ListResourcePermissionRequest]) (*connect_go.Response[v1alpha.ListResourcePermissionResponse], error) {
	return c.listResourcePermission.CallUnary(ctx, req)
}

// GetResourcePermission calls
// blocky.authz.admin.v1alpha.ResourceAdminService.GetResourcePermission.
func (c *resourceAdminServiceClient) GetResourcePermission(ctx context.Context, req *connect_go.Request[v1alpha.GetResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return c.getResourcePermission.CallUnary(ctx, req)
}

// UpdateResourcePermission calls
// blocky.authz.admin.v1alpha.ResourceAdminService.UpdateResourcePermission.
func (c *resourceAdminServiceClient) UpdateResourcePermission(ctx context.Context, req *connect_go.Request[v1alpha.UpdateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return c.updateResourcePermission.CallUnary(ctx, req)
}

// DeleteResourcePermission calls
// blocky.authz.admin.v1alpha.ResourceAdminService.DeleteResourcePermission.
func (c *resourceAdminServiceClient) DeleteResourcePermission(ctx context.Context, req *connect_go.Request[v1alpha.DeleteResourcePermissionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteResourcePermission.CallUnary(ctx, req)
}

// AliasResourcePermission calls
// blocky.authz.admin.v1alpha.ResourceAdminService.AliasResourcePermission.
func (c *resourceAdminServiceClient) AliasResourcePermission(ctx context.Context, req *connect_go.Request[v1alpha.AliasResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return c.aliasResourcePermission.CallUnary(ctx, req)
}

// ResourceAdminServiceHandler is an implementation of the
// blocky.authz.admin.v1alpha.ResourceAdminService service.
type ResourceAdminServiceHandler interface {
	// Creates a new resource manager within given project.
	CreateResourceManager(context.Context, *connect_go.Request[v1alpha.CreateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Gets a resource manager.
	GetResourceManager(context.Context, *connect_go.Request[v1alpha.GetResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Gets a list of resource managers.
	ListResourceManagers(context.Context, *connect_go.Request[v1alpha.ListResourceManagersRequest]) (*connect_go.Response[v1alpha.ListResourceManagersResponse], error)
	// Updates an existing resource manager with new information.
	UpdateResourceManager(context.Context, *connect_go.Request[v1alpha.UpdateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Deletes a resource manager along with all its dependent permissions.
	DeleteResourceManager(context.Context, *connect_go.Request[v1alpha.DeleteResourceRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Creates an alias for a resource manager.
	// If the alias already exists, the former aliased resource manager
	// will have no alias.
	AliasResourceManager(context.Context, *connect_go.Request[v1alpha.AliasResourceRequest]) (*connect_go.Response[v1alpha.ResourceManager], error)
	// Creates a new authorization resource permission.
	CreateResourcePermission(context.Context, *connect_go.Request[v1alpha.CreateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
	// Lists authorization resource permissions that are registered with the service.
	ListResourcePermission(context.Context, *connect_go.Request[v1alpha.ListResourcePermissionRequest]) (*connect_go.Response[v1alpha.ListResourcePermissionResponse], error)
	// Gets an existing resource permission.
	GetResourcePermission(context.Context, *connect_go.Request[v1alpha.GetResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
	// Updates an existing authorization resource permission with new information.
	UpdateResourcePermission(context.Context, *connect_go.Request[v1alpha.UpdateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
	// Deletes an authorization resource permission.
	DeleteResourcePermission(context.Context, *connect_go.Request[v1alpha.DeleteResourcePermissionRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Creates an alias for an authorization resource permission.
	// If the alias already exists, the former aliased resource permission will have
	// no alias.
	AliasResourcePermission(context.Context, *connect_go.Request[v1alpha.AliasResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error)
}

// NewResourceAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourceAdminServiceHandler(svc ResourceAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	resourceAdminServiceCreateResourceManagerHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceCreateResourceManagerProcedure,
		svc.CreateResourceManager,
		opts...,
	)
	resourceAdminServiceGetResourceManagerHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceGetResourceManagerProcedure,
		svc.GetResourceManager,
		opts...,
	)
	resourceAdminServiceListResourceManagersHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceListResourceManagersProcedure,
		svc.ListResourceManagers,
		opts...,
	)
	resourceAdminServiceUpdateResourceManagerHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceUpdateResourceManagerProcedure,
		svc.UpdateResourceManager,
		opts...,
	)
	resourceAdminServiceDeleteResourceManagerHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceDeleteResourceManagerProcedure,
		svc.DeleteResourceManager,
		opts...,
	)
	resourceAdminServiceAliasResourceManagerHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceAliasResourceManagerProcedure,
		svc.AliasResourceManager,
		opts...,
	)
	resourceAdminServiceCreateResourcePermissionHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceCreateResourcePermissionProcedure,
		svc.CreateResourcePermission,
		opts...,
	)
	resourceAdminServiceListResourcePermissionHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceListResourcePermissionProcedure,
		svc.ListResourcePermission,
		opts...,
	)
	resourceAdminServiceGetResourcePermissionHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceGetResourcePermissionProcedure,
		svc.GetResourcePermission,
		opts...,
	)
	resourceAdminServiceUpdateResourcePermissionHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceUpdateResourcePermissionProcedure,
		svc.UpdateResourcePermission,
		opts...,
	)
	resourceAdminServiceDeleteResourcePermissionHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceDeleteResourcePermissionProcedure,
		svc.DeleteResourcePermission,
		opts...,
	)
	resourceAdminServiceAliasResourcePermissionHandler := connect_go.NewUnaryHandler(
		ResourceAdminServiceAliasResourcePermissionProcedure,
		svc.AliasResourcePermission,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.ResourceAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourceAdminServiceCreateResourceManagerProcedure:
			resourceAdminServiceCreateResourceManagerHandler.ServeHTTP(w, r)
		case ResourceAdminServiceGetResourceManagerProcedure:
			resourceAdminServiceGetResourceManagerHandler.ServeHTTP(w, r)
		case ResourceAdminServiceListResourceManagersProcedure:
			resourceAdminServiceListResourceManagersHandler.ServeHTTP(w, r)
		case ResourceAdminServiceUpdateResourceManagerProcedure:
			resourceAdminServiceUpdateResourceManagerHandler.ServeHTTP(w, r)
		case ResourceAdminServiceDeleteResourceManagerProcedure:
			resourceAdminServiceDeleteResourceManagerHandler.ServeHTTP(w, r)
		case ResourceAdminServiceAliasResourceManagerProcedure:
			resourceAdminServiceAliasResourceManagerHandler.ServeHTTP(w, r)
		case ResourceAdminServiceCreateResourcePermissionProcedure:
			resourceAdminServiceCreateResourcePermissionHandler.ServeHTTP(w, r)
		case ResourceAdminServiceListResourcePermissionProcedure:
			resourceAdminServiceListResourcePermissionHandler.ServeHTTP(w, r)
		case ResourceAdminServiceGetResourcePermissionProcedure:
			resourceAdminServiceGetResourcePermissionHandler.ServeHTTP(w, r)
		case ResourceAdminServiceUpdateResourcePermissionProcedure:
			resourceAdminServiceUpdateResourcePermissionHandler.ServeHTTP(w, r)
		case ResourceAdminServiceDeleteResourcePermissionProcedure:
			resourceAdminServiceDeleteResourcePermissionHandler.ServeHTTP(w, r)
		case ResourceAdminServiceAliasResourcePermissionProcedure:
			resourceAdminServiceAliasResourcePermissionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourceAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourceAdminServiceHandler struct{}

func (UnimplementedResourceAdminServiceHandler) CreateResourceManager(context.Context, *connect_go.Request[v1alpha.CreateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.CreateResourceManager is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) GetResourceManager(context.Context, *connect_go.Request[v1alpha.GetResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.GetResourceManager is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) ListResourceManagers(context.Context, *connect_go.Request[v1alpha.ListResourceManagersRequest]) (*connect_go.Response[v1alpha.ListResourceManagersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.ListResourceManagers is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) UpdateResourceManager(context.Context, *connect_go.Request[v1alpha.UpdateResourceManagerRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.UpdateResourceManager is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) DeleteResourceManager(context.Context, *connect_go.Request[v1alpha.DeleteResourceRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.DeleteResourceManager is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) AliasResourceManager(context.Context, *connect_go.Request[v1alpha.AliasResourceRequest]) (*connect_go.Response[v1alpha.ResourceManager], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.AliasResourceManager is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) CreateResourcePermission(context.Context, *connect_go.Request[v1alpha.CreateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.CreateResourcePermission is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) ListResourcePermission(context.Context, *connect_go.Request[v1alpha.ListResourcePermissionRequest]) (*connect_go.Response[v1alpha.ListResourcePermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.ListResourcePermission is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) GetResourcePermission(context.Context, *connect_go.Request[v1alpha.GetResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.GetResourcePermission is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) UpdateResourcePermission(context.Context, *connect_go.Request[v1alpha.UpdateResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.UpdateResourcePermission is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) DeleteResourcePermission(context.Context, *connect_go.Request[v1alpha.DeleteResourcePermissionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.DeleteResourcePermission is not implemented"))
}

func (UnimplementedResourceAdminServiceHandler) AliasResourcePermission(context.Context, *connect_go.Request[v1alpha.AliasResourcePermissionRequest]) (*connect_go.Response[v1alpha.ResourcePermission], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ResourceAdminService.AliasResourcePermission is not implemented"))
}
