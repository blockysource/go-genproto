// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/key_admin.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KeyAdminServiceName is the fully-qualified name of the KeyAdminService service.
	KeyAdminServiceName = "blocky.authz.admin.v1alpha.KeyAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeyAdminServiceCreateKeyCoreProcedure is the fully-qualified name of the KeyAdminService's
	// CreateKeyCore RPC.
	KeyAdminServiceCreateKeyCoreProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/CreateKeyCore"
	// KeyAdminServiceGetKeyCoreProcedure is the fully-qualified name of the KeyAdminService's
	// GetKeyCore RPC.
	KeyAdminServiceGetKeyCoreProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKeyCore"
	// KeyAdminServiceListKeyCoresProcedure is the fully-qualified name of the KeyAdminService's
	// ListKeyCores RPC.
	KeyAdminServiceListKeyCoresProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeyCores"
	// KeyAdminServiceListKeyCoreKeysProcedure is the fully-qualified name of the KeyAdminService's
	// ListKeyCoreKeys RPC.
	KeyAdminServiceListKeyCoreKeysProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeyCoreKeys"
	// KeyAdminServiceUpdateKeyCoreProcedure is the fully-qualified name of the KeyAdminService's
	// UpdateKeyCore RPC.
	KeyAdminServiceUpdateKeyCoreProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/UpdateKeyCore"
	// KeyAdminServiceRotateKeyProcedure is the fully-qualified name of the KeyAdminService's RotateKey
	// RPC.
	KeyAdminServiceRotateKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/RotateKey"
	// KeyAdminServiceGetKeyProcedure is the fully-qualified name of the KeyAdminService's GetKey RPC.
	KeyAdminServiceGetKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKey"
	// KeyAdminServiceListKeysProcedure is the fully-qualified name of the KeyAdminService's ListKeys
	// RPC.
	KeyAdminServiceListKeysProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeys"
	// KeyAdminServiceRevokeKeyProcedure is the fully-qualified name of the KeyAdminService's RevokeKey
	// RPC.
	KeyAdminServiceRevokeKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/RevokeKey"
)

// KeyAdminServiceClient is a client for the blocky.authz.admin.v1alpha.KeyAdminService service.
type KeyAdminServiceClient interface {
	// CreateKeyCore creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKeyCore(context.Context, *connect_go.Request[v1alpha.CreateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error)
	// GetKeyCore returns the specified authorization key.
	GetKeyCore(context.Context, *connect_go.Request[v1alpha.GetKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error)
	// ListKeyCores lists authorization keys that matches given request.
	ListKeyCores(context.Context, *connect_go.Request[v1alpha.ListKeyCoresRequest]) (*connect_go.Response[v1alpha.ListKeyCoresResponse], error)
	// ListKeyCoreKeys lists authorization keys that matches given request.
	ListKeyCoreKeys(context.Context, *connect_go.Request[v1alpha.ListKeyCoreKeysRequest]) (*connect_go.Response[v1alpha.ListKeyCoreKeysResponse], error)
	// UpdateKeyCore updates the specified authorization key.
	UpdateKeyCore(context.Context, *connect_go.Request[v1alpha.UpdateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error)
	// Creates a new key revision and rotates the key.
	RotateKey(context.Context, *connect_go.Request[v1alpha.RotateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// GetKey returns the specified key revision.
	GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// RevokeKey revokes an authorization key revision.
	// Once revoked the key revision is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKey(context.Context, *connect_go.Request[v1alpha.RevokeKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
}

// NewKeyAdminServiceClient constructs a client for the blocky.authz.admin.v1alpha.KeyAdminService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeyAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KeyAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keyAdminServiceClient{
		createKeyCore: connect_go.NewClient[v1alpha.CreateKeyCoreRequest, v1alpha.KeyCore](
			httpClient,
			baseURL+KeyAdminServiceCreateKeyCoreProcedure,
			opts...,
		),
		getKeyCore: connect_go.NewClient[v1alpha.GetKeyCoreRequest, v1alpha.KeyCore](
			httpClient,
			baseURL+KeyAdminServiceGetKeyCoreProcedure,
			opts...,
		),
		listKeyCores: connect_go.NewClient[v1alpha.ListKeyCoresRequest, v1alpha.ListKeyCoresResponse](
			httpClient,
			baseURL+KeyAdminServiceListKeyCoresProcedure,
			opts...,
		),
		listKeyCoreKeys: connect_go.NewClient[v1alpha.ListKeyCoreKeysRequest, v1alpha.ListKeyCoreKeysResponse](
			httpClient,
			baseURL+KeyAdminServiceListKeyCoreKeysProcedure,
			opts...,
		),
		updateKeyCore: connect_go.NewClient[v1alpha.UpdateKeyCoreRequest, v1alpha.KeyCore](
			httpClient,
			baseURL+KeyAdminServiceUpdateKeyCoreProcedure,
			opts...,
		),
		rotateKey: connect_go.NewClient[v1alpha.RotateKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceRotateKeyProcedure,
			opts...,
		),
		getKey: connect_go.NewClient[v1alpha.GetKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceGetKeyProcedure,
			opts...,
		),
		listKeys: connect_go.NewClient[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse](
			httpClient,
			baseURL+KeyAdminServiceListKeysProcedure,
			opts...,
		),
		revokeKey: connect_go.NewClient[v1alpha.RevokeKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceRevokeKeyProcedure,
			opts...,
		),
	}
}

// keyAdminServiceClient implements KeyAdminServiceClient.
type keyAdminServiceClient struct {
	createKeyCore   *connect_go.Client[v1alpha.CreateKeyCoreRequest, v1alpha.KeyCore]
	getKeyCore      *connect_go.Client[v1alpha.GetKeyCoreRequest, v1alpha.KeyCore]
	listKeyCores    *connect_go.Client[v1alpha.ListKeyCoresRequest, v1alpha.ListKeyCoresResponse]
	listKeyCoreKeys *connect_go.Client[v1alpha.ListKeyCoreKeysRequest, v1alpha.ListKeyCoreKeysResponse]
	updateKeyCore   *connect_go.Client[v1alpha.UpdateKeyCoreRequest, v1alpha.KeyCore]
	rotateKey       *connect_go.Client[v1alpha.RotateKeyRequest, v1alpha.Key]
	getKey          *connect_go.Client[v1alpha.GetKeyRequest, v1alpha.Key]
	listKeys        *connect_go.Client[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse]
	revokeKey       *connect_go.Client[v1alpha.RevokeKeyRequest, v1alpha.Key]
}

// CreateKeyCore calls blocky.authz.admin.v1alpha.KeyAdminService.CreateKeyCore.
func (c *keyAdminServiceClient) CreateKeyCore(ctx context.Context, req *connect_go.Request[v1alpha.CreateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error) {
	return c.createKeyCore.CallUnary(ctx, req)
}

// GetKeyCore calls blocky.authz.admin.v1alpha.KeyAdminService.GetKeyCore.
func (c *keyAdminServiceClient) GetKeyCore(ctx context.Context, req *connect_go.Request[v1alpha.GetKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error) {
	return c.getKeyCore.CallUnary(ctx, req)
}

// ListKeyCores calls blocky.authz.admin.v1alpha.KeyAdminService.ListKeyCores.
func (c *keyAdminServiceClient) ListKeyCores(ctx context.Context, req *connect_go.Request[v1alpha.ListKeyCoresRequest]) (*connect_go.Response[v1alpha.ListKeyCoresResponse], error) {
	return c.listKeyCores.CallUnary(ctx, req)
}

// ListKeyCoreKeys calls blocky.authz.admin.v1alpha.KeyAdminService.ListKeyCoreKeys.
func (c *keyAdminServiceClient) ListKeyCoreKeys(ctx context.Context, req *connect_go.Request[v1alpha.ListKeyCoreKeysRequest]) (*connect_go.Response[v1alpha.ListKeyCoreKeysResponse], error) {
	return c.listKeyCoreKeys.CallUnary(ctx, req)
}

// UpdateKeyCore calls blocky.authz.admin.v1alpha.KeyAdminService.UpdateKeyCore.
func (c *keyAdminServiceClient) UpdateKeyCore(ctx context.Context, req *connect_go.Request[v1alpha.UpdateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error) {
	return c.updateKeyCore.CallUnary(ctx, req)
}

// RotateKey calls blocky.authz.admin.v1alpha.KeyAdminService.RotateKey.
func (c *keyAdminServiceClient) RotateKey(ctx context.Context, req *connect_go.Request[v1alpha.RotateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.rotateKey.CallUnary(ctx, req)
}

// GetKey calls blocky.authz.admin.v1alpha.KeyAdminService.GetKey.
func (c *keyAdminServiceClient) GetKey(ctx context.Context, req *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.getKey.CallUnary(ctx, req)
}

// ListKeys calls blocky.authz.admin.v1alpha.KeyAdminService.ListKeys.
func (c *keyAdminServiceClient) ListKeys(ctx context.Context, req *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return c.listKeys.CallUnary(ctx, req)
}

// RevokeKey calls blocky.authz.admin.v1alpha.KeyAdminService.RevokeKey.
func (c *keyAdminServiceClient) RevokeKey(ctx context.Context, req *connect_go.Request[v1alpha.RevokeKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.revokeKey.CallUnary(ctx, req)
}

// KeyAdminServiceHandler is an implementation of the blocky.authz.admin.v1alpha.KeyAdminService
// service.
type KeyAdminServiceHandler interface {
	// CreateKeyCore creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKeyCore(context.Context, *connect_go.Request[v1alpha.CreateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error)
	// GetKeyCore returns the specified authorization key.
	GetKeyCore(context.Context, *connect_go.Request[v1alpha.GetKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error)
	// ListKeyCores lists authorization keys that matches given request.
	ListKeyCores(context.Context, *connect_go.Request[v1alpha.ListKeyCoresRequest]) (*connect_go.Response[v1alpha.ListKeyCoresResponse], error)
	// ListKeyCoreKeys lists authorization keys that matches given request.
	ListKeyCoreKeys(context.Context, *connect_go.Request[v1alpha.ListKeyCoreKeysRequest]) (*connect_go.Response[v1alpha.ListKeyCoreKeysResponse], error)
	// UpdateKeyCore updates the specified authorization key.
	UpdateKeyCore(context.Context, *connect_go.Request[v1alpha.UpdateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error)
	// Creates a new key revision and rotates the key.
	RotateKey(context.Context, *connect_go.Request[v1alpha.RotateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// GetKey returns the specified key revision.
	GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// RevokeKey revokes an authorization key revision.
	// Once revoked the key revision is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKey(context.Context, *connect_go.Request[v1alpha.RevokeKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
}

// NewKeyAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeyAdminServiceHandler(svc KeyAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	keyAdminServiceCreateKeyCoreHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceCreateKeyCoreProcedure,
		svc.CreateKeyCore,
		opts...,
	)
	keyAdminServiceGetKeyCoreHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceGetKeyCoreProcedure,
		svc.GetKeyCore,
		opts...,
	)
	keyAdminServiceListKeyCoresHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceListKeyCoresProcedure,
		svc.ListKeyCores,
		opts...,
	)
	keyAdminServiceListKeyCoreKeysHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceListKeyCoreKeysProcedure,
		svc.ListKeyCoreKeys,
		opts...,
	)
	keyAdminServiceUpdateKeyCoreHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceUpdateKeyCoreProcedure,
		svc.UpdateKeyCore,
		opts...,
	)
	keyAdminServiceRotateKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceRotateKeyProcedure,
		svc.RotateKey,
		opts...,
	)
	keyAdminServiceGetKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceGetKeyProcedure,
		svc.GetKey,
		opts...,
	)
	keyAdminServiceListKeysHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceListKeysProcedure,
		svc.ListKeys,
		opts...,
	)
	keyAdminServiceRevokeKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceRevokeKeyProcedure,
		svc.RevokeKey,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.KeyAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeyAdminServiceCreateKeyCoreProcedure:
			keyAdminServiceCreateKeyCoreHandler.ServeHTTP(w, r)
		case KeyAdminServiceGetKeyCoreProcedure:
			keyAdminServiceGetKeyCoreHandler.ServeHTTP(w, r)
		case KeyAdminServiceListKeyCoresProcedure:
			keyAdminServiceListKeyCoresHandler.ServeHTTP(w, r)
		case KeyAdminServiceListKeyCoreKeysProcedure:
			keyAdminServiceListKeyCoreKeysHandler.ServeHTTP(w, r)
		case KeyAdminServiceUpdateKeyCoreProcedure:
			keyAdminServiceUpdateKeyCoreHandler.ServeHTTP(w, r)
		case KeyAdminServiceRotateKeyProcedure:
			keyAdminServiceRotateKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceGetKeyProcedure:
			keyAdminServiceGetKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceListKeysProcedure:
			keyAdminServiceListKeysHandler.ServeHTTP(w, r)
		case KeyAdminServiceRevokeKeyProcedure:
			keyAdminServiceRevokeKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeyAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeyAdminServiceHandler struct{}

func (UnimplementedKeyAdminServiceHandler) CreateKeyCore(context.Context, *connect_go.Request[v1alpha.CreateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.CreateKeyCore is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) GetKeyCore(context.Context, *connect_go.Request[v1alpha.GetKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.GetKeyCore is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) ListKeyCores(context.Context, *connect_go.Request[v1alpha.ListKeyCoresRequest]) (*connect_go.Response[v1alpha.ListKeyCoresResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.ListKeyCores is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) ListKeyCoreKeys(context.Context, *connect_go.Request[v1alpha.ListKeyCoreKeysRequest]) (*connect_go.Response[v1alpha.ListKeyCoreKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.ListKeyCoreKeys is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) UpdateKeyCore(context.Context, *connect_go.Request[v1alpha.UpdateKeyCoreRequest]) (*connect_go.Response[v1alpha.KeyCore], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.UpdateKeyCore is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) RotateKey(context.Context, *connect_go.Request[v1alpha.RotateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.RotateKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.GetKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.ListKeys is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) RevokeKey(context.Context, *connect_go.Request[v1alpha.RevokeKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.RevokeKey is not implemented"))
}
