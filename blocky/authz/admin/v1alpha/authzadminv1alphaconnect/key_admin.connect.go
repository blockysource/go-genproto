// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/key_admin.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KeyAdminServiceName is the fully-qualified name of the KeyAdminService service.
	KeyAdminServiceName = "blocky.authz.admin.v1alpha.KeyAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeyAdminServiceCreateKeyProcedure is the fully-qualified name of the KeyAdminService's CreateKey
	// RPC.
	KeyAdminServiceCreateKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/CreateKey"
	// KeyAdminServiceGetKeyProcedure is the fully-qualified name of the KeyAdminService's GetKey RPC.
	KeyAdminServiceGetKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKey"
	// KeyAdminServiceListKeysProcedure is the fully-qualified name of the KeyAdminService's ListKeys
	// RPC.
	KeyAdminServiceListKeysProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeys"
	// KeyAdminServiceUpdateKeyProcedure is the fully-qualified name of the KeyAdminService's UpdateKey
	// RPC.
	KeyAdminServiceUpdateKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/UpdateKey"
	// KeyAdminServiceCreateKeyRevisionProcedure is the fully-qualified name of the KeyAdminService's
	// CreateKeyRevision RPC.
	KeyAdminServiceCreateKeyRevisionProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/CreateKeyRevision"
	// KeyAdminServiceGetKeyRevisionProcedure is the fully-qualified name of the KeyAdminService's
	// GetKeyRevision RPC.
	KeyAdminServiceGetKeyRevisionProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKeyRevision"
	// KeyAdminServiceListKeyRevisionsProcedure is the fully-qualified name of the KeyAdminService's
	// ListKeyRevisions RPC.
	KeyAdminServiceListKeyRevisionsProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeyRevisions"
	// KeyAdminServiceRevokeKeyRevisionProcedure is the fully-qualified name of the KeyAdminService's
	// RevokeKeyRevision RPC.
	KeyAdminServiceRevokeKeyRevisionProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/RevokeKeyRevision"
)

// KeyAdminServiceClient is a client for the blocky.authz.admin.v1alpha.KeyAdminService service.
type KeyAdminServiceClient interface {
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// GetKey returns the specified authorization key.
	// The name of the key may be used as:
	// 'projects/{project}/keys/default' to get the default key for the project.
	GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// UpdateKey updates the specified authorization key.
	UpdateKey(context.Context, *connect_go.Request[v1alpha.UpdateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// Creates a new key revision and rotates the key.
	CreateKeyRevision(context.Context, *connect_go.Request[v1alpha.CreateKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error)
	// GetKeyRevision returns the specified key revision.
	GetKeyRevision(context.Context, *connect_go.Request[v1alpha.GetKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error)
	// ListKeyRevisions lists authorization key revisions that matches given request.
	// The key revisions are derived from the parent key.
	ListKeyRevisions(context.Context, *connect_go.Request[v1alpha.ListKeyRevisionsRequest]) (*connect_go.Response[v1alpha.ListKeyRevisionsResponse], error)
	// RevokeKeyRevision revokes an authorization key revision.
	// Once revoked the key revision is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyRevision(context.Context, *connect_go.Request[v1alpha.RevokeKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error)
}

// NewKeyAdminServiceClient constructs a client for the blocky.authz.admin.v1alpha.KeyAdminService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeyAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KeyAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keyAdminServiceClient{
		createKey: connect_go.NewClient[v1alpha.CreateKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceCreateKeyProcedure,
			opts...,
		),
		getKey: connect_go.NewClient[v1alpha.GetKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceGetKeyProcedure,
			opts...,
		),
		listKeys: connect_go.NewClient[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse](
			httpClient,
			baseURL+KeyAdminServiceListKeysProcedure,
			opts...,
		),
		updateKey: connect_go.NewClient[v1alpha.UpdateKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceUpdateKeyProcedure,
			opts...,
		),
		createKeyRevision: connect_go.NewClient[v1alpha.CreateKeyRevisionRequest, v1alpha.KeyRevision](
			httpClient,
			baseURL+KeyAdminServiceCreateKeyRevisionProcedure,
			opts...,
		),
		getKeyRevision: connect_go.NewClient[v1alpha.GetKeyRevisionRequest, v1alpha.KeyRevision](
			httpClient,
			baseURL+KeyAdminServiceGetKeyRevisionProcedure,
			opts...,
		),
		listKeyRevisions: connect_go.NewClient[v1alpha.ListKeyRevisionsRequest, v1alpha.ListKeyRevisionsResponse](
			httpClient,
			baseURL+KeyAdminServiceListKeyRevisionsProcedure,
			opts...,
		),
		revokeKeyRevision: connect_go.NewClient[v1alpha.RevokeKeyRevisionRequest, v1alpha.KeyRevision](
			httpClient,
			baseURL+KeyAdminServiceRevokeKeyRevisionProcedure,
			opts...,
		),
	}
}

// keyAdminServiceClient implements KeyAdminServiceClient.
type keyAdminServiceClient struct {
	createKey         *connect_go.Client[v1alpha.CreateKeyRequest, v1alpha.Key]
	getKey            *connect_go.Client[v1alpha.GetKeyRequest, v1alpha.Key]
	listKeys          *connect_go.Client[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse]
	updateKey         *connect_go.Client[v1alpha.UpdateKeyRequest, v1alpha.Key]
	createKeyRevision *connect_go.Client[v1alpha.CreateKeyRevisionRequest, v1alpha.KeyRevision]
	getKeyRevision    *connect_go.Client[v1alpha.GetKeyRevisionRequest, v1alpha.KeyRevision]
	listKeyRevisions  *connect_go.Client[v1alpha.ListKeyRevisionsRequest, v1alpha.ListKeyRevisionsResponse]
	revokeKeyRevision *connect_go.Client[v1alpha.RevokeKeyRevisionRequest, v1alpha.KeyRevision]
}

// CreateKey calls blocky.authz.admin.v1alpha.KeyAdminService.CreateKey.
func (c *keyAdminServiceClient) CreateKey(ctx context.Context, req *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.createKey.CallUnary(ctx, req)
}

// GetKey calls blocky.authz.admin.v1alpha.KeyAdminService.GetKey.
func (c *keyAdminServiceClient) GetKey(ctx context.Context, req *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.getKey.CallUnary(ctx, req)
}

// ListKeys calls blocky.authz.admin.v1alpha.KeyAdminService.ListKeys.
func (c *keyAdminServiceClient) ListKeys(ctx context.Context, req *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return c.listKeys.CallUnary(ctx, req)
}

// UpdateKey calls blocky.authz.admin.v1alpha.KeyAdminService.UpdateKey.
func (c *keyAdminServiceClient) UpdateKey(ctx context.Context, req *connect_go.Request[v1alpha.UpdateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.updateKey.CallUnary(ctx, req)
}

// CreateKeyRevision calls blocky.authz.admin.v1alpha.KeyAdminService.CreateKeyRevision.
func (c *keyAdminServiceClient) CreateKeyRevision(ctx context.Context, req *connect_go.Request[v1alpha.CreateKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error) {
	return c.createKeyRevision.CallUnary(ctx, req)
}

// GetKeyRevision calls blocky.authz.admin.v1alpha.KeyAdminService.GetKeyRevision.
func (c *keyAdminServiceClient) GetKeyRevision(ctx context.Context, req *connect_go.Request[v1alpha.GetKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error) {
	return c.getKeyRevision.CallUnary(ctx, req)
}

// ListKeyRevisions calls blocky.authz.admin.v1alpha.KeyAdminService.ListKeyRevisions.
func (c *keyAdminServiceClient) ListKeyRevisions(ctx context.Context, req *connect_go.Request[v1alpha.ListKeyRevisionsRequest]) (*connect_go.Response[v1alpha.ListKeyRevisionsResponse], error) {
	return c.listKeyRevisions.CallUnary(ctx, req)
}

// RevokeKeyRevision calls blocky.authz.admin.v1alpha.KeyAdminService.RevokeKeyRevision.
func (c *keyAdminServiceClient) RevokeKeyRevision(ctx context.Context, req *connect_go.Request[v1alpha.RevokeKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error) {
	return c.revokeKeyRevision.CallUnary(ctx, req)
}

// KeyAdminServiceHandler is an implementation of the blocky.authz.admin.v1alpha.KeyAdminService
// service.
type KeyAdminServiceHandler interface {
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// GetKey returns the specified authorization key.
	// The name of the key may be used as:
	// 'projects/{project}/keys/default' to get the default key for the project.
	GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// UpdateKey updates the specified authorization key.
	UpdateKey(context.Context, *connect_go.Request[v1alpha.UpdateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// Creates a new key revision and rotates the key.
	CreateKeyRevision(context.Context, *connect_go.Request[v1alpha.CreateKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error)
	// GetKeyRevision returns the specified key revision.
	GetKeyRevision(context.Context, *connect_go.Request[v1alpha.GetKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error)
	// ListKeyRevisions lists authorization key revisions that matches given request.
	// The key revisions are derived from the parent key.
	ListKeyRevisions(context.Context, *connect_go.Request[v1alpha.ListKeyRevisionsRequest]) (*connect_go.Response[v1alpha.ListKeyRevisionsResponse], error)
	// RevokeKeyRevision revokes an authorization key revision.
	// Once revoked the key revision is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyRevision(context.Context, *connect_go.Request[v1alpha.RevokeKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error)
}

// NewKeyAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeyAdminServiceHandler(svc KeyAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	keyAdminServiceCreateKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceCreateKeyProcedure,
		svc.CreateKey,
		opts...,
	)
	keyAdminServiceGetKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceGetKeyProcedure,
		svc.GetKey,
		opts...,
	)
	keyAdminServiceListKeysHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceListKeysProcedure,
		svc.ListKeys,
		opts...,
	)
	keyAdminServiceUpdateKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceUpdateKeyProcedure,
		svc.UpdateKey,
		opts...,
	)
	keyAdminServiceCreateKeyRevisionHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceCreateKeyRevisionProcedure,
		svc.CreateKeyRevision,
		opts...,
	)
	keyAdminServiceGetKeyRevisionHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceGetKeyRevisionProcedure,
		svc.GetKeyRevision,
		opts...,
	)
	keyAdminServiceListKeyRevisionsHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceListKeyRevisionsProcedure,
		svc.ListKeyRevisions,
		opts...,
	)
	keyAdminServiceRevokeKeyRevisionHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceRevokeKeyRevisionProcedure,
		svc.RevokeKeyRevision,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.KeyAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeyAdminServiceCreateKeyProcedure:
			keyAdminServiceCreateKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceGetKeyProcedure:
			keyAdminServiceGetKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceListKeysProcedure:
			keyAdminServiceListKeysHandler.ServeHTTP(w, r)
		case KeyAdminServiceUpdateKeyProcedure:
			keyAdminServiceUpdateKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceCreateKeyRevisionProcedure:
			keyAdminServiceCreateKeyRevisionHandler.ServeHTTP(w, r)
		case KeyAdminServiceGetKeyRevisionProcedure:
			keyAdminServiceGetKeyRevisionHandler.ServeHTTP(w, r)
		case KeyAdminServiceListKeyRevisionsProcedure:
			keyAdminServiceListKeyRevisionsHandler.ServeHTTP(w, r)
		case KeyAdminServiceRevokeKeyRevisionProcedure:
			keyAdminServiceRevokeKeyRevisionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeyAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeyAdminServiceHandler struct{}

func (UnimplementedKeyAdminServiceHandler) CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.CreateKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.GetKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.ListKeys is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) UpdateKey(context.Context, *connect_go.Request[v1alpha.UpdateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.UpdateKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) CreateKeyRevision(context.Context, *connect_go.Request[v1alpha.CreateKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.CreateKeyRevision is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) GetKeyRevision(context.Context, *connect_go.Request[v1alpha.GetKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.GetKeyRevision is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) ListKeyRevisions(context.Context, *connect_go.Request[v1alpha.ListKeyRevisionsRequest]) (*connect_go.Response[v1alpha.ListKeyRevisionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.ListKeyRevisions is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) RevokeKeyRevision(context.Context, *connect_go.Request[v1alpha.RevokeKeyRevisionRequest]) (*connect_go.Response[v1alpha.KeyRevision], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.RevokeKeyRevision is not implemented"))
}
