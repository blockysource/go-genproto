// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/key_admin.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KeyAdminServiceName is the fully-qualified name of the KeyAdminService service.
	KeyAdminServiceName = "blocky.authz.admin.v1alpha.KeyAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeyAdminServiceCreateKeyProcedure is the fully-qualified name of the KeyAdminService's CreateKey
	// RPC.
	KeyAdminServiceCreateKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/CreateKey"
	// KeyAdminServiceGetKeyProcedure is the fully-qualified name of the KeyAdminService's GetKey RPC.
	KeyAdminServiceGetKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKey"
	// KeyAdminServiceListKeysProcedure is the fully-qualified name of the KeyAdminService's ListKeys
	// RPC.
	KeyAdminServiceListKeysProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeys"
	// KeyAdminServiceSetDefaultKeyProcedure is the fully-qualified name of the KeyAdminService's
	// SetDefaultKey RPC.
	KeyAdminServiceSetDefaultKeyProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/SetDefaultKey"
	// KeyAdminServiceCreateKeyVersionProcedure is the fully-qualified name of the KeyAdminService's
	// CreateKeyVersion RPC.
	KeyAdminServiceCreateKeyVersionProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/CreateKeyVersion"
	// KeyAdminServiceGetKeyVersionProcedure is the fully-qualified name of the KeyAdminService's
	// GetKeyVersion RPC.
	KeyAdminServiceGetKeyVersionProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/GetKeyVersion"
	// KeyAdminServiceListKeyVersionsProcedure is the fully-qualified name of the KeyAdminService's
	// ListKeyVersions RPC.
	KeyAdminServiceListKeyVersionsProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/ListKeyVersions"
	// KeyAdminServiceRevokeKeyVersionProcedure is the fully-qualified name of the KeyAdminService's
	// RevokeKeyVersion RPC.
	KeyAdminServiceRevokeKeyVersionProcedure = "/blocky.authz.admin.v1alpha.KeyAdminService/RevokeKeyVersion"
)

// KeyAdminServiceClient is a client for the blocky.authz.admin.v1alpha.KeyAdminService service.
type KeyAdminServiceClient interface {
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// GetKey returns the specified authorization key.
	// The name of the key may be used as:
	// 'projects/{project}/keys/default' to get the default key for the project.
	GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// Changes the default key for the project.
	// The default key is used for signing and verification if no key is specified.
	SetDefaultKey(context.Context, *connect_go.Request[v1alpha.SetDefaultKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// Creates a new key version and rotates the key.
	CreateKeyVersion(context.Context, *connect_go.Request[v1alpha.CreateKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error)
	// GetKeyVersion returns the specified key version.
	GetKeyVersion(context.Context, *connect_go.Request[v1alpha.GetKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error)
	// ListKeyVersions lists authorization key versions that matches given request.
	// The key versions are derived from the parent key.
	ListKeyVersions(context.Context, *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error)
	// RevokeKeyVersion revokes an authorization key version.
	// Once revoked the key version is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyVersion(context.Context, *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error)
}

// NewKeyAdminServiceClient constructs a client for the blocky.authz.admin.v1alpha.KeyAdminService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeyAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KeyAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keyAdminServiceClient{
		createKey: connect_go.NewClient[v1alpha.CreateKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceCreateKeyProcedure,
			opts...,
		),
		getKey: connect_go.NewClient[v1alpha.GetKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceGetKeyProcedure,
			opts...,
		),
		listKeys: connect_go.NewClient[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse](
			httpClient,
			baseURL+KeyAdminServiceListKeysProcedure,
			opts...,
		),
		setDefaultKey: connect_go.NewClient[v1alpha.SetDefaultKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeyAdminServiceSetDefaultKeyProcedure,
			opts...,
		),
		createKeyVersion: connect_go.NewClient[v1alpha.CreateKeyVersionRequest, v1alpha.KeyVersion](
			httpClient,
			baseURL+KeyAdminServiceCreateKeyVersionProcedure,
			opts...,
		),
		getKeyVersion: connect_go.NewClient[v1alpha.GetKeyVersionRequest, v1alpha.KeyVersion](
			httpClient,
			baseURL+KeyAdminServiceGetKeyVersionProcedure,
			opts...,
		),
		listKeyVersions: connect_go.NewClient[v1alpha.ListKeyVersionsRequest, v1alpha.ListKeyVersionsResponse](
			httpClient,
			baseURL+KeyAdminServiceListKeyVersionsProcedure,
			opts...,
		),
		revokeKeyVersion: connect_go.NewClient[v1alpha.RevokeKeyVersionRequest, v1alpha.KeyVersion](
			httpClient,
			baseURL+KeyAdminServiceRevokeKeyVersionProcedure,
			opts...,
		),
	}
}

// keyAdminServiceClient implements KeyAdminServiceClient.
type keyAdminServiceClient struct {
	createKey        *connect_go.Client[v1alpha.CreateKeyRequest, v1alpha.Key]
	getKey           *connect_go.Client[v1alpha.GetKeyRequest, v1alpha.Key]
	listKeys         *connect_go.Client[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse]
	setDefaultKey    *connect_go.Client[v1alpha.SetDefaultKeyRequest, v1alpha.Key]
	createKeyVersion *connect_go.Client[v1alpha.CreateKeyVersionRequest, v1alpha.KeyVersion]
	getKeyVersion    *connect_go.Client[v1alpha.GetKeyVersionRequest, v1alpha.KeyVersion]
	listKeyVersions  *connect_go.Client[v1alpha.ListKeyVersionsRequest, v1alpha.ListKeyVersionsResponse]
	revokeKeyVersion *connect_go.Client[v1alpha.RevokeKeyVersionRequest, v1alpha.KeyVersion]
}

// CreateKey calls blocky.authz.admin.v1alpha.KeyAdminService.CreateKey.
func (c *keyAdminServiceClient) CreateKey(ctx context.Context, req *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.createKey.CallUnary(ctx, req)
}

// GetKey calls blocky.authz.admin.v1alpha.KeyAdminService.GetKey.
func (c *keyAdminServiceClient) GetKey(ctx context.Context, req *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.getKey.CallUnary(ctx, req)
}

// ListKeys calls blocky.authz.admin.v1alpha.KeyAdminService.ListKeys.
func (c *keyAdminServiceClient) ListKeys(ctx context.Context, req *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return c.listKeys.CallUnary(ctx, req)
}

// SetDefaultKey calls blocky.authz.admin.v1alpha.KeyAdminService.SetDefaultKey.
func (c *keyAdminServiceClient) SetDefaultKey(ctx context.Context, req *connect_go.Request[v1alpha.SetDefaultKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.setDefaultKey.CallUnary(ctx, req)
}

// CreateKeyVersion calls blocky.authz.admin.v1alpha.KeyAdminService.CreateKeyVersion.
func (c *keyAdminServiceClient) CreateKeyVersion(ctx context.Context, req *connect_go.Request[v1alpha.CreateKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error) {
	return c.createKeyVersion.CallUnary(ctx, req)
}

// GetKeyVersion calls blocky.authz.admin.v1alpha.KeyAdminService.GetKeyVersion.
func (c *keyAdminServiceClient) GetKeyVersion(ctx context.Context, req *connect_go.Request[v1alpha.GetKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error) {
	return c.getKeyVersion.CallUnary(ctx, req)
}

// ListKeyVersions calls blocky.authz.admin.v1alpha.KeyAdminService.ListKeyVersions.
func (c *keyAdminServiceClient) ListKeyVersions(ctx context.Context, req *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error) {
	return c.listKeyVersions.CallUnary(ctx, req)
}

// RevokeKeyVersion calls blocky.authz.admin.v1alpha.KeyAdminService.RevokeKeyVersion.
func (c *keyAdminServiceClient) RevokeKeyVersion(ctx context.Context, req *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error) {
	return c.revokeKeyVersion.CallUnary(ctx, req)
}

// KeyAdminServiceHandler is an implementation of the blocky.authz.admin.v1alpha.KeyAdminService
// service.
type KeyAdminServiceHandler interface {
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// GetKey returns the specified authorization key.
	// The name of the key may be used as:
	// 'projects/{project}/keys/default' to get the default key for the project.
	GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// Changes the default key for the project.
	// The default key is used for signing and verification if no key is specified.
	SetDefaultKey(context.Context, *connect_go.Request[v1alpha.SetDefaultKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// Creates a new key version and rotates the key.
	CreateKeyVersion(context.Context, *connect_go.Request[v1alpha.CreateKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error)
	// GetKeyVersion returns the specified key version.
	GetKeyVersion(context.Context, *connect_go.Request[v1alpha.GetKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error)
	// ListKeyVersions lists authorization key versions that matches given request.
	// The key versions are derived from the parent key.
	ListKeyVersions(context.Context, *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error)
	// RevokeKeyVersion revokes an authorization key version.
	// Once revoked the key version is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyVersion(context.Context, *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error)
}

// NewKeyAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeyAdminServiceHandler(svc KeyAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	keyAdminServiceCreateKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceCreateKeyProcedure,
		svc.CreateKey,
		opts...,
	)
	keyAdminServiceGetKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceGetKeyProcedure,
		svc.GetKey,
		opts...,
	)
	keyAdminServiceListKeysHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceListKeysProcedure,
		svc.ListKeys,
		opts...,
	)
	keyAdminServiceSetDefaultKeyHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceSetDefaultKeyProcedure,
		svc.SetDefaultKey,
		opts...,
	)
	keyAdminServiceCreateKeyVersionHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceCreateKeyVersionProcedure,
		svc.CreateKeyVersion,
		opts...,
	)
	keyAdminServiceGetKeyVersionHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceGetKeyVersionProcedure,
		svc.GetKeyVersion,
		opts...,
	)
	keyAdminServiceListKeyVersionsHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceListKeyVersionsProcedure,
		svc.ListKeyVersions,
		opts...,
	)
	keyAdminServiceRevokeKeyVersionHandler := connect_go.NewUnaryHandler(
		KeyAdminServiceRevokeKeyVersionProcedure,
		svc.RevokeKeyVersion,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.KeyAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeyAdminServiceCreateKeyProcedure:
			keyAdminServiceCreateKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceGetKeyProcedure:
			keyAdminServiceGetKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceListKeysProcedure:
			keyAdminServiceListKeysHandler.ServeHTTP(w, r)
		case KeyAdminServiceSetDefaultKeyProcedure:
			keyAdminServiceSetDefaultKeyHandler.ServeHTTP(w, r)
		case KeyAdminServiceCreateKeyVersionProcedure:
			keyAdminServiceCreateKeyVersionHandler.ServeHTTP(w, r)
		case KeyAdminServiceGetKeyVersionProcedure:
			keyAdminServiceGetKeyVersionHandler.ServeHTTP(w, r)
		case KeyAdminServiceListKeyVersionsProcedure:
			keyAdminServiceListKeyVersionsHandler.ServeHTTP(w, r)
		case KeyAdminServiceRevokeKeyVersionProcedure:
			keyAdminServiceRevokeKeyVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeyAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeyAdminServiceHandler struct{}

func (UnimplementedKeyAdminServiceHandler) CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.CreateKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) GetKey(context.Context, *connect_go.Request[v1alpha.GetKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.GetKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.ListKeys is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) SetDefaultKey(context.Context, *connect_go.Request[v1alpha.SetDefaultKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.SetDefaultKey is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) CreateKeyVersion(context.Context, *connect_go.Request[v1alpha.CreateKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.CreateKeyVersion is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) GetKeyVersion(context.Context, *connect_go.Request[v1alpha.GetKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.GetKeyVersion is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) ListKeyVersions(context.Context, *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.ListKeyVersions is not implemented"))
}

func (UnimplementedKeyAdminServiceHandler) RevokeKeyVersion(context.Context, *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.KeyVersion], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeyAdminService.RevokeKeyVersion is not implemented"))
}
