// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/user_consent_admin.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserContentAdminServiceName is the fully-qualified name of the UserContentAdminService service.
	UserContentAdminServiceName = "blocky.authz.admin.v1alpha.UserContentAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserContentAdminServiceCreateUserConsentProcedure is the fully-qualified name of the
	// UserContentAdminService's CreateUserConsent RPC.
	UserContentAdminServiceCreateUserConsentProcedure = "/blocky.authz.admin.v1alpha.UserContentAdminService/CreateUserConsent"
	// UserContentAdminServiceGetUserConsentProcedure is the fully-qualified name of the
	// UserContentAdminService's GetUserConsent RPC.
	UserContentAdminServiceGetUserConsentProcedure = "/blocky.authz.admin.v1alpha.UserContentAdminService/GetUserConsent"
	// UserContentAdminServiceListUserConsentsProcedure is the fully-qualified name of the
	// UserContentAdminService's ListUserConsents RPC.
	UserContentAdminServiceListUserConsentsProcedure = "/blocky.authz.admin.v1alpha.UserContentAdminService/ListUserConsents"
	// UserContentAdminServiceUpdateUserConsentProcedure is the fully-qualified name of the
	// UserContentAdminService's UpdateUserConsent RPC.
	UserContentAdminServiceUpdateUserConsentProcedure = "/blocky.authz.admin.v1alpha.UserContentAdminService/UpdateUserConsent"
	// UserContentAdminServiceDeleteUserConsentProcedure is the fully-qualified name of the
	// UserContentAdminService's DeleteUserConsent RPC.
	UserContentAdminServiceDeleteUserConsentProcedure = "/blocky.authz.admin.v1alpha.UserContentAdminService/DeleteUserConsent"
)

// UserContentAdminServiceClient is a client for the
// blocky.authz.admin.v1alpha.UserContentAdminService service.
type UserContentAdminServiceClient interface {
	// Creates a new user consent on resource permission for specific client.
	CreateUserConsent(context.Context, *connect_go.Request[v1alpha.CreateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error)
	// Gets the user consent on resource permission.
	GetUserConsent(context.Context, *connect_go.Request[v1alpha.GetUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error)
	// ListUserConsents lists all user consents for the given project.
	ListUserConsents(context.Context, *connect_go.Request[v1alpha.ListUserConsentsRequest]) (*connect_go.Response[v1alpha.ListUserConsentsResponse], error)
	// Updates the user consent on resource permission.
	UpdateUserConsent(context.Context, *connect_go.Request[v1alpha.UpdateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error)
	// Deletes the user consent on resource permission.
	// The user consent will be deleted regardless of whether it is being used by
	// any other resources.
	DeleteUserConsent(context.Context, *connect_go.Request[v1alpha.DeleteUserConsentRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewUserContentAdminServiceClient constructs a client for the
// blocky.authz.admin.v1alpha.UserContentAdminService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserContentAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserContentAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userContentAdminServiceClient{
		createUserConsent: connect_go.NewClient[v1alpha.CreateUserConsentRequest, v1alpha.UserConsent](
			httpClient,
			baseURL+UserContentAdminServiceCreateUserConsentProcedure,
			opts...,
		),
		getUserConsent: connect_go.NewClient[v1alpha.GetUserConsentRequest, v1alpha.UserConsent](
			httpClient,
			baseURL+UserContentAdminServiceGetUserConsentProcedure,
			opts...,
		),
		listUserConsents: connect_go.NewClient[v1alpha.ListUserConsentsRequest, v1alpha.ListUserConsentsResponse](
			httpClient,
			baseURL+UserContentAdminServiceListUserConsentsProcedure,
			opts...,
		),
		updateUserConsent: connect_go.NewClient[v1alpha.UpdateUserConsentRequest, v1alpha.UserConsent](
			httpClient,
			baseURL+UserContentAdminServiceUpdateUserConsentProcedure,
			opts...,
		),
		deleteUserConsent: connect_go.NewClient[v1alpha.DeleteUserConsentRequest, emptypb.Empty](
			httpClient,
			baseURL+UserContentAdminServiceDeleteUserConsentProcedure,
			opts...,
		),
	}
}

// userContentAdminServiceClient implements UserContentAdminServiceClient.
type userContentAdminServiceClient struct {
	createUserConsent *connect_go.Client[v1alpha.CreateUserConsentRequest, v1alpha.UserConsent]
	getUserConsent    *connect_go.Client[v1alpha.GetUserConsentRequest, v1alpha.UserConsent]
	listUserConsents  *connect_go.Client[v1alpha.ListUserConsentsRequest, v1alpha.ListUserConsentsResponse]
	updateUserConsent *connect_go.Client[v1alpha.UpdateUserConsentRequest, v1alpha.UserConsent]
	deleteUserConsent *connect_go.Client[v1alpha.DeleteUserConsentRequest, emptypb.Empty]
}

// CreateUserConsent calls blocky.authz.admin.v1alpha.UserContentAdminService.CreateUserConsent.
func (c *userContentAdminServiceClient) CreateUserConsent(ctx context.Context, req *connect_go.Request[v1alpha.CreateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error) {
	return c.createUserConsent.CallUnary(ctx, req)
}

// GetUserConsent calls blocky.authz.admin.v1alpha.UserContentAdminService.GetUserConsent.
func (c *userContentAdminServiceClient) GetUserConsent(ctx context.Context, req *connect_go.Request[v1alpha.GetUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error) {
	return c.getUserConsent.CallUnary(ctx, req)
}

// ListUserConsents calls blocky.authz.admin.v1alpha.UserContentAdminService.ListUserConsents.
func (c *userContentAdminServiceClient) ListUserConsents(ctx context.Context, req *connect_go.Request[v1alpha.ListUserConsentsRequest]) (*connect_go.Response[v1alpha.ListUserConsentsResponse], error) {
	return c.listUserConsents.CallUnary(ctx, req)
}

// UpdateUserConsent calls blocky.authz.admin.v1alpha.UserContentAdminService.UpdateUserConsent.
func (c *userContentAdminServiceClient) UpdateUserConsent(ctx context.Context, req *connect_go.Request[v1alpha.UpdateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error) {
	return c.updateUserConsent.CallUnary(ctx, req)
}

// DeleteUserConsent calls blocky.authz.admin.v1alpha.UserContentAdminService.DeleteUserConsent.
func (c *userContentAdminServiceClient) DeleteUserConsent(ctx context.Context, req *connect_go.Request[v1alpha.DeleteUserConsentRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteUserConsent.CallUnary(ctx, req)
}

// UserContentAdminServiceHandler is an implementation of the
// blocky.authz.admin.v1alpha.UserContentAdminService service.
type UserContentAdminServiceHandler interface {
	// Creates a new user consent on resource permission for specific client.
	CreateUserConsent(context.Context, *connect_go.Request[v1alpha.CreateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error)
	// Gets the user consent on resource permission.
	GetUserConsent(context.Context, *connect_go.Request[v1alpha.GetUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error)
	// ListUserConsents lists all user consents for the given project.
	ListUserConsents(context.Context, *connect_go.Request[v1alpha.ListUserConsentsRequest]) (*connect_go.Response[v1alpha.ListUserConsentsResponse], error)
	// Updates the user consent on resource permission.
	UpdateUserConsent(context.Context, *connect_go.Request[v1alpha.UpdateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error)
	// Deletes the user consent on resource permission.
	// The user consent will be deleted regardless of whether it is being used by
	// any other resources.
	DeleteUserConsent(context.Context, *connect_go.Request[v1alpha.DeleteUserConsentRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewUserContentAdminServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserContentAdminServiceHandler(svc UserContentAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userContentAdminServiceCreateUserConsentHandler := connect_go.NewUnaryHandler(
		UserContentAdminServiceCreateUserConsentProcedure,
		svc.CreateUserConsent,
		opts...,
	)
	userContentAdminServiceGetUserConsentHandler := connect_go.NewUnaryHandler(
		UserContentAdminServiceGetUserConsentProcedure,
		svc.GetUserConsent,
		opts...,
	)
	userContentAdminServiceListUserConsentsHandler := connect_go.NewUnaryHandler(
		UserContentAdminServiceListUserConsentsProcedure,
		svc.ListUserConsents,
		opts...,
	)
	userContentAdminServiceUpdateUserConsentHandler := connect_go.NewUnaryHandler(
		UserContentAdminServiceUpdateUserConsentProcedure,
		svc.UpdateUserConsent,
		opts...,
	)
	userContentAdminServiceDeleteUserConsentHandler := connect_go.NewUnaryHandler(
		UserContentAdminServiceDeleteUserConsentProcedure,
		svc.DeleteUserConsent,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.UserContentAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserContentAdminServiceCreateUserConsentProcedure:
			userContentAdminServiceCreateUserConsentHandler.ServeHTTP(w, r)
		case UserContentAdminServiceGetUserConsentProcedure:
			userContentAdminServiceGetUserConsentHandler.ServeHTTP(w, r)
		case UserContentAdminServiceListUserConsentsProcedure:
			userContentAdminServiceListUserConsentsHandler.ServeHTTP(w, r)
		case UserContentAdminServiceUpdateUserConsentProcedure:
			userContentAdminServiceUpdateUserConsentHandler.ServeHTTP(w, r)
		case UserContentAdminServiceDeleteUserConsentProcedure:
			userContentAdminServiceDeleteUserConsentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserContentAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserContentAdminServiceHandler struct{}

func (UnimplementedUserContentAdminServiceHandler) CreateUserConsent(context.Context, *connect_go.Request[v1alpha.CreateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.UserContentAdminService.CreateUserConsent is not implemented"))
}

func (UnimplementedUserContentAdminServiceHandler) GetUserConsent(context.Context, *connect_go.Request[v1alpha.GetUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.UserContentAdminService.GetUserConsent is not implemented"))
}

func (UnimplementedUserContentAdminServiceHandler) ListUserConsents(context.Context, *connect_go.Request[v1alpha.ListUserConsentsRequest]) (*connect_go.Response[v1alpha.ListUserConsentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.UserContentAdminService.ListUserConsents is not implemented"))
}

func (UnimplementedUserContentAdminServiceHandler) UpdateUserConsent(context.Context, *connect_go.Request[v1alpha.UpdateUserConsentRequest]) (*connect_go.Response[v1alpha.UserConsent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.UserContentAdminService.UpdateUserConsent is not implemented"))
}

func (UnimplementedUserContentAdminServiceHandler) DeleteUserConsent(context.Context, *connect_go.Request[v1alpha.DeleteUserConsentRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.UserContentAdminService.DeleteUserConsent is not implemented"))
}
