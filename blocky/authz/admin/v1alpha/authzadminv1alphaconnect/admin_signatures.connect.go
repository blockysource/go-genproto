// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/admin_signatures.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SignaturesAdminServiceName is the fully-qualified name of the SignaturesAdminService service.
	SignaturesAdminServiceName = "blocky.authz.admin.v1alpha.SignaturesAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SignaturesAdminServiceCreateSignatureTypeProcedure is the fully-qualified name of the
	// SignaturesAdminService's CreateSignatureType RPC.
	SignaturesAdminServiceCreateSignatureTypeProcedure = "/blocky.authz.admin.v1alpha.SignaturesAdminService/CreateSignatureType"
	// SignaturesAdminServiceListSignatureTypesProcedure is the fully-qualified name of the
	// SignaturesAdminService's ListSignatureTypes RPC.
	SignaturesAdminServiceListSignatureTypesProcedure = "/blocky.authz.admin.v1alpha.SignaturesAdminService/ListSignatureTypes"
	// SignaturesAdminServiceUpdateSignatureTypeProcedure is the fully-qualified name of the
	// SignaturesAdminService's UpdateSignatureType RPC.
	SignaturesAdminServiceUpdateSignatureTypeProcedure = "/blocky.authz.admin.v1alpha.SignaturesAdminService/UpdateSignatureType"
)

// SignaturesAdminServiceClient is a client for the
// blocky.authz.admin.v1alpha.SignaturesAdminService service.
type SignaturesAdminServiceClient interface {
	// Creates a new signature type that can be used to create signatures.
	// The signature type defines configuration for the signatures that are created.
	// A signature type is also used to match client signatures to the signature type.
	CreateSignatureType(context.Context, *connect_go.Request[v1alpha.CreateSignatureTypeRequest]) (*connect_go.Response[v1alpha.CreateSignatureTypeResponse], error)
	// Lists all defined signature types.
	ListSignatureTypes(context.Context, *connect_go.Request[v1alpha.ListSignatureTypesRequest]) (*connect_go.Response[v1alpha.ListSignatureTypesResponse], error)
	// Updates signature type configuration.
	// If the fields are not defined in the request, the existing values are preserved.
	UpdateSignatureType(context.Context, *connect_go.Request[v1alpha.UpdateSignatureTypeRequest]) (*connect_go.Response[v1alpha.UpdateSignatureTypeResponse], error)
}

// NewSignaturesAdminServiceClient constructs a client for the
// blocky.authz.admin.v1alpha.SignaturesAdminService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSignaturesAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SignaturesAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &signaturesAdminServiceClient{
		createSignatureType: connect_go.NewClient[v1alpha.CreateSignatureTypeRequest, v1alpha.CreateSignatureTypeResponse](
			httpClient,
			baseURL+SignaturesAdminServiceCreateSignatureTypeProcedure,
			opts...,
		),
		listSignatureTypes: connect_go.NewClient[v1alpha.ListSignatureTypesRequest, v1alpha.ListSignatureTypesResponse](
			httpClient,
			baseURL+SignaturesAdminServiceListSignatureTypesProcedure,
			opts...,
		),
		updateSignatureType: connect_go.NewClient[v1alpha.UpdateSignatureTypeRequest, v1alpha.UpdateSignatureTypeResponse](
			httpClient,
			baseURL+SignaturesAdminServiceUpdateSignatureTypeProcedure,
			opts...,
		),
	}
}

// signaturesAdminServiceClient implements SignaturesAdminServiceClient.
type signaturesAdminServiceClient struct {
	createSignatureType *connect_go.Client[v1alpha.CreateSignatureTypeRequest, v1alpha.CreateSignatureTypeResponse]
	listSignatureTypes  *connect_go.Client[v1alpha.ListSignatureTypesRequest, v1alpha.ListSignatureTypesResponse]
	updateSignatureType *connect_go.Client[v1alpha.UpdateSignatureTypeRequest, v1alpha.UpdateSignatureTypeResponse]
}

// CreateSignatureType calls blocky.authz.admin.v1alpha.SignaturesAdminService.CreateSignatureType.
func (c *signaturesAdminServiceClient) CreateSignatureType(ctx context.Context, req *connect_go.Request[v1alpha.CreateSignatureTypeRequest]) (*connect_go.Response[v1alpha.CreateSignatureTypeResponse], error) {
	return c.createSignatureType.CallUnary(ctx, req)
}

// ListSignatureTypes calls blocky.authz.admin.v1alpha.SignaturesAdminService.ListSignatureTypes.
func (c *signaturesAdminServiceClient) ListSignatureTypes(ctx context.Context, req *connect_go.Request[v1alpha.ListSignatureTypesRequest]) (*connect_go.Response[v1alpha.ListSignatureTypesResponse], error) {
	return c.listSignatureTypes.CallUnary(ctx, req)
}

// UpdateSignatureType calls blocky.authz.admin.v1alpha.SignaturesAdminService.UpdateSignatureType.
func (c *signaturesAdminServiceClient) UpdateSignatureType(ctx context.Context, req *connect_go.Request[v1alpha.UpdateSignatureTypeRequest]) (*connect_go.Response[v1alpha.UpdateSignatureTypeResponse], error) {
	return c.updateSignatureType.CallUnary(ctx, req)
}

// SignaturesAdminServiceHandler is an implementation of the
// blocky.authz.admin.v1alpha.SignaturesAdminService service.
type SignaturesAdminServiceHandler interface {
	// Creates a new signature type that can be used to create signatures.
	// The signature type defines configuration for the signatures that are created.
	// A signature type is also used to match client signatures to the signature type.
	CreateSignatureType(context.Context, *connect_go.Request[v1alpha.CreateSignatureTypeRequest]) (*connect_go.Response[v1alpha.CreateSignatureTypeResponse], error)
	// Lists all defined signature types.
	ListSignatureTypes(context.Context, *connect_go.Request[v1alpha.ListSignatureTypesRequest]) (*connect_go.Response[v1alpha.ListSignatureTypesResponse], error)
	// Updates signature type configuration.
	// If the fields are not defined in the request, the existing values are preserved.
	UpdateSignatureType(context.Context, *connect_go.Request[v1alpha.UpdateSignatureTypeRequest]) (*connect_go.Response[v1alpha.UpdateSignatureTypeResponse], error)
}

// NewSignaturesAdminServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSignaturesAdminServiceHandler(svc SignaturesAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	signaturesAdminServiceCreateSignatureTypeHandler := connect_go.NewUnaryHandler(
		SignaturesAdminServiceCreateSignatureTypeProcedure,
		svc.CreateSignatureType,
		opts...,
	)
	signaturesAdminServiceListSignatureTypesHandler := connect_go.NewUnaryHandler(
		SignaturesAdminServiceListSignatureTypesProcedure,
		svc.ListSignatureTypes,
		opts...,
	)
	signaturesAdminServiceUpdateSignatureTypeHandler := connect_go.NewUnaryHandler(
		SignaturesAdminServiceUpdateSignatureTypeProcedure,
		svc.UpdateSignatureType,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.SignaturesAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SignaturesAdminServiceCreateSignatureTypeProcedure:
			signaturesAdminServiceCreateSignatureTypeHandler.ServeHTTP(w, r)
		case SignaturesAdminServiceListSignatureTypesProcedure:
			signaturesAdminServiceListSignatureTypesHandler.ServeHTTP(w, r)
		case SignaturesAdminServiceUpdateSignatureTypeProcedure:
			signaturesAdminServiceUpdateSignatureTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSignaturesAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSignaturesAdminServiceHandler struct{}

func (UnimplementedSignaturesAdminServiceHandler) CreateSignatureType(context.Context, *connect_go.Request[v1alpha.CreateSignatureTypeRequest]) (*connect_go.Response[v1alpha.CreateSignatureTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.SignaturesAdminService.CreateSignatureType is not implemented"))
}

func (UnimplementedSignaturesAdminServiceHandler) ListSignatureTypes(context.Context, *connect_go.Request[v1alpha.ListSignatureTypesRequest]) (*connect_go.Response[v1alpha.ListSignatureTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.SignaturesAdminService.ListSignatureTypes is not implemented"))
}

func (UnimplementedSignaturesAdminServiceHandler) UpdateSignatureType(context.Context, *connect_go.Request[v1alpha.UpdateSignatureTypeRequest]) (*connect_go.Response[v1alpha.UpdateSignatureTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.SignaturesAdminService.UpdateSignatureType is not implemented"))
}
