// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/admin_keys.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KeysAdminServiceName is the fully-qualified name of the KeysAdminService service.
	KeysAdminServiceName = "blocky.authz.admin.v1alpha.KeysAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeysAdminServiceListKeysProcedure is the fully-qualified name of the KeysAdminService's ListKeys
	// RPC.
	KeysAdminServiceListKeysProcedure = "/blocky.authz.admin.v1alpha.KeysAdminService/ListKeys"
	// KeysAdminServiceCreateKeyProcedure is the fully-qualified name of the KeysAdminService's
	// CreateKey RPC.
	KeysAdminServiceCreateKeyProcedure = "/blocky.authz.admin.v1alpha.KeysAdminService/CreateKey"
	// KeysAdminServiceActivateKeyProcedure is the fully-qualified name of the KeysAdminService's
	// ActivateKey RPC.
	KeysAdminServiceActivateKeyProcedure = "/blocky.authz.admin.v1alpha.KeysAdminService/ActivateKey"
	// KeysAdminServiceRevokeKeyVersionProcedure is the fully-qualified name of the KeysAdminService's
	// RevokeKeyVersion RPC.
	KeysAdminServiceRevokeKeyVersionProcedure = "/blocky.authz.admin.v1alpha.KeysAdminService/RevokeKeyVersion"
	// KeysAdminServiceListKeyVersionsProcedure is the fully-qualified name of the KeysAdminService's
	// ListKeyVersions RPC.
	KeysAdminServiceListKeyVersionsProcedure = "/blocky.authz.admin.v1alpha.KeysAdminService/ListKeyVersions"
)

// KeysAdminServiceClient is a client for the blocky.authz.admin.v1alpha.KeysAdminService service.
type KeysAdminServiceClient interface {
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ActivateKey activates an authorization key identified by the given key ID.
	// Once activated the key is used for signing and verification.
	// If the key is already active, this is a no-op.
	// If the key is revoked, this function returns a FailedPrecondition error.
	ActivateKey(context.Context, *connect_go.Request[v1alpha.ActivateKeyRequest]) (*connect_go.Response[v1alpha.ActivateKeyResponse], error)
	// RevokeKeyVersion revokes an authorization key version identified by the given identifier.
	// Once revoked the key version is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyVersion(context.Context, *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.RevokeKeyVersionResponse], error)
	// ListKeyVersions lists authorization key versions that matches given request.
	// The key versions are derived from the parent key.
	ListKeyVersions(context.Context, *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error)
}

// NewKeysAdminServiceClient constructs a client for the blocky.authz.admin.v1alpha.KeysAdminService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeysAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KeysAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keysAdminServiceClient{
		listKeys: connect_go.NewClient[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse](
			httpClient,
			baseURL+KeysAdminServiceListKeysProcedure,
			opts...,
		),
		createKey: connect_go.NewClient[v1alpha.CreateKeyRequest, v1alpha.Key](
			httpClient,
			baseURL+KeysAdminServiceCreateKeyProcedure,
			opts...,
		),
		activateKey: connect_go.NewClient[v1alpha.ActivateKeyRequest, v1alpha.ActivateKeyResponse](
			httpClient,
			baseURL+KeysAdminServiceActivateKeyProcedure,
			opts...,
		),
		revokeKeyVersion: connect_go.NewClient[v1alpha.RevokeKeyVersionRequest, v1alpha.RevokeKeyVersionResponse](
			httpClient,
			baseURL+KeysAdminServiceRevokeKeyVersionProcedure,
			opts...,
		),
		listKeyVersions: connect_go.NewClient[v1alpha.ListKeyVersionsRequest, v1alpha.ListKeyVersionsResponse](
			httpClient,
			baseURL+KeysAdminServiceListKeyVersionsProcedure,
			opts...,
		),
	}
}

// keysAdminServiceClient implements KeysAdminServiceClient.
type keysAdminServiceClient struct {
	listKeys         *connect_go.Client[v1alpha.ListKeysRequest, v1alpha.ListKeysResponse]
	createKey        *connect_go.Client[v1alpha.CreateKeyRequest, v1alpha.Key]
	activateKey      *connect_go.Client[v1alpha.ActivateKeyRequest, v1alpha.ActivateKeyResponse]
	revokeKeyVersion *connect_go.Client[v1alpha.RevokeKeyVersionRequest, v1alpha.RevokeKeyVersionResponse]
	listKeyVersions  *connect_go.Client[v1alpha.ListKeyVersionsRequest, v1alpha.ListKeyVersionsResponse]
}

// ListKeys calls blocky.authz.admin.v1alpha.KeysAdminService.ListKeys.
func (c *keysAdminServiceClient) ListKeys(ctx context.Context, req *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return c.listKeys.CallUnary(ctx, req)
}

// CreateKey calls blocky.authz.admin.v1alpha.KeysAdminService.CreateKey.
func (c *keysAdminServiceClient) CreateKey(ctx context.Context, req *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return c.createKey.CallUnary(ctx, req)
}

// ActivateKey calls blocky.authz.admin.v1alpha.KeysAdminService.ActivateKey.
func (c *keysAdminServiceClient) ActivateKey(ctx context.Context, req *connect_go.Request[v1alpha.ActivateKeyRequest]) (*connect_go.Response[v1alpha.ActivateKeyResponse], error) {
	return c.activateKey.CallUnary(ctx, req)
}

// RevokeKeyVersion calls blocky.authz.admin.v1alpha.KeysAdminService.RevokeKeyVersion.
func (c *keysAdminServiceClient) RevokeKeyVersion(ctx context.Context, req *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.RevokeKeyVersionResponse], error) {
	return c.revokeKeyVersion.CallUnary(ctx, req)
}

// ListKeyVersions calls blocky.authz.admin.v1alpha.KeysAdminService.ListKeyVersions.
func (c *keysAdminServiceClient) ListKeyVersions(ctx context.Context, req *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error) {
	return c.listKeyVersions.CallUnary(ctx, req)
}

// KeysAdminServiceHandler is an implementation of the blocky.authz.admin.v1alpha.KeysAdminService
// service.
type KeysAdminServiceHandler interface {
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error)
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error)
	// ActivateKey activates an authorization key identified by the given key ID.
	// Once activated the key is used for signing and verification.
	// If the key is already active, this is a no-op.
	// If the key is revoked, this function returns a FailedPrecondition error.
	ActivateKey(context.Context, *connect_go.Request[v1alpha.ActivateKeyRequest]) (*connect_go.Response[v1alpha.ActivateKeyResponse], error)
	// RevokeKeyVersion revokes an authorization key version identified by the given identifier.
	// Once revoked the key version is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyVersion(context.Context, *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.RevokeKeyVersionResponse], error)
	// ListKeyVersions lists authorization key versions that matches given request.
	// The key versions are derived from the parent key.
	ListKeyVersions(context.Context, *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error)
}

// NewKeysAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeysAdminServiceHandler(svc KeysAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	keysAdminServiceListKeysHandler := connect_go.NewUnaryHandler(
		KeysAdminServiceListKeysProcedure,
		svc.ListKeys,
		opts...,
	)
	keysAdminServiceCreateKeyHandler := connect_go.NewUnaryHandler(
		KeysAdminServiceCreateKeyProcedure,
		svc.CreateKey,
		opts...,
	)
	keysAdminServiceActivateKeyHandler := connect_go.NewUnaryHandler(
		KeysAdminServiceActivateKeyProcedure,
		svc.ActivateKey,
		opts...,
	)
	keysAdminServiceRevokeKeyVersionHandler := connect_go.NewUnaryHandler(
		KeysAdminServiceRevokeKeyVersionProcedure,
		svc.RevokeKeyVersion,
		opts...,
	)
	keysAdminServiceListKeyVersionsHandler := connect_go.NewUnaryHandler(
		KeysAdminServiceListKeyVersionsProcedure,
		svc.ListKeyVersions,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.KeysAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeysAdminServiceListKeysProcedure:
			keysAdminServiceListKeysHandler.ServeHTTP(w, r)
		case KeysAdminServiceCreateKeyProcedure:
			keysAdminServiceCreateKeyHandler.ServeHTTP(w, r)
		case KeysAdminServiceActivateKeyProcedure:
			keysAdminServiceActivateKeyHandler.ServeHTTP(w, r)
		case KeysAdminServiceRevokeKeyVersionProcedure:
			keysAdminServiceRevokeKeyVersionHandler.ServeHTTP(w, r)
		case KeysAdminServiceListKeyVersionsProcedure:
			keysAdminServiceListKeyVersionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeysAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeysAdminServiceHandler struct{}

func (UnimplementedKeysAdminServiceHandler) ListKeys(context.Context, *connect_go.Request[v1alpha.ListKeysRequest]) (*connect_go.Response[v1alpha.ListKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeysAdminService.ListKeys is not implemented"))
}

func (UnimplementedKeysAdminServiceHandler) CreateKey(context.Context, *connect_go.Request[v1alpha.CreateKeyRequest]) (*connect_go.Response[v1alpha.Key], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeysAdminService.CreateKey is not implemented"))
}

func (UnimplementedKeysAdminServiceHandler) ActivateKey(context.Context, *connect_go.Request[v1alpha.ActivateKeyRequest]) (*connect_go.Response[v1alpha.ActivateKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeysAdminService.ActivateKey is not implemented"))
}

func (UnimplementedKeysAdminServiceHandler) RevokeKeyVersion(context.Context, *connect_go.Request[v1alpha.RevokeKeyVersionRequest]) (*connect_go.Response[v1alpha.RevokeKeyVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeysAdminService.RevokeKeyVersion is not implemented"))
}

func (UnimplementedKeysAdminServiceHandler) ListKeyVersions(context.Context, *connect_go.Request[v1alpha.ListKeyVersionsRequest]) (*connect_go.Response[v1alpha.ListKeyVersionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.KeysAdminService.ListKeyVersions is not implemented"))
}
