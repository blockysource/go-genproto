// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/admin/v1alpha/admin_scopes.proto

package authzadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ScopesAdminServiceName is the fully-qualified name of the ScopesAdminService service.
	ScopesAdminServiceName = "blocky.authz.admin.v1alpha.ScopesAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScopesAdminServiceListScopesProcedure is the fully-qualified name of the ScopesAdminService's
	// ListScopes RPC.
	ScopesAdminServiceListScopesProcedure = "/blocky.authz.admin.v1alpha.ScopesAdminService/ListScopes"
	// ScopesAdminServiceCreateScopeProcedure is the fully-qualified name of the ScopesAdminService's
	// CreateScope RPC.
	ScopesAdminServiceCreateScopeProcedure = "/blocky.authz.admin.v1alpha.ScopesAdminService/CreateScope"
	// ScopesAdminServiceUpdateScopeProcedure is the fully-qualified name of the ScopesAdminService's
	// UpdateScope RPC.
	ScopesAdminServiceUpdateScopeProcedure = "/blocky.authz.admin.v1alpha.ScopesAdminService/UpdateScope"
	// ScopesAdminServiceDeleteScopeProcedure is the fully-qualified name of the ScopesAdminService's
	// DeleteScope RPC.
	ScopesAdminServiceDeleteScopeProcedure = "/blocky.authz.admin.v1alpha.ScopesAdminService/DeleteScope"
)

// ScopesAdminServiceClient is a client for the blocky.authz.admin.v1alpha.ScopesAdminService
// service.
type ScopesAdminServiceClient interface {
	// Lists authorization scopes that are registered with the service.
	ListScopes(context.Context, *connect_go.Request[v1alpha.ListScopesRequest]) (*connect_go.Response[v1alpha.ListScopesResponse], error)
	// Creates a new authorization scope.
	CreateScope(context.Context, *connect_go.Request[v1alpha.CreateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error)
	// Updates an existing authorization scope with new information.
	UpdateScope(context.Context, *connect_go.Request[v1alpha.UpdateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error)
	// Deletes an authorization scope.
	DeleteScope(context.Context, *connect_go.Request[v1alpha.DeleteScopeRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewScopesAdminServiceClient constructs a client for the
// blocky.authz.admin.v1alpha.ScopesAdminService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScopesAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ScopesAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &scopesAdminServiceClient{
		listScopes: connect_go.NewClient[v1alpha.ListScopesRequest, v1alpha.ListScopesResponse](
			httpClient,
			baseURL+ScopesAdminServiceListScopesProcedure,
			opts...,
		),
		createScope: connect_go.NewClient[v1alpha.CreateScopeRequest, v1alpha.Scope](
			httpClient,
			baseURL+ScopesAdminServiceCreateScopeProcedure,
			opts...,
		),
		updateScope: connect_go.NewClient[v1alpha.UpdateScopeRequest, v1alpha.Scope](
			httpClient,
			baseURL+ScopesAdminServiceUpdateScopeProcedure,
			opts...,
		),
		deleteScope: connect_go.NewClient[v1alpha.DeleteScopeRequest, emptypb.Empty](
			httpClient,
			baseURL+ScopesAdminServiceDeleteScopeProcedure,
			opts...,
		),
	}
}

// scopesAdminServiceClient implements ScopesAdminServiceClient.
type scopesAdminServiceClient struct {
	listScopes  *connect_go.Client[v1alpha.ListScopesRequest, v1alpha.ListScopesResponse]
	createScope *connect_go.Client[v1alpha.CreateScopeRequest, v1alpha.Scope]
	updateScope *connect_go.Client[v1alpha.UpdateScopeRequest, v1alpha.Scope]
	deleteScope *connect_go.Client[v1alpha.DeleteScopeRequest, emptypb.Empty]
}

// ListScopes calls blocky.authz.admin.v1alpha.ScopesAdminService.ListScopes.
func (c *scopesAdminServiceClient) ListScopes(ctx context.Context, req *connect_go.Request[v1alpha.ListScopesRequest]) (*connect_go.Response[v1alpha.ListScopesResponse], error) {
	return c.listScopes.CallUnary(ctx, req)
}

// CreateScope calls blocky.authz.admin.v1alpha.ScopesAdminService.CreateScope.
func (c *scopesAdminServiceClient) CreateScope(ctx context.Context, req *connect_go.Request[v1alpha.CreateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error) {
	return c.createScope.CallUnary(ctx, req)
}

// UpdateScope calls blocky.authz.admin.v1alpha.ScopesAdminService.UpdateScope.
func (c *scopesAdminServiceClient) UpdateScope(ctx context.Context, req *connect_go.Request[v1alpha.UpdateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error) {
	return c.updateScope.CallUnary(ctx, req)
}

// DeleteScope calls blocky.authz.admin.v1alpha.ScopesAdminService.DeleteScope.
func (c *scopesAdminServiceClient) DeleteScope(ctx context.Context, req *connect_go.Request[v1alpha.DeleteScopeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteScope.CallUnary(ctx, req)
}

// ScopesAdminServiceHandler is an implementation of the
// blocky.authz.admin.v1alpha.ScopesAdminService service.
type ScopesAdminServiceHandler interface {
	// Lists authorization scopes that are registered with the service.
	ListScopes(context.Context, *connect_go.Request[v1alpha.ListScopesRequest]) (*connect_go.Response[v1alpha.ListScopesResponse], error)
	// Creates a new authorization scope.
	CreateScope(context.Context, *connect_go.Request[v1alpha.CreateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error)
	// Updates an existing authorization scope with new information.
	UpdateScope(context.Context, *connect_go.Request[v1alpha.UpdateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error)
	// Deletes an authorization scope.
	DeleteScope(context.Context, *connect_go.Request[v1alpha.DeleteScopeRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewScopesAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScopesAdminServiceHandler(svc ScopesAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	scopesAdminServiceListScopesHandler := connect_go.NewUnaryHandler(
		ScopesAdminServiceListScopesProcedure,
		svc.ListScopes,
		opts...,
	)
	scopesAdminServiceCreateScopeHandler := connect_go.NewUnaryHandler(
		ScopesAdminServiceCreateScopeProcedure,
		svc.CreateScope,
		opts...,
	)
	scopesAdminServiceUpdateScopeHandler := connect_go.NewUnaryHandler(
		ScopesAdminServiceUpdateScopeProcedure,
		svc.UpdateScope,
		opts...,
	)
	scopesAdminServiceDeleteScopeHandler := connect_go.NewUnaryHandler(
		ScopesAdminServiceDeleteScopeProcedure,
		svc.DeleteScope,
		opts...,
	)
	return "/blocky.authz.admin.v1alpha.ScopesAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScopesAdminServiceListScopesProcedure:
			scopesAdminServiceListScopesHandler.ServeHTTP(w, r)
		case ScopesAdminServiceCreateScopeProcedure:
			scopesAdminServiceCreateScopeHandler.ServeHTTP(w, r)
		case ScopesAdminServiceUpdateScopeProcedure:
			scopesAdminServiceUpdateScopeHandler.ServeHTTP(w, r)
		case ScopesAdminServiceDeleteScopeProcedure:
			scopesAdminServiceDeleteScopeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScopesAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScopesAdminServiceHandler struct{}

func (UnimplementedScopesAdminServiceHandler) ListScopes(context.Context, *connect_go.Request[v1alpha.ListScopesRequest]) (*connect_go.Response[v1alpha.ListScopesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ScopesAdminService.ListScopes is not implemented"))
}

func (UnimplementedScopesAdminServiceHandler) CreateScope(context.Context, *connect_go.Request[v1alpha.CreateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ScopesAdminService.CreateScope is not implemented"))
}

func (UnimplementedScopesAdminServiceHandler) UpdateScope(context.Context, *connect_go.Request[v1alpha.UpdateScopeRequest]) (*connect_go.Response[v1alpha.Scope], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ScopesAdminService.UpdateScope is not implemented"))
}

func (UnimplementedScopesAdminServiceHandler) DeleteScope(context.Context, *connect_go.Request[v1alpha.DeleteScopeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.admin.v1alpha.ScopesAdminService.DeleteScope is not implemented"))
}
