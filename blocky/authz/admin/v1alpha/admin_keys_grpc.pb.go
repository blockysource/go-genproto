// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/authz/admin/v1alpha/admin_keys.proto

package authzadminv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeysAdminService_ListKeys_FullMethodName         = "/blocky.authz.admin.v1alpha.KeysAdminService/ListKeys"
	KeysAdminService_CreateKey_FullMethodName        = "/blocky.authz.admin.v1alpha.KeysAdminService/CreateKey"
	KeysAdminService_ActivateKey_FullMethodName      = "/blocky.authz.admin.v1alpha.KeysAdminService/ActivateKey"
	KeysAdminService_RevokeKeyVersion_FullMethodName = "/blocky.authz.admin.v1alpha.KeysAdminService/RevokeKeyVersion"
	KeysAdminService_ListKeyVersions_FullMethodName  = "/blocky.authz.admin.v1alpha.KeysAdminService/ListKeyVersions"
)

// KeysAdminServiceClient is the client API for KeysAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeysAdminServiceClient interface {
	// ListKeys lists authorization keys that matches given request.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// ActivateKey activates an authorization key identified by the given key ID.
	// Once activated the key is used for signing and verification.
	// If the key is already active, this is a no-op.
	// If the key is revoked, this function returns a FailedPrecondition error.
	ActivateKey(ctx context.Context, in *ActivateKeyRequest, opts ...grpc.CallOption) (*ActivateKeyResponse, error)
	// RevokeKeyVersion revokes an authorization key version identified by the given identifier.
	// Once revoked the key version is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyVersion(ctx context.Context, in *RevokeKeyVersionRequest, opts ...grpc.CallOption) (*RevokeKeyVersionResponse, error)
	// ListKeyVersions lists authorization key versions that matches given request.
	// The key versions are derived from the parent key.
	ListKeyVersions(ctx context.Context, in *ListKeyVersionsRequest, opts ...grpc.CallOption) (*ListKeyVersionsResponse, error)
}

type keysAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeysAdminServiceClient(cc grpc.ClientConnInterface) KeysAdminServiceClient {
	return &keysAdminServiceClient{cc}
}

func (c *keysAdminServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, KeysAdminService_ListKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeysAdminService_CreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) ActivateKey(ctx context.Context, in *ActivateKeyRequest, opts ...grpc.CallOption) (*ActivateKeyResponse, error) {
	out := new(ActivateKeyResponse)
	err := c.cc.Invoke(ctx, KeysAdminService_ActivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) RevokeKeyVersion(ctx context.Context, in *RevokeKeyVersionRequest, opts ...grpc.CallOption) (*RevokeKeyVersionResponse, error) {
	out := new(RevokeKeyVersionResponse)
	err := c.cc.Invoke(ctx, KeysAdminService_RevokeKeyVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) ListKeyVersions(ctx context.Context, in *ListKeyVersionsRequest, opts ...grpc.CallOption) (*ListKeyVersionsResponse, error) {
	out := new(ListKeyVersionsResponse)
	err := c.cc.Invoke(ctx, KeysAdminService_ListKeyVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeysAdminServiceServer is the server API for KeysAdminService service.
// All implementations must embed UnimplementedKeysAdminServiceServer
// for forward compatibility
type KeysAdminServiceServer interface {
	// ListKeys lists authorization keys that matches given request.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// CreateKey creates a new authorization key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *CreateKeyRequest) (*Key, error)
	// ActivateKey activates an authorization key identified by the given key ID.
	// Once activated the key is used for signing and verification.
	// If the key is already active, this is a no-op.
	// If the key is revoked, this function returns a FailedPrecondition error.
	ActivateKey(context.Context, *ActivateKeyRequest) (*ActivateKeyResponse, error)
	// RevokeKeyVersion revokes an authorization key version identified by the given identifier.
	// Once revoked the key version is no longer valid for signing and verification.
	// If revoked key was the only active signing key, the system will not accept
	// any new requests until a new key is created and activated.
	RevokeKeyVersion(context.Context, *RevokeKeyVersionRequest) (*RevokeKeyVersionResponse, error)
	// ListKeyVersions lists authorization key versions that matches given request.
	// The key versions are derived from the parent key.
	ListKeyVersions(context.Context, *ListKeyVersionsRequest) (*ListKeyVersionsResponse, error)
	mustEmbedUnimplementedKeysAdminServiceServer()
}

// UnimplementedKeysAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeysAdminServiceServer struct {
}

func (UnimplementedKeysAdminServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKeysAdminServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKeysAdminServiceServer) ActivateKey(context.Context, *ActivateKeyRequest) (*ActivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateKey not implemented")
}
func (UnimplementedKeysAdminServiceServer) RevokeKeyVersion(context.Context, *RevokeKeyVersionRequest) (*RevokeKeyVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeKeyVersion not implemented")
}
func (UnimplementedKeysAdminServiceServer) ListKeyVersions(context.Context, *ListKeyVersionsRequest) (*ListKeyVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyVersions not implemented")
}
func (UnimplementedKeysAdminServiceServer) mustEmbedUnimplementedKeysAdminServiceServer() {}

// UnsafeKeysAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeysAdminServiceServer will
// result in compilation errors.
type UnsafeKeysAdminServiceServer interface {
	mustEmbedUnimplementedKeysAdminServiceServer()
}

func RegisterKeysAdminServiceServer(s grpc.ServiceRegistrar, srv KeysAdminServiceServer) {
	s.RegisterService(&KeysAdminService_ServiceDesc, srv)
}

func _KeysAdminService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_ActivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).ActivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_ActivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).ActivateKey(ctx, req.(*ActivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_RevokeKeyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeKeyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).RevokeKeyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_RevokeKeyVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).RevokeKeyVersion(ctx, req.(*RevokeKeyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_ListKeyVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).ListKeyVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_ListKeyVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).ListKeyVersions(ctx, req.(*ListKeyVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeysAdminService_ServiceDesc is the grpc.ServiceDesc for KeysAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeysAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.authz.admin.v1alpha.KeysAdminService",
	HandlerType: (*KeysAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKeys",
			Handler:    _KeysAdminService_ListKeys_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _KeysAdminService_CreateKey_Handler,
		},
		{
			MethodName: "ActivateKey",
			Handler:    _KeysAdminService_ActivateKey_Handler,
		},
		{
			MethodName: "RevokeKeyVersion",
			Handler:    _KeysAdminService_RevokeKeyVersion_Handler,
		},
		{
			MethodName: "ListKeyVersions",
			Handler:    _KeysAdminService_ListKeyVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/authz/admin/v1alpha/admin_keys.proto",
}
