// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/authz/admin/v1alpha/admin_scopes.proto

package authzadminv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScopesAdminService_ListScopes_FullMethodName  = "/blocky.authz.admin.v1alpha.ScopesAdminService/ListScopes"
	ScopesAdminService_CreateScope_FullMethodName = "/blocky.authz.admin.v1alpha.ScopesAdminService/CreateScope"
	ScopesAdminService_UpdateScope_FullMethodName = "/blocky.authz.admin.v1alpha.ScopesAdminService/UpdateScope"
	ScopesAdminService_DeleteScope_FullMethodName = "/blocky.authz.admin.v1alpha.ScopesAdminService/DeleteScope"
)

// ScopesAdminServiceClient is the client API for ScopesAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScopesAdminServiceClient interface {
	// Lists authorization scopes that are registered with the service.
	ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error)
	// Creates a new authorization scope.
	CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*Scope, error)
	// Updates an existing authorization scope with new information.
	UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*Scope, error)
	// Deletes an authorization scope.
	DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scopesAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScopesAdminServiceClient(cc grpc.ClientConnInterface) ScopesAdminServiceClient {
	return &scopesAdminServiceClient{cc}
}

func (c *scopesAdminServiceClient) ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error) {
	out := new(ListScopesResponse)
	err := c.cc.Invoke(ctx, ScopesAdminService_ListScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopesAdminServiceClient) CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, ScopesAdminService_CreateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopesAdminServiceClient) UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, ScopesAdminService_UpdateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopesAdminServiceClient) DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScopesAdminService_DeleteScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopesAdminServiceServer is the server API for ScopesAdminService service.
// All implementations must embed UnimplementedScopesAdminServiceServer
// for forward compatibility
type ScopesAdminServiceServer interface {
	// Lists authorization scopes that are registered with the service.
	ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error)
	// Creates a new authorization scope.
	CreateScope(context.Context, *CreateScopeRequest) (*Scope, error)
	// Updates an existing authorization scope with new information.
	UpdateScope(context.Context, *UpdateScopeRequest) (*Scope, error)
	// Deletes an authorization scope.
	DeleteScope(context.Context, *DeleteScopeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedScopesAdminServiceServer()
}

// UnimplementedScopesAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScopesAdminServiceServer struct {
}

func (UnimplementedScopesAdminServiceServer) ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedScopesAdminServiceServer) CreateScope(context.Context, *CreateScopeRequest) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedScopesAdminServiceServer) UpdateScope(context.Context, *UpdateScopeRequest) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScope not implemented")
}
func (UnimplementedScopesAdminServiceServer) DeleteScope(context.Context, *DeleteScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScope not implemented")
}
func (UnimplementedScopesAdminServiceServer) mustEmbedUnimplementedScopesAdminServiceServer() {}

// UnsafeScopesAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScopesAdminServiceServer will
// result in compilation errors.
type UnsafeScopesAdminServiceServer interface {
	mustEmbedUnimplementedScopesAdminServiceServer()
}

func RegisterScopesAdminServiceServer(s grpc.ServiceRegistrar, srv ScopesAdminServiceServer) {
	s.RegisterService(&ScopesAdminService_ServiceDesc, srv)
}

func _ScopesAdminService_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopesAdminServiceServer).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopesAdminService_ListScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopesAdminServiceServer).ListScopes(ctx, req.(*ListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopesAdminService_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopesAdminServiceServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopesAdminService_CreateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopesAdminServiceServer).CreateScope(ctx, req.(*CreateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopesAdminService_UpdateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopesAdminServiceServer).UpdateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopesAdminService_UpdateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopesAdminServiceServer).UpdateScope(ctx, req.(*UpdateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopesAdminService_DeleteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopesAdminServiceServer).DeleteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopesAdminService_DeleteScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopesAdminServiceServer).DeleteScope(ctx, req.(*DeleteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScopesAdminService_ServiceDesc is the grpc.ServiceDesc for ScopesAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScopesAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.authz.admin.v1alpha.ScopesAdminService",
	HandlerType: (*ScopesAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListScopes",
			Handler:    _ScopesAdminService_ListScopes_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _ScopesAdminService_CreateScope_Handler,
		},
		{
			MethodName: "UpdateScope",
			Handler:    _ScopesAdminService_UpdateScope_Handler,
		},
		{
			MethodName: "DeleteScope",
			Handler:    _ScopesAdminService_DeleteScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/authz/admin/v1alpha/admin_scopes.proto",
}
