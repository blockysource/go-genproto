// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/authz/e2e/v1alpha/signature.proto

package authze2ev1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/authz/e2e/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SignaturesServiceName is the fully-qualified name of the SignaturesService service.
	SignaturesServiceName = "blocky.authz.e2e.v1alpha.SignaturesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SignaturesServiceSignClaimsProcedure is the fully-qualified name of the SignaturesService's
	// SignClaims RPC.
	SignaturesServiceSignClaimsProcedure = "/blocky.authz.e2e.v1alpha.SignaturesService/SignClaims"
	// SignaturesServiceIntrospectSignatureProcedure is the fully-qualified name of the
	// SignaturesService's IntrospectSignature RPC.
	SignaturesServiceIntrospectSignatureProcedure = "/blocky.authz.e2e.v1alpha.SignaturesService/IntrospectSignature"
)

// SignaturesServiceClient is a client for the blocky.authz.e2e.v1alpha.SignaturesService service.
type SignaturesServiceClient interface {
	// Signs the input payload and returns a signed string token.
	// The result is a Json Web Signature (JWS) as defined in RFC 7515.
	SignClaims(context.Context, *connect_go.Request[v1alpha.SignClaimsRequest]) (*connect_go.Response[v1alpha.SignClaimsResponse], error)
	// Introspects the signature and returns the claims.
	// Once the signature is verified, the claims are returned as a Struct.
	IntrospectSignature(context.Context, *connect_go.Request[v1alpha.IntrospectSignatureRequest]) (*connect_go.Response[v1alpha.IntrospectSignatureResponse], error)
}

// NewSignaturesServiceClient constructs a client for the blocky.authz.e2e.v1alpha.SignaturesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSignaturesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SignaturesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &signaturesServiceClient{
		signClaims: connect_go.NewClient[v1alpha.SignClaimsRequest, v1alpha.SignClaimsResponse](
			httpClient,
			baseURL+SignaturesServiceSignClaimsProcedure,
			opts...,
		),
		introspectSignature: connect_go.NewClient[v1alpha.IntrospectSignatureRequest, v1alpha.IntrospectSignatureResponse](
			httpClient,
			baseURL+SignaturesServiceIntrospectSignatureProcedure,
			opts...,
		),
	}
}

// signaturesServiceClient implements SignaturesServiceClient.
type signaturesServiceClient struct {
	signClaims          *connect_go.Client[v1alpha.SignClaimsRequest, v1alpha.SignClaimsResponse]
	introspectSignature *connect_go.Client[v1alpha.IntrospectSignatureRequest, v1alpha.IntrospectSignatureResponse]
}

// SignClaims calls blocky.authz.e2e.v1alpha.SignaturesService.SignClaims.
func (c *signaturesServiceClient) SignClaims(ctx context.Context, req *connect_go.Request[v1alpha.SignClaimsRequest]) (*connect_go.Response[v1alpha.SignClaimsResponse], error) {
	return c.signClaims.CallUnary(ctx, req)
}

// IntrospectSignature calls blocky.authz.e2e.v1alpha.SignaturesService.IntrospectSignature.
func (c *signaturesServiceClient) IntrospectSignature(ctx context.Context, req *connect_go.Request[v1alpha.IntrospectSignatureRequest]) (*connect_go.Response[v1alpha.IntrospectSignatureResponse], error) {
	return c.introspectSignature.CallUnary(ctx, req)
}

// SignaturesServiceHandler is an implementation of the blocky.authz.e2e.v1alpha.SignaturesService
// service.
type SignaturesServiceHandler interface {
	// Signs the input payload and returns a signed string token.
	// The result is a Json Web Signature (JWS) as defined in RFC 7515.
	SignClaims(context.Context, *connect_go.Request[v1alpha.SignClaimsRequest]) (*connect_go.Response[v1alpha.SignClaimsResponse], error)
	// Introspects the signature and returns the claims.
	// Once the signature is verified, the claims are returned as a Struct.
	IntrospectSignature(context.Context, *connect_go.Request[v1alpha.IntrospectSignatureRequest]) (*connect_go.Response[v1alpha.IntrospectSignatureResponse], error)
}

// NewSignaturesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSignaturesServiceHandler(svc SignaturesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	signaturesServiceSignClaimsHandler := connect_go.NewUnaryHandler(
		SignaturesServiceSignClaimsProcedure,
		svc.SignClaims,
		opts...,
	)
	signaturesServiceIntrospectSignatureHandler := connect_go.NewUnaryHandler(
		SignaturesServiceIntrospectSignatureProcedure,
		svc.IntrospectSignature,
		opts...,
	)
	return "/blocky.authz.e2e.v1alpha.SignaturesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SignaturesServiceSignClaimsProcedure:
			signaturesServiceSignClaimsHandler.ServeHTTP(w, r)
		case SignaturesServiceIntrospectSignatureProcedure:
			signaturesServiceIntrospectSignatureHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSignaturesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSignaturesServiceHandler struct{}

func (UnimplementedSignaturesServiceHandler) SignClaims(context.Context, *connect_go.Request[v1alpha.SignClaimsRequest]) (*connect_go.Response[v1alpha.SignClaimsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.e2e.v1alpha.SignaturesService.SignClaims is not implemented"))
}

func (UnimplementedSignaturesServiceHandler) IntrospectSignature(context.Context, *connect_go.Request[v1alpha.IntrospectSignatureRequest]) (*connect_go.Response[v1alpha.IntrospectSignatureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.authz.e2e.v1alpha.SignaturesService.IntrospectSignature is not implemented"))
}
