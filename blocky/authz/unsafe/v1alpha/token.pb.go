// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blocky/authz/unsafe/v1alpha/token.proto

package authzunsafev1alpha

import (
	signalgpb "github.com/blockysource/go-genproto/blocky/authz/type/signalgpb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [TokensService.IssueIDToken][blocky.authz.unsafe.v1alpha.TokensService.IssueIDToken].
type IssueIDTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project is a resource name of the project that the token is issued for.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Required, the subject of the token.
	// The subject is the unique identifier of the user or service account that the token represents.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// Optional custom claims to be added to the token.
	// If provided this field must be a valid JSON object, otherwise the request will fail.
	// Any standard claims will not be included in the resulting token.
	// The list of standard claims are:
	// - sub: the subject of the token
	// - iss: the issuer of the token
	// - aud: the audience of the token
	// - iat: the time the token was issued
	// - exp: the time the token will expire
	Claims string `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
	// Preferred algorithm to sign the token with.
	// If the given algorithm is not supported by the system, the request will fail with the error InvalidArgument.
	// If no algorithm is provided, the token will be signed with the default algorithm in the service.
	Algorithm signalgpb.SigningAlgorithm `protobuf:"varint,4,opt,name=algorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"algorithm,omitempty"`
	// Optional, identifier of the client that is requesting the token.
	// If not provided, the token
	// and no scope validation will be performed.
	// Note: this affects permissible scopes, not the validity of the token.
	Client string `protobuf:"bytes,5,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *IssueIDTokenRequest) Reset() {
	*x = IssueIDTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueIDTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueIDTokenRequest) ProtoMessage() {}

func (x *IssueIDTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueIDTokenRequest.ProtoReflect.Descriptor instead.
func (*IssueIDTokenRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{0}
}

func (x *IssueIDTokenRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *IssueIDTokenRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *IssueIDTokenRequest) GetClaims() string {
	if x != nil {
		return x.Claims
	}
	return ""
}

func (x *IssueIDTokenRequest) GetAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *IssueIDTokenRequest) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

// Response message for
// [TokensService.IssueIDToken][blocky.authz.unsafe.v1alpha.TokensService.IssueIDToken].
type IssueIDTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the ID token that can be used to authenticate requests.
	IdToken string `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
}

func (x *IssueIDTokenResponse) Reset() {
	*x = IssueIDTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueIDTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueIDTokenResponse) ProtoMessage() {}

func (x *IssueIDTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueIDTokenResponse.ProtoReflect.Descriptor instead.
func (*IssueIDTokenResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{1}
}

func (x *IssueIDTokenResponse) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

// Request message for
// [TokensService.IssueToken][blocky.authz.unsafe.v1alpha.TokensService.IssueToken].
type IssueTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project is a resource name of the project that the token is issued for.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Required, the subject of the token.
	// The subject is the unique identifier of the user or service account that the token represents.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// Optional key resource name used to sign this token.
	// If not provided, the token will be signed with the default key.
	// If provided, it must be a valid key identifier, otherwise the request will fail,
	// with the error NotFound.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Optional custom claims to be added to the token.
	// If provided this field must be a valid JSON object, otherwise the request will fail.
	// By default, the token will contain the following claims:
	// - sub: the subject of the token
	// - iss: the issuer of the token
	// - aud: the audience of the token
	// - iat: the time the token was issued
	// - exp: the time the token will expire
	// - jti: the unique identifier of the token
	Claims string `protobuf:"bytes,4,opt,name=claims,proto3" json:"claims,omitempty"`
	// Required, the scope of the token.
	// The scope is a list of strings that represent the permissions that the token grants.
	Scope string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	// Algorithm used to sign the token.
	// If the given algorithm is not supported by the system, the request will fail with the error InvalidArgument.
	// If not provided, the token will be signed with the default algorithm for the key.
	Algorithm signalgpb.SigningAlgorithm `protobuf:"varint,6,opt,name=algorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"algorithm,omitempty"`
	// Optional, identifier of the client that is requesting the token.
	// If not provided, the token
	// and no scope validation will be performed.
	// Note: this affects permissible scopes, not the validity of the token.
	Client string `protobuf:"bytes,7,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *IssueTokenRequest) Reset() {
	*x = IssueTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTokenRequest) ProtoMessage() {}

func (x *IssueTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTokenRequest.ProtoReflect.Descriptor instead.
func (*IssueTokenRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{2}
}

func (x *IssueTokenRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *IssueTokenRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *IssueTokenRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *IssueTokenRequest) GetClaims() string {
	if x != nil {
		return x.Claims
	}
	return ""
}

func (x *IssueTokenRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *IssueTokenRequest) GetAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *IssueTokenRequest) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

// IssueTokenResponse is a response used to issue a token.
type IssueTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the access token that can be used to authenticate requests.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// Is an optional refresh token that can be used to issue new tokens.
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	// Is the expiration time of the access token.
	ExpiresIn int64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *IssueTokenResponse) Reset() {
	*x = IssueTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTokenResponse) ProtoMessage() {}

func (x *IssueTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTokenResponse.ProtoReflect.Descriptor instead.
func (*IssueTokenResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{3}
}

func (x *IssueTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *IssueTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *IssueTokenResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

// IntrospectTokenRequest is a request used to introspect a token.
type IntrospectTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A required token to introspect.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *IntrospectTokenRequest) Reset() {
	*x = IntrospectTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectTokenRequest) ProtoMessage() {}

func (x *IntrospectTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectTokenRequest.ProtoReflect.Descriptor instead.
func (*IntrospectTokenRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{4}
}

func (x *IntrospectTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// The response message for
// [TokensService.IntrospectToken][blocky.authz.unsafe.v1alpha.TokensService.IntrospectToken].
type IntrospectTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Are the standard claims of the token.
	Claims *StandardTokenClaims `protobuf:"bytes,1,opt,name=claims,proto3" json:"claims,omitempty"`
	// Are the unspecified custom claims encoded in the token.
	CustomClaims string `protobuf:"bytes,2,opt,name=custom_claims,json=customClaims,proto3" json:"custom_claims,omitempty"`
}

func (x *IntrospectTokenResponse) Reset() {
	*x = IntrospectTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectTokenResponse) ProtoMessage() {}

func (x *IntrospectTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectTokenResponse.ProtoReflect.Descriptor instead.
func (*IntrospectTokenResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{5}
}

func (x *IntrospectTokenResponse) GetClaims() *StandardTokenClaims {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *IntrospectTokenResponse) GetCustomClaims() string {
	if x != nil {
		return x.CustomClaims
	}
	return ""
}

type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken              string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ForceConfigurationOptions bool   `protobuf:"varint,2,opt,name=force_configuration_options,json=forceConfigurationOptions,proto3" json:"force_configuration_options,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{6}
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshTokenRequest) GetForceConfigurationOptions() bool {
	if x != nil {
		return x.ForceConfigurationOptions
	}
	return false
}

type RefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *RefreshTokenResponse) Reset() {
	*x = RefreshTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenResponse) ProtoMessage() {}

func (x *RefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{7}
}

func (x *RefreshTokenResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type RevokeRefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RevokeRefreshTokenRequest) Reset() {
	*x = RevokeRefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeRefreshTokenRequest) ProtoMessage() {}

func (x *RevokeRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RevokeRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{8}
}

func (x *RevokeRefreshTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// IntrospectedTokenClaims is a set of claims that are returned when introspecting a token.
type StandardTokenClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the token unique identifier.
	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=jti,proto3" json:"token_id,omitempty"`
	// States if the token is active.
	Active bool `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	// Is the subject of the token.
	Subject string `protobuf:"bytes,3,opt,name=subject,json=sub,omitempty,proto3" json:"subject,omitempty"`
	// Is the expiration time of the token.
	ExpiresAt int64 `protobuf:"varint,4,opt,name=expires_at,json=exp,omitempty,proto3" json:"expires_at,omitempty"`
	// Is the time the token was issued.
	IssuedAt int64 `protobuf:"varint,5,opt,name=issued_at,json=iat,omitempty,proto3" json:"issued_at,omitempty"`
	// Is the time the token was revoked.
	RevokedAt int64 `protobuf:"varint,6,opt,name=revoked_at,json=rat,omitempty,proto3" json:"revoked_at,omitempty"`
	// Is the time the token was not valid before.
	NotBefore int64 `protobuf:"varint,7,opt,name=not_before,json=nbf,omitempty,proto3" json:"not_before,omitempty"`
	// Is the issuer of the token.
	Issuer string `protobuf:"bytes,8,opt,name=issuer,json=iss,omitempty,proto3" json:"issuer,omitempty"`
	// Is a comma separated list of scopes that the token grants.
	Scope string `protobuf:"bytes,9,opt,name=scope,proto3" json:"scope,omitempty"`
	// Is the audience of the token,
	Audience []string `protobuf:"bytes,10,rep,name=audience,json=aud,omitempty,proto3" json:"audience,omitempty"`
	// Is the client that requested the token.
	Client string `protobuf:"bytes,11,opt,name=client,json=client_id,omitempty,proto3" json:"client,omitempty"`
}

func (x *StandardTokenClaims) Reset() {
	*x = StandardTokenClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardTokenClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardTokenClaims) ProtoMessage() {}

func (x *StandardTokenClaims) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardTokenClaims.ProtoReflect.Descriptor instead.
func (*StandardTokenClaims) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{9}
}

func (x *StandardTokenClaims) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *StandardTokenClaims) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StandardTokenClaims) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *StandardTokenClaims) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *StandardTokenClaims) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *StandardTokenClaims) GetRevokedAt() int64 {
	if x != nil {
		return x.RevokedAt
	}
	return 0
}

func (x *StandardTokenClaims) GetNotBefore() int64 {
	if x != nil {
		return x.NotBefore
	}
	return 0
}

func (x *StandardTokenClaims) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *StandardTokenClaims) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *StandardTokenClaims) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *StandardTokenClaims) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

// IntrospectKeyTypeTokenRequest is a request used to introspect a user defined payload.
type IntrospectKeyTypeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId string `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *IntrospectKeyTypeTokenRequest) Reset() {
	*x = IntrospectKeyTypeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectKeyTypeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectKeyTypeTokenRequest) ProtoMessage() {}

func (x *IntrospectKeyTypeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectKeyTypeTokenRequest.ProtoReflect.Descriptor instead.
func (*IntrospectKeyTypeTokenRequest) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{10}
}

func (x *IntrospectKeyTypeTokenRequest) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

func (x *IntrospectKeyTypeTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// IntrospectKeyTypeTokenResponse is a response used to introspect a user defined payload.
type IntrospectKeyTypeTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId     string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	JsonPayload []byte `protobuf:"bytes,2,opt,name=json_payload,json=jsonPayload,proto3" json:"json_payload,omitempty"`
	Active      bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ExpiresAt   int64  `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	IssuedAt    int64  `protobuf:"varint,5,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	Issuer      string `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *IntrospectKeyTypeTokenResponse) Reset() {
	*x = IntrospectKeyTypeTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectKeyTypeTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectKeyTypeTokenResponse) ProtoMessage() {}

func (x *IntrospectKeyTypeTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectKeyTypeTokenResponse.ProtoReflect.Descriptor instead.
func (*IntrospectKeyTypeTokenResponse) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{11}
}

func (x *IntrospectKeyTypeTokenResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *IntrospectKeyTypeTokenResponse) GetJsonPayload() []byte {
	if x != nil {
		return x.JsonPayload
	}
	return nil
}

func (x *IntrospectKeyTypeTokenResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *IntrospectKeyTypeTokenResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *IntrospectKeyTypeTokenResponse) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *IntrospectKeyTypeTokenResponse) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type IssueTokenRequest_AccessTokenOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional signing algorithm  on the access token creation.
	Algorithm signalgpb.SigningAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=blocky.authz.type.SigningAlgorithm" json:"algorithm,omitempty"`
	// An optional 'kid' - key revision unique identifier - to use for signing the access token.
	// If not provided, the highest priority or default per instance key will be used.
	Kid string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	// An optional set of custom claims to be added to the access token.
	// These claims needs to be encoded as a valid JSON object.
	// All the standard fields will override custom claim keys with the same key.
	Claims string `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (x *IssueTokenRequest_AccessTokenOptions) Reset() {
	*x = IssueTokenRequest_AccessTokenOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTokenRequest_AccessTokenOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTokenRequest_AccessTokenOptions) ProtoMessage() {}

func (x *IssueTokenRequest_AccessTokenOptions) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTokenRequest_AccessTokenOptions.ProtoReflect.Descriptor instead.
func (*IssueTokenRequest_AccessTokenOptions) Descriptor() ([]byte, []int) {
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IssueTokenRequest_AccessTokenOptions) GetAlgorithm() signalgpb.SigningAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return signalgpb.SigningAlgorithm(0)
}

func (x *IssueTokenRequest_AccessTokenOptions) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *IssueTokenRequest_AccessTokenOptions) GetClaims() string {
	if x != nil {
		return x.Claims
	}
	return ""
}

var File_blocky_authz_unsafe_v1alpha_token_proto protoreflect.FileDescriptor

var file_blocky_authz_unsafe_v1alpha_token_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x75,
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x29, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x02, 0x0a, 0x13, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x69, 0x61, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x01, 0xfa, 0x41,
	0x1f, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x14, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xac, 0x04, 0x0a, 0x11,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x43, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x69, 0x61, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xaf, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x46, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x33, 0x0a,
	0x16, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x75, 0x6e,
	0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x7a, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x31, 0x0a, 0x14, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x19,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x98, 0x03, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x74, 0x69, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x61,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0a, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6e, 0x62,
	0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x55, 0x0a, 0x1d, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xca, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x32, 0xcc,
	0x04, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x73, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e,
	0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x36, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x75,
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x7c, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x90, 0x02,
	0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x42, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2f, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x3b, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x42, 0x41, 0x55, 0xaa, 0x02, 0x1b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x1b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x27, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x41,
	0x75, 0x74, 0x68, 0x7a, 0x5c, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x3a,
	0x3a, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocky_authz_unsafe_v1alpha_token_proto_rawDescOnce sync.Once
	file_blocky_authz_unsafe_v1alpha_token_proto_rawDescData = file_blocky_authz_unsafe_v1alpha_token_proto_rawDesc
)

func file_blocky_authz_unsafe_v1alpha_token_proto_rawDescGZIP() []byte {
	file_blocky_authz_unsafe_v1alpha_token_proto_rawDescOnce.Do(func() {
		file_blocky_authz_unsafe_v1alpha_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocky_authz_unsafe_v1alpha_token_proto_rawDescData)
	})
	return file_blocky_authz_unsafe_v1alpha_token_proto_rawDescData
}

var file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_blocky_authz_unsafe_v1alpha_token_proto_goTypes = []interface{}{
	(*IssueIDTokenRequest)(nil),                  // 0: blocky.authz.unsafe.v1alpha.IssueIDTokenRequest
	(*IssueIDTokenResponse)(nil),                 // 1: blocky.authz.unsafe.v1alpha.IssueIDTokenResponse
	(*IssueTokenRequest)(nil),                    // 2: blocky.authz.unsafe.v1alpha.IssueTokenRequest
	(*IssueTokenResponse)(nil),                   // 3: blocky.authz.unsafe.v1alpha.IssueTokenResponse
	(*IntrospectTokenRequest)(nil),               // 4: blocky.authz.unsafe.v1alpha.IntrospectTokenRequest
	(*IntrospectTokenResponse)(nil),              // 5: blocky.authz.unsafe.v1alpha.IntrospectTokenResponse
	(*RefreshTokenRequest)(nil),                  // 6: blocky.authz.unsafe.v1alpha.RefreshTokenRequest
	(*RefreshTokenResponse)(nil),                 // 7: blocky.authz.unsafe.v1alpha.RefreshTokenResponse
	(*RevokeRefreshTokenRequest)(nil),            // 8: blocky.authz.unsafe.v1alpha.RevokeRefreshTokenRequest
	(*StandardTokenClaims)(nil),                  // 9: blocky.authz.unsafe.v1alpha.StandardTokenClaims
	(*IntrospectKeyTypeTokenRequest)(nil),        // 10: blocky.authz.unsafe.v1alpha.IntrospectKeyTypeTokenRequest
	(*IntrospectKeyTypeTokenResponse)(nil),       // 11: blocky.authz.unsafe.v1alpha.IntrospectKeyTypeTokenResponse
	(*IssueTokenRequest_AccessTokenOptions)(nil), // 12: blocky.authz.unsafe.v1alpha.IssueTokenRequest.AccessTokenOptions
	(signalgpb.SigningAlgorithm)(0),              // 13: blocky.authz.type.SigningAlgorithm
	(*emptypb.Empty)(nil),                        // 14: google.protobuf.Empty
}
var file_blocky_authz_unsafe_v1alpha_token_proto_depIdxs = []int32{
	13, // 0: blocky.authz.unsafe.v1alpha.IssueIDTokenRequest.algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	13, // 1: blocky.authz.unsafe.v1alpha.IssueTokenRequest.algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	9,  // 2: blocky.authz.unsafe.v1alpha.IntrospectTokenResponse.claims:type_name -> blocky.authz.unsafe.v1alpha.StandardTokenClaims
	13, // 3: blocky.authz.unsafe.v1alpha.IssueTokenRequest.AccessTokenOptions.algorithm:type_name -> blocky.authz.type.SigningAlgorithm
	0,  // 4: blocky.authz.unsafe.v1alpha.TokensService.IssueIDToken:input_type -> blocky.authz.unsafe.v1alpha.IssueIDTokenRequest
	2,  // 5: blocky.authz.unsafe.v1alpha.TokensService.IssueToken:input_type -> blocky.authz.unsafe.v1alpha.IssueTokenRequest
	6,  // 6: blocky.authz.unsafe.v1alpha.TokensService.RefreshToken:input_type -> blocky.authz.unsafe.v1alpha.RefreshTokenRequest
	8,  // 7: blocky.authz.unsafe.v1alpha.TokensService.RevokeRefreshToken:input_type -> blocky.authz.unsafe.v1alpha.RevokeRefreshTokenRequest
	4,  // 8: blocky.authz.unsafe.v1alpha.TokensService.IntrospectToken:input_type -> blocky.authz.unsafe.v1alpha.IntrospectTokenRequest
	1,  // 9: blocky.authz.unsafe.v1alpha.TokensService.IssueIDToken:output_type -> blocky.authz.unsafe.v1alpha.IssueIDTokenResponse
	3,  // 10: blocky.authz.unsafe.v1alpha.TokensService.IssueToken:output_type -> blocky.authz.unsafe.v1alpha.IssueTokenResponse
	7,  // 11: blocky.authz.unsafe.v1alpha.TokensService.RefreshToken:output_type -> blocky.authz.unsafe.v1alpha.RefreshTokenResponse
	14, // 12: blocky.authz.unsafe.v1alpha.TokensService.RevokeRefreshToken:output_type -> google.protobuf.Empty
	5,  // 13: blocky.authz.unsafe.v1alpha.TokensService.IntrospectToken:output_type -> blocky.authz.unsafe.v1alpha.IntrospectTokenResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_blocky_authz_unsafe_v1alpha_token_proto_init() }
func file_blocky_authz_unsafe_v1alpha_token_proto_init() {
	if File_blocky_authz_unsafe_v1alpha_token_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueIDTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueIDTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrospectTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrospectTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeRefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardTokenClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrospectKeyTypeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrospectKeyTypeTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTokenRequest_AccessTokenOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocky_authz_unsafe_v1alpha_token_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blocky_authz_unsafe_v1alpha_token_proto_goTypes,
		DependencyIndexes: file_blocky_authz_unsafe_v1alpha_token_proto_depIdxs,
		MessageInfos:      file_blocky_authz_unsafe_v1alpha_token_proto_msgTypes,
	}.Build()
	File_blocky_authz_unsafe_v1alpha_token_proto = out.File
	file_blocky_authz_unsafe_v1alpha_token_proto_rawDesc = nil
	file_blocky_authz_unsafe_v1alpha_token_proto_goTypes = nil
	file_blocky_authz_unsafe_v1alpha_token_proto_depIdxs = nil
}
