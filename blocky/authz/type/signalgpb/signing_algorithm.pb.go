// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blocky/authz/type/signing_algorithm.proto

package signalgpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyAlgorithm is an algorithm used to sign and verify JSON Web Tokens (JWT) as defined in RFC 7518.
type SigningAlgorithm int32

const (
	// Unspecified algorithm.
	SigningAlgorithm_SIGNING_ALGORITHM_UNSPECIFIED SigningAlgorithm = 0
	// Defines No digital signature
	SigningAlgorithm_NONE SigningAlgorithm = 1
	// Defines HMAC SHA-256 signing algorithm.
	SigningAlgorithm_HS256 SigningAlgorithm = 2
	// Defines HMAC SHA-384 signing algorithm.
	SigningAlgorithm_HS384 SigningAlgorithm = 3
	// Defines HMAC SHA-512 signing algorithm.
	SigningAlgorithm_HS512 SigningAlgorithm = 4
	// Defines RSA PKCS1 v1.5 signing algorithm.
	SigningAlgorithm_RS256 SigningAlgorithm = 5
	// Defines RSA PSS signing algorithm with SHA-384 hash.
	SigningAlgorithm_RS384 SigningAlgorithm = 6
	// Defines RSA PSS signing algorithm with SHA-512 hash.
	SigningAlgorithm_RS512 SigningAlgorithm = 7
	// Defines Elliptic Curve signing algorithm with P-256 curve SHA-256 hash.
	SigningAlgorithm_ES256 SigningAlgorithm = 8
	// Defines Elliptic Curve signing algorithm with P-384 curve SHA-384 hash.
	SigningAlgorithm_ES384 SigningAlgorithm = 9
	// Defines Elliptic Curve signing algorithm with P-521 curve SHA-512 hash.
	SigningAlgorithm_ES512 SigningAlgorithm = 10
	// Defines RSASSA-PSS signing algorithm with SHA-256 hash.
	SigningAlgorithm_PS256 SigningAlgorithm = 11
	// Defines RSASSA-PSS signing algorithm with SHA-384 hash.
	SigningAlgorithm_PS384 SigningAlgorithm = 12
	// Defines RSASSA-PSS signing algorithm with SHA-512 hash.
	SigningAlgorithm_PS512 SigningAlgorithm = 13
	// Defines EdDSA - Edwards-Curve Digital Signature Algorithm  (Ed25519) signing algorithm.
	SigningAlgorithm_EdDSA SigningAlgorithm = 14
)

// Enum value maps for SigningAlgorithm.
var (
	SigningAlgorithm_name = map[int32]string{
		0:  "SIGNING_ALGORITHM_UNSPECIFIED",
		1:  "NONE",
		2:  "HS256",
		3:  "HS384",
		4:  "HS512",
		5:  "RS256",
		6:  "RS384",
		7:  "RS512",
		8:  "ES256",
		9:  "ES384",
		10: "ES512",
		11: "PS256",
		12: "PS384",
		13: "PS512",
		14: "EdDSA",
	}
	SigningAlgorithm_value = map[string]int32{
		"SIGNING_ALGORITHM_UNSPECIFIED": 0,
		"NONE":                          1,
		"HS256":                         2,
		"HS384":                         3,
		"HS512":                         4,
		"RS256":                         5,
		"RS384":                         6,
		"RS512":                         7,
		"ES256":                         8,
		"ES384":                         9,
		"ES512":                         10,
		"PS256":                         11,
		"PS384":                         12,
		"PS512":                         13,
		"EdDSA":                         14,
	}
)

func (x SigningAlgorithm) Enum() *SigningAlgorithm {
	p := new(SigningAlgorithm)
	*p = x
	return p
}

func (x SigningAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_blocky_authz_type_signing_algorithm_proto_enumTypes[0].Descriptor()
}

func (SigningAlgorithm) Type() protoreflect.EnumType {
	return &file_blocky_authz_type_signing_algorithm_proto_enumTypes[0]
}

func (x SigningAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningAlgorithm.Descriptor instead.
func (SigningAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_blocky_authz_type_signing_algorithm_proto_rawDescGZIP(), []int{0}
}

var File_blocky_authz_type_signing_algorithm_proto protoreflect.FileDescriptor

var file_blocky_authz_type_signing_algorithm_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2a, 0xce,
	0x01, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x53, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x53, 0x33, 0x38, 0x34, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x53, 0x35, 0x31, 0x32, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x53, 0x32, 0x35, 0x36, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x53, 0x33, 0x38, 0x34, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x53, 0x35, 0x31, 0x32,
	0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x53, 0x33, 0x38, 0x34, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x53, 0x35, 0x31,
	0x32, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x53, 0x32, 0x35, 0x36, 0x10, 0x0b, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x53, 0x33, 0x38, 0x34, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x53, 0x35,
	0x31, 0x32, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0x10, 0x0e, 0x42,
	0xe0, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x67, 0x70, 0x62, 0x3b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x67, 0x70, 0x62, 0x3b, 0xa2, 0x02,
	0x03, 0x42, 0x41, 0x54, 0xaa, 0x02, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x54, 0x79, 0x70, 0x65, 0xca, 0x02, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x54, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x1d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x54, 0x79, 0x70, 0x65,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x3a, 0x3a, 0x54, 0x79,
	0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocky_authz_type_signing_algorithm_proto_rawDescOnce sync.Once
	file_blocky_authz_type_signing_algorithm_proto_rawDescData = file_blocky_authz_type_signing_algorithm_proto_rawDesc
)

func file_blocky_authz_type_signing_algorithm_proto_rawDescGZIP() []byte {
	file_blocky_authz_type_signing_algorithm_proto_rawDescOnce.Do(func() {
		file_blocky_authz_type_signing_algorithm_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocky_authz_type_signing_algorithm_proto_rawDescData)
	})
	return file_blocky_authz_type_signing_algorithm_proto_rawDescData
}

var file_blocky_authz_type_signing_algorithm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_blocky_authz_type_signing_algorithm_proto_goTypes = []interface{}{
	(SigningAlgorithm)(0), // 0: blocky.authz.type.SigningAlgorithm
}
var file_blocky_authz_type_signing_algorithm_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_blocky_authz_type_signing_algorithm_proto_init() }
func file_blocky_authz_type_signing_algorithm_proto_init() {
	if File_blocky_authz_type_signing_algorithm_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocky_authz_type_signing_algorithm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blocky_authz_type_signing_algorithm_proto_goTypes,
		DependencyIndexes: file_blocky_authz_type_signing_algorithm_proto_depIdxs,
		EnumInfos:         file_blocky_authz_type_signing_algorithm_proto_enumTypes,
	}.Build()
	File_blocky_authz_type_signing_algorithm_proto = out.File
	file_blocky_authz_type_signing_algorithm_proto_rawDesc = nil
	file_blocky_authz_type_signing_algorithm_proto_goTypes = nil
	file_blocky_authz_type_signing_algorithm_proto_depIdxs = nil
}
