// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blocky/kms/crypto/encrypted_content.proto

package cryptopb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncryptedContent_Header_CompressionAlgorithm int32

const (
	// COMPRESSION_ALGORITHM_UNSPECIFIED is the default value.
	EncryptedContent_Header_COMPRESSION_ALGORITHM_UNSPECIFIED EncryptedContent_Header_CompressionAlgorithm = 0
	// GZIP is the gzip compression algorithm.
	EncryptedContent_Header_GZIP EncryptedContent_Header_CompressionAlgorithm = 1
	// FLATE is the flate compression algorithm.
	EncryptedContent_Header_FLATE EncryptedContent_Header_CompressionAlgorithm = 2
)

// Enum value maps for EncryptedContent_Header_CompressionAlgorithm.
var (
	EncryptedContent_Header_CompressionAlgorithm_name = map[int32]string{
		0: "COMPRESSION_ALGORITHM_UNSPECIFIED",
		1: "GZIP",
		2: "FLATE",
	}
	EncryptedContent_Header_CompressionAlgorithm_value = map[string]int32{
		"COMPRESSION_ALGORITHM_UNSPECIFIED": 0,
		"GZIP":                              1,
		"FLATE":                             2,
	}
)

func (x EncryptedContent_Header_CompressionAlgorithm) Enum() *EncryptedContent_Header_CompressionAlgorithm {
	p := new(EncryptedContent_Header_CompressionAlgorithm)
	*p = x
	return p
}

func (x EncryptedContent_Header_CompressionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptedContent_Header_CompressionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_blocky_kms_crypto_encrypted_content_proto_enumTypes[0].Descriptor()
}

func (EncryptedContent_Header_CompressionAlgorithm) Type() protoreflect.EnumType {
	return &file_blocky_kms_crypto_encrypted_content_proto_enumTypes[0]
}

func (x EncryptedContent_Header_CompressionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptedContent_Header_CompressionAlgorithm.Descriptor instead.
func (EncryptedContent_Header_CompressionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_blocky_kms_crypto_encrypted_content_proto_rawDescGZIP(), []int{0, 0, 0}
}

// EncryptedContent is the content securely encrypted using encryption algorithms.
type EncryptedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header is the header of the encrypted content.
	Header *EncryptedContent_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Encrypted Key is the encrypted key.
	EncryptedKey []byte `protobuf:"bytes,2,opt,name=encrypted_key,json=encryptedKey,proto3" json:"encrypted_key,omitempty"`
	// Initialization vector is the initialization vector used to encrypt the content.
	Iv []byte `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
	// Cipher text is the encrypted content.
	CipherText []byte `protobuf:"bytes,4,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
	// Authentication tag is the authentication tag used to verify the integrity of the content.
	AuthenticationTag []byte `protobuf:"bytes,5,opt,name=authentication_tag,json=authenticationTag,proto3" json:"authentication_tag,omitempty"`
}

func (x *EncryptedContent) Reset() {
	*x = EncryptedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_crypto_encrypted_content_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedContent) ProtoMessage() {}

func (x *EncryptedContent) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_crypto_encrypted_content_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedContent.ProtoReflect.Descriptor instead.
func (*EncryptedContent) Descriptor() ([]byte, []int) {
	return file_blocky_kms_crypto_encrypted_content_proto_rawDescGZIP(), []int{0}
}

func (x *EncryptedContent) GetHeader() *EncryptedContent_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EncryptedContent) GetEncryptedKey() []byte {
	if x != nil {
		return x.EncryptedKey
	}
	return nil
}

func (x *EncryptedContent) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *EncryptedContent) GetCipherText() []byte {
	if x != nil {
		return x.CipherText
	}
	return nil
}

func (x *EncryptedContent) GetAuthenticationTag() []byte {
	if x != nil {
		return x.AuthenticationTag
	}
	return nil
}

// Header is the header of the encrypted content.
type EncryptedContent_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Algorithm is the algorithm used to as the key management algorithm.
	Algorithm KeyManagementAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=blocky.kms.crypto.KeyManagementAlgorithm" json:"algorithm,omitempty"`
	// Encryption algorithm is the algorithm used to encrypt the content.
	EncryptionAlgorithm EncryptionAlgorithm `protobuf:"varint,2,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3,enum=blocky.kms.crypto.EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	// Key identifier is the identifier of the key used to sign the content.
	// This is not a full resource name, but just a key identifier.
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Key material used to encrypt the content.
	// This is not a full resource name, but just a key identifier.
	MaterialId string `protobuf:"bytes,4,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	// Compression algorithm is the algorithm used to compress the content.
	CompressionAlgorithm EncryptedContent_Header_CompressionAlgorithm `protobuf:"varint,5,opt,name=compression_algorithm,json=compressionAlgorithm,proto3,enum=blocky.kms.crypto.EncryptedContent_Header_CompressionAlgorithm" json:"compression_algorithm,omitempty"`
	// Metadata is the metadata of the signature.
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EncryptedContent_Header) Reset() {
	*x = EncryptedContent_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_crypto_encrypted_content_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedContent_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedContent_Header) ProtoMessage() {}

func (x *EncryptedContent_Header) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_crypto_encrypted_content_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedContent_Header.ProtoReflect.Descriptor instead.
func (*EncryptedContent_Header) Descriptor() ([]byte, []int) {
	return file_blocky_kms_crypto_encrypted_content_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EncryptedContent_Header) GetAlgorithm() KeyManagementAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return KeyManagementAlgorithm_KEY_MANAGEMENT_ALGORITHM_UNSPECIFIED
}

func (x *EncryptedContent_Header) GetEncryptionAlgorithm() EncryptionAlgorithm {
	if x != nil {
		return x.EncryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_UNSPECIFIED
}

func (x *EncryptedContent_Header) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *EncryptedContent_Header) GetMaterialId() string {
	if x != nil {
		return x.MaterialId
	}
	return ""
}

func (x *EncryptedContent_Header) GetCompressionAlgorithm() EncryptedContent_Header_CompressionAlgorithm {
	if x != nil {
		return x.CompressionAlgorithm
	}
	return EncryptedContent_Header_COMPRESSION_ALGORITHM_UNSPECIFIED
}

func (x *EncryptedContent_Header) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_blocky_kms_crypto_encrypted_content_proto protoreflect.FileDescriptor

var file_blocky_kms_crypto_encrypted_content_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x1a, 0x21,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x07,
	0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x76, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x1a, 0x97, 0x05, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x5e, 0x0a,
	0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x32, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa,
	0x41, 0x18, 0x0a, 0x16, 0x6b, 0x6d, 0x73, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6b, 0x6d, 0x73,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4b, 0x65, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x79, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49,
	0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0xd6,
	0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x42, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6b, 0x6d,
	0x73, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x70, 0x62, 0x3b, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x42, 0x4b, 0x43, 0xaa, 0x02, 0x11, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x2e, 0x4b, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0xca, 0x02, 0x11,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x4b, 0x6d, 0x73, 0x5c, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0xe2, 0x02, 0x1d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x4b, 0x6d, 0x73, 0x5c, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x3a, 0x3a, 0x4b, 0x6d, 0x73, 0x3a,
	0x3a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocky_kms_crypto_encrypted_content_proto_rawDescOnce sync.Once
	file_blocky_kms_crypto_encrypted_content_proto_rawDescData = file_blocky_kms_crypto_encrypted_content_proto_rawDesc
)

func file_blocky_kms_crypto_encrypted_content_proto_rawDescGZIP() []byte {
	file_blocky_kms_crypto_encrypted_content_proto_rawDescOnce.Do(func() {
		file_blocky_kms_crypto_encrypted_content_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocky_kms_crypto_encrypted_content_proto_rawDescData)
	})
	return file_blocky_kms_crypto_encrypted_content_proto_rawDescData
}

var file_blocky_kms_crypto_encrypted_content_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_blocky_kms_crypto_encrypted_content_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_blocky_kms_crypto_encrypted_content_proto_goTypes = []interface{}{
	(EncryptedContent_Header_CompressionAlgorithm)(0), // 0: blocky.kms.crypto.EncryptedContent.Header.CompressionAlgorithm
	(*EncryptedContent)(nil),                          // 1: blocky.kms.crypto.EncryptedContent
	(*EncryptedContent_Header)(nil),                   // 2: blocky.kms.crypto.EncryptedContent.Header
	nil,                                               // 3: blocky.kms.crypto.EncryptedContent.Header.MetadataEntry
	(KeyManagementAlgorithm)(0),                       // 4: blocky.kms.crypto.KeyManagementAlgorithm
	(EncryptionAlgorithm)(0),                          // 5: blocky.kms.crypto.EncryptionAlgorithm
}
var file_blocky_kms_crypto_encrypted_content_proto_depIdxs = []int32{
	2, // 0: blocky.kms.crypto.EncryptedContent.header:type_name -> blocky.kms.crypto.EncryptedContent.Header
	4, // 1: blocky.kms.crypto.EncryptedContent.Header.algorithm:type_name -> blocky.kms.crypto.KeyManagementAlgorithm
	5, // 2: blocky.kms.crypto.EncryptedContent.Header.encryption_algorithm:type_name -> blocky.kms.crypto.EncryptionAlgorithm
	0, // 3: blocky.kms.crypto.EncryptedContent.Header.compression_algorithm:type_name -> blocky.kms.crypto.EncryptedContent.Header.CompressionAlgorithm
	3, // 4: blocky.kms.crypto.EncryptedContent.Header.metadata:type_name -> blocky.kms.crypto.EncryptedContent.Header.MetadataEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_blocky_kms_crypto_encrypted_content_proto_init() }
func file_blocky_kms_crypto_encrypted_content_proto_init() {
	if File_blocky_kms_crypto_encrypted_content_proto != nil {
		return
	}
	file_blocky_kms_crypto_algorithm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blocky_kms_crypto_encrypted_content_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_crypto_encrypted_content_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedContent_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocky_kms_crypto_encrypted_content_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blocky_kms_crypto_encrypted_content_proto_goTypes,
		DependencyIndexes: file_blocky_kms_crypto_encrypted_content_proto_depIdxs,
		EnumInfos:         file_blocky_kms_crypto_encrypted_content_proto_enumTypes,
		MessageInfos:      file_blocky_kms_crypto_encrypted_content_proto_msgTypes,
	}.Build()
	File_blocky_kms_crypto_encrypted_content_proto = out.File
	file_blocky_kms_crypto_encrypted_content_proto_rawDesc = nil
	file_blocky_kms_crypto_encrypted_content_proto_goTypes = nil
	file_blocky_kms_crypto_encrypted_content_proto_depIdxs = nil
}
