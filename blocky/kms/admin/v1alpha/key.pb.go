// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blocky/kms/admin/v1alpha/key.proto

package adminpb

import (
	cryptopb "github.com/blockysource/go-genproto/blocky/kms/cryptopb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyUse is an algorithm used to generate and verify JSON Web Keys (JWK) as defined in RFC 7518.
type KeyUse int32

const (
	// Unspecified key use.
	KeyUse_KEY_USE_UNSPECIFIED KeyUse = 0
	// Indicates that the key is used for signing.
	KeyUse_SIGN_VERIFY KeyUse = 1
	// Indicates that the key is used for encryption.
	KeyUse_ENCRYPT_DECRYPT KeyUse = 2
	// Indicates that the key is used for both signing and encryption.
	KeyUse_SIGN_ENCRYPT_DECRYPT KeyUse = 3
)

// Enum value maps for KeyUse.
var (
	KeyUse_name = map[int32]string{
		0: "KEY_USE_UNSPECIFIED",
		1: "SIGN_VERIFY",
		2: "ENCRYPT_DECRYPT",
		3: "SIGN_ENCRYPT_DECRYPT",
	}
	KeyUse_value = map[string]int32{
		"KEY_USE_UNSPECIFIED":  0,
		"SIGN_VERIFY":          1,
		"ENCRYPT_DECRYPT":      2,
		"SIGN_ENCRYPT_DECRYPT": 3,
	}
)

func (x KeyUse) Enum() *KeyUse {
	p := new(KeyUse)
	*p = x
	return p
}

func (x KeyUse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyUse) Descriptor() protoreflect.EnumDescriptor {
	return file_blocky_kms_admin_v1alpha_key_proto_enumTypes[0].Descriptor()
}

func (KeyUse) Type() protoreflect.EnumType {
	return &file_blocky_kms_admin_v1alpha_key_proto_enumTypes[0]
}

func (x KeyUse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyUse.Descriptor instead.
func (KeyUse) EnumDescriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{0}
}

// The operations that the key can be used for.
type KeyOperations int32

const (
	// Default value. This value is unused.
	KeyOperations_KEY_OPERATIONS_UNSPECIFIED KeyOperations = 0
	// The key can be used for signing operations.
	KeyOperations_SIGN KeyOperations = 1
	// The key can be used for verifying operations.
	KeyOperations_VERIFY KeyOperations = 2
	// The key can be used for encrypting operations.
	KeyOperations_ENCRYPT KeyOperations = 3
	// The key can be used for decrypting operations.
	KeyOperations_DECRYPT KeyOperations = 4
	// The key can be used for wrapping operations.
	KeyOperations_WRAP KeyOperations = 5
	// The key can be used for unwrapping operations.
	KeyOperations_UNWRAP KeyOperations = 6
	// The key can be used for deriving operations.
	KeyOperations_DERIVE_KEY KeyOperations = 7
	// The key can be used for deriving operations.
	KeyOperations_DERIVE_BITS KeyOperations = 8
)

// Enum value maps for KeyOperations.
var (
	KeyOperations_name = map[int32]string{
		0: "KEY_OPERATIONS_UNSPECIFIED",
		1: "SIGN",
		2: "VERIFY",
		3: "ENCRYPT",
		4: "DECRYPT",
		5: "WRAP",
		6: "UNWRAP",
		7: "DERIVE_KEY",
		8: "DERIVE_BITS",
	}
	KeyOperations_value = map[string]int32{
		"KEY_OPERATIONS_UNSPECIFIED": 0,
		"SIGN":                       1,
		"VERIFY":                     2,
		"ENCRYPT":                    3,
		"DECRYPT":                    4,
		"WRAP":                       5,
		"UNWRAP":                     6,
		"DERIVE_KEY":                 7,
		"DERIVE_BITS":                8,
	}
)

func (x KeyOperations) Enum() *KeyOperations {
	p := new(KeyOperations)
	*p = x
	return p
}

func (x KeyOperations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyOperations) Descriptor() protoreflect.EnumDescriptor {
	return file_blocky_kms_admin_v1alpha_key_proto_enumTypes[1].Descriptor()
}

func (KeyOperations) Type() protoreflect.EnumType {
	return &file_blocky_kms_admin_v1alpha_key_proto_enumTypes[1]
}

func (x KeyOperations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyOperations.Descriptor instead.
func (KeyOperations) EnumDescriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{1}
}

// Key represents a cryptographic key.
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the Key.
	// The format of the key resource name:
	// `projects/*/keys/*`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The unique server-generated UUID identifier for the key.
	// It could be used as the key identifier in its resource name.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// The aliases that can be used to refer to the key.
	// The full path of the alias is:
	// 'projects/{project}/keys/{key_alias}'
	// Any modification of aliases needs to be done via the KeyAdminService API.
	Aliases []string `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// The key algorithm type
	AlgorithmType cryptopb.KeyAlgorithmType `protobuf:"varint,4,opt,name=algorithm_type,json=algorithmType,proto3,enum=blocky.kms.crypto.KeyAlgorithmType" json:"algorithm_type,omitempty"`
	// The parameters used to generate the key material.
	//
	// Types that are assignable to AlgorithmParameters:
	//
	//	*Key_RsaKeyParameters
	//	*Key_EllipticCurveKeyParameters
	//	*Key_OkpKeyParameters
	//	*Key_OctetKeyParameters
	AlgorithmParameters isKey_AlgorithmParameters `protobuf_oneof:"algorithm_parameters"`
	// Supported signing algorithms of the key.
	SigningAlgorithms []cryptopb.SignatureAlgorithm `protobuf:"varint,9,rep,packed,name=signing_algorithms,json=signingAlgorithms,proto3,enum=blocky.kms.crypto.SignatureAlgorithm" json:"signing_algorithms,omitempty"`
	// Supported encryption algorithms of the key.
	EncryptionAlgorithms []cryptopb.EncryptionAlgorithm `protobuf:"varint,10,rep,packed,name=encryption_algorithms,json=encryptionAlgorithms,proto3,enum=blocky.kms.crypto.EncryptionAlgorithm" json:"encryption_algorithms,omitempty"`
	// The display name of the key.
	DisplayName string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Time when the key was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the key was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Time when the key was last rotated.
	LastRotatedTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=last_rotated_time,json=lastRotatedTime,proto3" json:"last_rotated_time,omitempty"`
	// Rotation interval of the material derived from this key.
	// If not provided, the key will not be rotated automatically.
	RotationInterval *durationpb.Duration `protobuf:"bytes,15,opt,name=rotation_interval,json=rotationInterval,proto3" json:"rotation_interval,omitempty"`
	// Determines if a key is protected against accidental deletion.
	// If not provided, the key will not be protected.
	DestroyProtection bool `protobuf:"varint,16,opt,name=destroy_protection,json=destroyProtection,proto3" json:"destroy_protection,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{0}
}

func (x *Key) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Key) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Key) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Key) GetAlgorithmType() cryptopb.KeyAlgorithmType {
	if x != nil {
		return x.AlgorithmType
	}
	return cryptopb.KeyAlgorithmType(0)
}

func (m *Key) GetAlgorithmParameters() isKey_AlgorithmParameters {
	if m != nil {
		return m.AlgorithmParameters
	}
	return nil
}

func (x *Key) GetRsaKeyParameters() *RSAKeyParameters {
	if x, ok := x.GetAlgorithmParameters().(*Key_RsaKeyParameters); ok {
		return x.RsaKeyParameters
	}
	return nil
}

func (x *Key) GetEllipticCurveKeyParameters() *EllipticCurveKeyParameters {
	if x, ok := x.GetAlgorithmParameters().(*Key_EllipticCurveKeyParameters); ok {
		return x.EllipticCurveKeyParameters
	}
	return nil
}

func (x *Key) GetOkpKeyParameters() *OkpKeyParameters {
	if x, ok := x.GetAlgorithmParameters().(*Key_OkpKeyParameters); ok {
		return x.OkpKeyParameters
	}
	return nil
}

func (x *Key) GetOctetKeyParameters() *OctetKeyParameters {
	if x, ok := x.GetAlgorithmParameters().(*Key_OctetKeyParameters); ok {
		return x.OctetKeyParameters
	}
	return nil
}

func (x *Key) GetSigningAlgorithms() []cryptopb.SignatureAlgorithm {
	if x != nil {
		return x.SigningAlgorithms
	}
	return nil
}

func (x *Key) GetEncryptionAlgorithms() []cryptopb.EncryptionAlgorithm {
	if x != nil {
		return x.EncryptionAlgorithms
	}
	return nil
}

func (x *Key) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Key) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Key) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Key) GetLastRotatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRotatedTime
	}
	return nil
}

func (x *Key) GetRotationInterval() *durationpb.Duration {
	if x != nil {
		return x.RotationInterval
	}
	return nil
}

func (x *Key) GetDestroyProtection() bool {
	if x != nil {
		return x.DestroyProtection
	}
	return false
}

type isKey_AlgorithmParameters interface {
	isKey_AlgorithmParameters()
}

type Key_RsaKeyParameters struct {
	// The parameters used to generate the key material.
	RsaKeyParameters *RSAKeyParameters `protobuf:"bytes,5,opt,name=rsa_key_parameters,json=rsaKeyParameters,proto3,oneof"`
}

type Key_EllipticCurveKeyParameters struct {
	EllipticCurveKeyParameters *EllipticCurveKeyParameters `protobuf:"bytes,6,opt,name=elliptic_curve_key_parameters,json=ellipticCurveKeyParameters,proto3,oneof"`
}

type Key_OkpKeyParameters struct {
	OkpKeyParameters *OkpKeyParameters `protobuf:"bytes,7,opt,name=okp_key_parameters,json=okpKeyParameters,proto3,oneof"`
}

type Key_OctetKeyParameters struct {
	OctetKeyParameters *OctetKeyParameters `protobuf:"bytes,8,opt,name=octet_key_parameters,json=octetKeyParameters,proto3,oneof"`
}

func (*Key_RsaKeyParameters) isKey_AlgorithmParameters() {}

func (*Key_EllipticCurveKeyParameters) isKey_AlgorithmParameters() {}

func (*Key_OkpKeyParameters) isKey_AlgorithmParameters() {}

func (*Key_OctetKeyParameters) isKey_AlgorithmParameters() {}

// Is a cryptographic key material directly used for the cryptographic operations.
// The parameters of the material are derived from the key.
type KeyMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the key material.
	// The format of the key material resource name:
	// `projects/*/keys/*/materials/*`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Is a unique key material identifier assigned by the server.
	// I.e.: 'projects/{project}/keys/{key}/materials/{material}'
	MaterialId string `protobuf:"bytes,2,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	// The creation time of the key material.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Related key resource name.
	// I.e.: 'projects/{project}/keys/{key}'
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The resource name of the predecessor key material.
	// This is set only if the key material was rotated.
	Predecessor string `protobuf:"bytes,5,opt,name=predecessor,proto3" json:"predecessor,omitempty"`
}

func (x *KeyMaterial) Reset() {
	*x = KeyMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMaterial) ProtoMessage() {}

func (x *KeyMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMaterial.ProtoReflect.Descriptor instead.
func (*KeyMaterial) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{1}
}

func (x *KeyMaterial) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyMaterial) GetMaterialId() string {
	if x != nil {
		return x.MaterialId
	}
	return ""
}

func (x *KeyMaterial) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *KeyMaterial) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyMaterial) GetPredecessor() string {
	if x != nil {
		return x.Predecessor
	}
	return ""
}

// RSA key parameters.
type RSAKeyParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size of the RSA key in bits.
	// If not provided by default the key size will be 2048 bits.
	KeySize cryptopb.RSAKeySize `protobuf:"varint,1,opt,name=key_size,json=keySize,proto3,enum=blocky.kms.crypto.RSAKeySize" json:"key_size,omitempty"`
}

func (x *RSAKeyParameters) Reset() {
	*x = RSAKeyParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSAKeyParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSAKeyParameters) ProtoMessage() {}

func (x *RSAKeyParameters) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSAKeyParameters.ProtoReflect.Descriptor instead.
func (*RSAKeyParameters) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{2}
}

func (x *RSAKeyParameters) GetKeySize() cryptopb.RSAKeySize {
	if x != nil {
		return x.KeySize
	}
	return cryptopb.RSAKeySize(0)
}

// Elliptic curve based key parameters.
type EllipticCurveKeyParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The curve used for the ECDSA key.
	// If not provided by default the curve will be P256.
	Curve cryptopb.EllipticCurve `protobuf:"varint,1,opt,name=curve,proto3,enum=blocky.kms.crypto.EllipticCurve" json:"curve,omitempty"`
}

func (x *EllipticCurveKeyParameters) Reset() {
	*x = EllipticCurveKeyParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EllipticCurveKeyParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EllipticCurveKeyParameters) ProtoMessage() {}

func (x *EllipticCurveKeyParameters) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EllipticCurveKeyParameters.ProtoReflect.Descriptor instead.
func (*EllipticCurveKeyParameters) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{3}
}

func (x *EllipticCurveKeyParameters) GetCurve() cryptopb.EllipticCurve {
	if x != nil {
		return x.Curve
	}
	return cryptopb.EllipticCurve(0)
}

// Edwards curve based key parameters. (OKP)
type OkpKeyParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The curve used for the OKP key.
	// If not provided by default the curve will be ED25519.
	Curve cryptopb.OKPCurve `protobuf:"varint,1,opt,name=curve,proto3,enum=blocky.kms.crypto.OKPCurve" json:"curve,omitempty"`
}

func (x *OkpKeyParameters) Reset() {
	*x = OkpKeyParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkpKeyParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkpKeyParameters) ProtoMessage() {}

func (x *OkpKeyParameters) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkpKeyParameters.ProtoReflect.Descriptor instead.
func (*OkpKeyParameters) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{4}
}

func (x *OkpKeyParameters) GetCurve() cryptopb.OKPCurve {
	if x != nil {
		return x.Curve
	}
	return cryptopb.OKPCurve(0)
}

// HMAC key parameters.
type OctetKeyParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size of the HMAC key in bits.
	// The key size must be at least as long as the hash output length.
	// I.e.: for SHA256 the key size must be at least 256 bits (32 bytes).
	// If not provided the key size will be equal to the hash output length.
	// The maximum key size is 1024 bits (128 bytes).
	// If the key is not multiple of 8 bits, it will be padded with zeros to the
	// nearest multiple of 8 bits.
	// I.e. if the key size is 17 bytes, it will be padded to 24 bytes.
	// If the key size is not provided, the default (256 bits) will be used.
	KeySize int32 `protobuf:"varint,1,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
}

func (x *OctetKeyParameters) Reset() {
	*x = OctetKeyParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OctetKeyParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OctetKeyParameters) ProtoMessage() {}

func (x *OctetKeyParameters) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OctetKeyParameters.ProtoReflect.Descriptor instead.
func (*OctetKeyParameters) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{5}
}

func (x *OctetKeyParameters) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

// Describes the content of a key with details, that allows to use it for cryptographic operations.
// It contains not only cryptographic key metadata, but also the identifiers of the key and its material,
// which allows to match the content with the key and its material resource.
type KeyMaterialContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header of the crypto key.
	Header *KeyMaterialContent_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The key material.
	Material *cryptopb.KeyMaterial `protobuf:"bytes,2,opt,name=material,proto3" json:"material,omitempty"`
}

func (x *KeyMaterialContent) Reset() {
	*x = KeyMaterialContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMaterialContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMaterialContent) ProtoMessage() {}

func (x *KeyMaterialContent) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMaterialContent.ProtoReflect.Descriptor instead.
func (*KeyMaterialContent) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{6}
}

func (x *KeyMaterialContent) GetHeader() *KeyMaterialContent_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *KeyMaterialContent) GetMaterial() *cryptopb.KeyMaterial {
	if x != nil {
		return x.Material
	}
	return nil
}

// A header of the cryptography key. It contains necessary information to identify the key.
type KeyMaterialContent_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It identifies the cryptographic algorithm family used with the key.
	KeyAlgorithmType cryptopb.KeyAlgorithmType `protobuf:"varint,1,opt,name=key_algorithm_type,json=kty,proto3,enum=blocky.kms.crypto.KeyAlgorithmType" json:"key_algorithm_type,omitempty"`
	// Intended use of the key.
	KeyUse KeyUse `protobuf:"varint,2,opt,name=key_use,json=use,proto3,enum=blocky.kms.admin.v1alpha.KeyUse" json:"key_use,omitempty"`
	// The key can be used for the operations specified in this field.
	KeyOps []KeyOperations `protobuf:"varint,3,rep,packed,name=key_ops,proto3,enum=blocky.kms.admin.v1alpha.KeyOperations" json:"key_ops,omitempty"`
	// The algorithm intended for use with the key.
	SignatureAlgorithms []cryptopb.SignatureAlgorithm `protobuf:"varint,4,rep,packed,name=signature_algorithms,json=signatureAlgorithms,proto3,enum=blocky.kms.crypto.SignatureAlgorithm" json:"signature_algorithms,omitempty"`
	// The encryption key management algorithms intended for use with the key.
	KeyManagementAlgorithms []cryptopb.KeyManagementAlgorithm `protobuf:"varint,5,rep,packed,name=key_management_algorithms,json=keyManagementAlgorithms,proto3,enum=blocky.kms.crypto.KeyManagementAlgorithm" json:"key_management_algorithms,omitempty"`
	// The identifier for the key.
	KeyId string `protobuf:"bytes,6,opt,name=key_id,json=kid,proto3" json:"key_id,omitempty"`
	// The identifier of the key material.
	MaterialId string `protobuf:"bytes,7,opt,name=material_id,json=mid,proto3" json:"material_id,omitempty"`
}

func (x *KeyMaterialContent_Header) Reset() {
	*x = KeyMaterialContent_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMaterialContent_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMaterialContent_Header) ProtoMessage() {}

func (x *KeyMaterialContent_Header) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_kms_admin_v1alpha_key_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMaterialContent_Header.ProtoReflect.Descriptor instead.
func (*KeyMaterialContent_Header) Descriptor() ([]byte, []int) {
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP(), []int{6, 0}
}

func (x *KeyMaterialContent_Header) GetKeyAlgorithmType() cryptopb.KeyAlgorithmType {
	if x != nil {
		return x.KeyAlgorithmType
	}
	return cryptopb.KeyAlgorithmType(0)
}

func (x *KeyMaterialContent_Header) GetKeyUse() KeyUse {
	if x != nil {
		return x.KeyUse
	}
	return KeyUse_KEY_USE_UNSPECIFIED
}

func (x *KeyMaterialContent_Header) GetKeyOps() []KeyOperations {
	if x != nil {
		return x.KeyOps
	}
	return nil
}

func (x *KeyMaterialContent_Header) GetSignatureAlgorithms() []cryptopb.SignatureAlgorithm {
	if x != nil {
		return x.SignatureAlgorithms
	}
	return nil
}

func (x *KeyMaterialContent_Header) GetKeyManagementAlgorithms() []cryptopb.KeyManagementAlgorithm {
	if x != nil {
		return x.KeyManagementAlgorithms
	}
	return nil
}

func (x *KeyMaterialContent_Header) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *KeyMaterialContent_Header) GetMaterialId() string {
	if x != nil {
		return x.MaterialId
	}
	return ""
}

var File_blocky_kms_admin_v1alpha_key_proto protoreflect.FileDescriptor

var file_blocky_kms_admin_v1alpha_key_proto_rawDesc = []byte{
	0x0a, 0x22, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x21,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x09, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x08, 0xfa,
	0x41, 0x18, 0x0a, 0x16, 0x6b, 0x6d, 0x73, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0,
	0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x0d,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a,
	0x12, 0x72, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x53, 0x41, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10, 0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x79, 0x0a, 0x1d, 0x65, 0x6c, 0x6c,
	0x69, 0x70, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6c, 0x6c, 0x69,
	0x70, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x74,
	0x69, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x6f, 0x6b, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x6b, 0x70, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x6f, 0x6b, 0x70, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x60, 0x0a, 0x14, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x60, 0x0a,
	0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xf2, 0x01, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xe0, 0x41, 0x08, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6b, 0x6d, 0x73, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x65, 0x79, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x10, 0x52, 0x53, 0x41, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x52, 0x53, 0x41, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x59, 0x0a, 0x1a, 0x45, 0x6c, 0x6c,
	0x69, 0x70, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x6c, 0x69, 0x70,
	0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x4f, 0x6b, 0x70, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4f, 0x4b, 0x50, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65,
	0x22, 0x34, 0x0a, 0x12, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc4, 0x05, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x1a, 0x9a, 0x04, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x12, 0x6b,
	0x65, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x03, 0x6b, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x6a, 0x0a, 0x19, 0x6b, 0x65,
	0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x6b,
	0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x18, 0x0a, 0x16,
	0x6b, 0x6d, 0x73, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6b, 0x6d, 0x73, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x65, 0x79,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x2a, 0x61, 0x0a,
	0x06, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x44, 0x45, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x45,
	0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x03,
	0x2a, 0x96, 0x01, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x52, 0x41, 0x50, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x4e, 0x57, 0x52, 0x41, 0x50, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x52, 0x49,
	0x56, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x52, 0x49,
	0x56, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x10, 0x08, 0x42, 0xf1, 0x01, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x08, 0x4b, 0x65, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x42,
	0x4b, 0x41, 0xaa, 0x02, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x4b, 0x6d, 0x73, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x18,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c, 0x4b, 0x6d, 0x73, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x24, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x5c, 0x4b, 0x6d, 0x73, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x3a, 0x3a, 0x4b, 0x6d, 0x73, 0x3a, 0x3a, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocky_kms_admin_v1alpha_key_proto_rawDescOnce sync.Once
	file_blocky_kms_admin_v1alpha_key_proto_rawDescData = file_blocky_kms_admin_v1alpha_key_proto_rawDesc
)

func file_blocky_kms_admin_v1alpha_key_proto_rawDescGZIP() []byte {
	file_blocky_kms_admin_v1alpha_key_proto_rawDescOnce.Do(func() {
		file_blocky_kms_admin_v1alpha_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocky_kms_admin_v1alpha_key_proto_rawDescData)
	})
	return file_blocky_kms_admin_v1alpha_key_proto_rawDescData
}

var file_blocky_kms_admin_v1alpha_key_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_blocky_kms_admin_v1alpha_key_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_blocky_kms_admin_v1alpha_key_proto_goTypes = []interface{}{
	(KeyUse)(0),                          // 0: blocky.kms.admin.v1alpha.KeyUse
	(KeyOperations)(0),                   // 1: blocky.kms.admin.v1alpha.KeyOperations
	(*Key)(nil),                          // 2: blocky.kms.admin.v1alpha.Key
	(*KeyMaterial)(nil),                  // 3: blocky.kms.admin.v1alpha.KeyMaterial
	(*RSAKeyParameters)(nil),             // 4: blocky.kms.admin.v1alpha.RSAKeyParameters
	(*EllipticCurveKeyParameters)(nil),   // 5: blocky.kms.admin.v1alpha.EllipticCurveKeyParameters
	(*OkpKeyParameters)(nil),             // 6: blocky.kms.admin.v1alpha.OkpKeyParameters
	(*OctetKeyParameters)(nil),           // 7: blocky.kms.admin.v1alpha.OctetKeyParameters
	(*KeyMaterialContent)(nil),           // 8: blocky.kms.admin.v1alpha.KeyMaterialContent
	(*KeyMaterialContent_Header)(nil),    // 9: blocky.kms.admin.v1alpha.KeyMaterialContent.Header
	(cryptopb.KeyAlgorithmType)(0),       // 10: blocky.kms.crypto.KeyAlgorithmType
	(cryptopb.SignatureAlgorithm)(0),     // 11: blocky.kms.crypto.SignatureAlgorithm
	(cryptopb.EncryptionAlgorithm)(0),    // 12: blocky.kms.crypto.EncryptionAlgorithm
	(*timestamppb.Timestamp)(nil),        // 13: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),          // 14: google.protobuf.Duration
	(cryptopb.RSAKeySize)(0),             // 15: blocky.kms.crypto.RSAKeySize
	(cryptopb.EllipticCurve)(0),          // 16: blocky.kms.crypto.EllipticCurve
	(cryptopb.OKPCurve)(0),               // 17: blocky.kms.crypto.OKPCurve
	(*cryptopb.KeyMaterial)(nil),         // 18: blocky.kms.crypto.KeyMaterial
	(cryptopb.KeyManagementAlgorithm)(0), // 19: blocky.kms.crypto.KeyManagementAlgorithm
}
var file_blocky_kms_admin_v1alpha_key_proto_depIdxs = []int32{
	10, // 0: blocky.kms.admin.v1alpha.Key.algorithm_type:type_name -> blocky.kms.crypto.KeyAlgorithmType
	4,  // 1: blocky.kms.admin.v1alpha.Key.rsa_key_parameters:type_name -> blocky.kms.admin.v1alpha.RSAKeyParameters
	5,  // 2: blocky.kms.admin.v1alpha.Key.elliptic_curve_key_parameters:type_name -> blocky.kms.admin.v1alpha.EllipticCurveKeyParameters
	6,  // 3: blocky.kms.admin.v1alpha.Key.okp_key_parameters:type_name -> blocky.kms.admin.v1alpha.OkpKeyParameters
	7,  // 4: blocky.kms.admin.v1alpha.Key.octet_key_parameters:type_name -> blocky.kms.admin.v1alpha.OctetKeyParameters
	11, // 5: blocky.kms.admin.v1alpha.Key.signing_algorithms:type_name -> blocky.kms.crypto.SignatureAlgorithm
	12, // 6: blocky.kms.admin.v1alpha.Key.encryption_algorithms:type_name -> blocky.kms.crypto.EncryptionAlgorithm
	13, // 7: blocky.kms.admin.v1alpha.Key.create_time:type_name -> google.protobuf.Timestamp
	13, // 8: blocky.kms.admin.v1alpha.Key.update_time:type_name -> google.protobuf.Timestamp
	13, // 9: blocky.kms.admin.v1alpha.Key.last_rotated_time:type_name -> google.protobuf.Timestamp
	14, // 10: blocky.kms.admin.v1alpha.Key.rotation_interval:type_name -> google.protobuf.Duration
	13, // 11: blocky.kms.admin.v1alpha.KeyMaterial.create_time:type_name -> google.protobuf.Timestamp
	15, // 12: blocky.kms.admin.v1alpha.RSAKeyParameters.key_size:type_name -> blocky.kms.crypto.RSAKeySize
	16, // 13: blocky.kms.admin.v1alpha.EllipticCurveKeyParameters.curve:type_name -> blocky.kms.crypto.EllipticCurve
	17, // 14: blocky.kms.admin.v1alpha.OkpKeyParameters.curve:type_name -> blocky.kms.crypto.OKPCurve
	9,  // 15: blocky.kms.admin.v1alpha.KeyMaterialContent.header:type_name -> blocky.kms.admin.v1alpha.KeyMaterialContent.Header
	18, // 16: blocky.kms.admin.v1alpha.KeyMaterialContent.material:type_name -> blocky.kms.crypto.KeyMaterial
	10, // 17: blocky.kms.admin.v1alpha.KeyMaterialContent.Header.key_algorithm_type:type_name -> blocky.kms.crypto.KeyAlgorithmType
	0,  // 18: blocky.kms.admin.v1alpha.KeyMaterialContent.Header.key_use:type_name -> blocky.kms.admin.v1alpha.KeyUse
	1,  // 19: blocky.kms.admin.v1alpha.KeyMaterialContent.Header.key_ops:type_name -> blocky.kms.admin.v1alpha.KeyOperations
	11, // 20: blocky.kms.admin.v1alpha.KeyMaterialContent.Header.signature_algorithms:type_name -> blocky.kms.crypto.SignatureAlgorithm
	19, // 21: blocky.kms.admin.v1alpha.KeyMaterialContent.Header.key_management_algorithms:type_name -> blocky.kms.crypto.KeyManagementAlgorithm
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_blocky_kms_admin_v1alpha_key_proto_init() }
func file_blocky_kms_admin_v1alpha_key_proto_init() {
	if File_blocky_kms_admin_v1alpha_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSAKeyParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EllipticCurveKeyParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkpKeyParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OctetKeyParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMaterialContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_kms_admin_v1alpha_key_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMaterialContent_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blocky_kms_admin_v1alpha_key_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Key_RsaKeyParameters)(nil),
		(*Key_EllipticCurveKeyParameters)(nil),
		(*Key_OkpKeyParameters)(nil),
		(*Key_OctetKeyParameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocky_kms_admin_v1alpha_key_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blocky_kms_admin_v1alpha_key_proto_goTypes,
		DependencyIndexes: file_blocky_kms_admin_v1alpha_key_proto_depIdxs,
		EnumInfos:         file_blocky_kms_admin_v1alpha_key_proto_enumTypes,
		MessageInfos:      file_blocky_kms_admin_v1alpha_key_proto_msgTypes,
	}.Build()
	File_blocky_kms_admin_v1alpha_key_proto = out.File
	file_blocky_kms_admin_v1alpha_key_proto_rawDesc = nil
	file_blocky_kms_admin_v1alpha_key_proto_goTypes = nil
	file_blocky_kms_admin_v1alpha_key_proto_depIdxs = nil
}
