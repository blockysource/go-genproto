// Copyright 2024 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/kms/admin/v1alpha/keys_admin_service.proto

package kmsadminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeysAdminService_CreateKey_FullMethodName         = "/blocky.kms.admin.v1alpha.KeysAdminService/CreateKey"
	KeysAdminService_GetKey_FullMethodName            = "/blocky.kms.admin.v1alpha.KeysAdminService/GetKey"
	KeysAdminService_ListKeys_FullMethodName          = "/blocky.kms.admin.v1alpha.KeysAdminService/ListKeys"
	KeysAdminService_UpdateKey_FullMethodName         = "/blocky.kms.admin.v1alpha.KeysAdminService/UpdateKey"
	KeysAdminService_DeleteKey_FullMethodName         = "/blocky.kms.admin.v1alpha.KeysAdminService/DeleteKey"
	KeysAdminService_CreateKeyMaterial_FullMethodName = "/blocky.kms.admin.v1alpha.KeysAdminService/CreateKeyMaterial"
	KeysAdminService_GetKeyMaterial_FullMethodName    = "/blocky.kms.admin.v1alpha.KeysAdminService/GetKeyMaterial"
	KeysAdminService_ListKeyMaterials_FullMethodName  = "/blocky.kms.admin.v1alpha.KeysAdminService/ListKeyMaterials"
	KeysAdminService_DeleteKeyMaterial_FullMethodName = "/blocky.kms.admin.v1alpha.KeysAdminService/DeleteKeyMaterial"
)

// KeysAdminServiceClient is the client API for KeysAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeysAdminServiceClient interface {
	// Creates a new key.
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Gets a single key.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Lists Keys.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Updates the metadata and/or key material of a Key.
	UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Deletes a Key.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new key material of a Key.
	CreateKeyMaterial(ctx context.Context, in *CreateKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error)
	// Gets a key material by identifier.
	GetKeyMaterial(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error)
	// Lists key materials.
	ListKeyMaterials(ctx context.Context, in *ListKeyMaterialsRequest, opts ...grpc.CallOption) (*ListKeyMaterialsResponse, error)
	// Deletes a key material
	DeleteKeyMaterial(ctx context.Context, in *DeleteKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error)
}

type keysAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeysAdminServiceClient(cc grpc.ClientConnInterface) KeysAdminServiceClient {
	return &keysAdminServiceClient{cc}
}

func (c *keysAdminServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeysAdminService_CreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeysAdminService_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, KeysAdminService_ListKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeysAdminService_UpdateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KeysAdminService_DeleteKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) CreateKeyMaterial(ctx context.Context, in *CreateKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error) {
	out := new(KeyMaterial)
	err := c.cc.Invoke(ctx, KeysAdminService_CreateKeyMaterial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) GetKeyMaterial(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error) {
	out := new(KeyMaterial)
	err := c.cc.Invoke(ctx, KeysAdminService_GetKeyMaterial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) ListKeyMaterials(ctx context.Context, in *ListKeyMaterialsRequest, opts ...grpc.CallOption) (*ListKeyMaterialsResponse, error) {
	out := new(ListKeyMaterialsResponse)
	err := c.cc.Invoke(ctx, KeysAdminService_ListKeyMaterials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysAdminServiceClient) DeleteKeyMaterial(ctx context.Context, in *DeleteKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error) {
	out := new(KeyMaterial)
	err := c.cc.Invoke(ctx, KeysAdminService_DeleteKeyMaterial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeysAdminServiceServer is the server API for KeysAdminService service.
// All implementations must embed UnimplementedKeysAdminServiceServer
// for forward compatibility
type KeysAdminServiceServer interface {
	// Creates a new key.
	CreateKey(context.Context, *CreateKeyRequest) (*Key, error)
	// Gets a single key.
	GetKey(context.Context, *GetKeyRequest) (*Key, error)
	// Lists Keys.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// Updates the metadata and/or key material of a Key.
	UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error)
	// Deletes a Key.
	DeleteKey(context.Context, *DeleteKeyRequest) (*emptypb.Empty, error)
	// Creates a new key material of a Key.
	CreateKeyMaterial(context.Context, *CreateKeyMaterialRequest) (*KeyMaterial, error)
	// Gets a key material by identifier.
	GetKeyMaterial(context.Context, *GetKeyMaterialRequest) (*KeyMaterial, error)
	// Lists key materials.
	ListKeyMaterials(context.Context, *ListKeyMaterialsRequest) (*ListKeyMaterialsResponse, error)
	// Deletes a key material
	DeleteKeyMaterial(context.Context, *DeleteKeyMaterialRequest) (*KeyMaterial, error)
	mustEmbedUnimplementedKeysAdminServiceServer()
}

// UnimplementedKeysAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeysAdminServiceServer struct {
}

func (UnimplementedKeysAdminServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKeysAdminServiceServer) GetKey(context.Context, *GetKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeysAdminServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKeysAdminServiceServer) UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedKeysAdminServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKeysAdminServiceServer) CreateKeyMaterial(context.Context, *CreateKeyMaterialRequest) (*KeyMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyMaterial not implemented")
}
func (UnimplementedKeysAdminServiceServer) GetKeyMaterial(context.Context, *GetKeyMaterialRequest) (*KeyMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyMaterial not implemented")
}
func (UnimplementedKeysAdminServiceServer) ListKeyMaterials(context.Context, *ListKeyMaterialsRequest) (*ListKeyMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyMaterials not implemented")
}
func (UnimplementedKeysAdminServiceServer) DeleteKeyMaterial(context.Context, *DeleteKeyMaterialRequest) (*KeyMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyMaterial not implemented")
}
func (UnimplementedKeysAdminServiceServer) mustEmbedUnimplementedKeysAdminServiceServer() {}

// UnsafeKeysAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeysAdminServiceServer will
// result in compilation errors.
type UnsafeKeysAdminServiceServer interface {
	mustEmbedUnimplementedKeysAdminServiceServer()
}

func RegisterKeysAdminServiceServer(s grpc.ServiceRegistrar, srv KeysAdminServiceServer) {
	s.RegisterService(&KeysAdminService_ServiceDesc, srv)
}

func _KeysAdminService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_UpdateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).UpdateKey(ctx, req.(*UpdateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_CreateKeyMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).CreateKeyMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_CreateKeyMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).CreateKeyMaterial(ctx, req.(*CreateKeyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_GetKeyMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).GetKeyMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_GetKeyMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).GetKeyMaterial(ctx, req.(*GetKeyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_ListKeyMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).ListKeyMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_ListKeyMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).ListKeyMaterials(ctx, req.(*ListKeyMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysAdminService_DeleteKeyMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysAdminServiceServer).DeleteKeyMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysAdminService_DeleteKeyMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysAdminServiceServer).DeleteKeyMaterial(ctx, req.(*DeleteKeyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeysAdminService_ServiceDesc is the grpc.ServiceDesc for KeysAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeysAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.kms.admin.v1alpha.KeysAdminService",
	HandlerType: (*KeysAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KeysAdminService_CreateKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _KeysAdminService_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _KeysAdminService_ListKeys_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _KeysAdminService_UpdateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeysAdminService_DeleteKey_Handler,
		},
		{
			MethodName: "CreateKeyMaterial",
			Handler:    _KeysAdminService_CreateKeyMaterial_Handler,
		},
		{
			MethodName: "GetKeyMaterial",
			Handler:    _KeysAdminService_GetKeyMaterial_Handler,
		},
		{
			MethodName: "ListKeyMaterials",
			Handler:    _KeysAdminService_ListKeyMaterials_Handler,
		},
		{
			MethodName: "DeleteKeyMaterial",
			Handler:    _KeysAdminService_DeleteKeyMaterial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/kms/admin/v1alpha/keys_admin_service.proto",
}
