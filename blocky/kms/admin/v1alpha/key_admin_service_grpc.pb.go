// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/kms/admin/v1alpha/key_admin_service.proto

package adminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KmsAdminService_CreateKey_FullMethodName               = "/blocky.kms.admin.v1alpha.KmsAdminService/CreateKey"
	KmsAdminService_ListKeys_FullMethodName                = "/blocky.kms.admin.v1alpha.KmsAdminService/ListKeys"
	KmsAdminService_GetKey_FullMethodName                  = "/blocky.kms.admin.v1alpha.KmsAdminService/GetKey"
	KmsAdminService_UpdateKey_FullMethodName               = "/blocky.kms.admin.v1alpha.KmsAdminService/UpdateKey"
	KmsAdminService_DeleteKey_FullMethodName               = "/blocky.kms.admin.v1alpha.KmsAdminService/DeleteKey"
	KmsAdminService_RotateKey_FullMethodName               = "/blocky.kms.admin.v1alpha.KmsAdminService/RotateKey"
	KmsAdminService_GetKeyMaterial_FullMethodName          = "/blocky.kms.admin.v1alpha.KmsAdminService/GetKeyMaterial"
	KmsAdminService_ListKeyMaterials_FullMethodName        = "/blocky.kms.admin.v1alpha.KmsAdminService/ListKeyMaterials"
	KmsAdminService_GetKeyMaterialCryptoKey_FullMethodName = "/blocky.kms.admin.v1alpha.KmsAdminService/GetKeyMaterialCryptoKey"
	KmsAdminService_CreateKeyRing_FullMethodName           = "/blocky.kms.admin.v1alpha.KmsAdminService/CreateKeyRing"
	KmsAdminService_ListKeyRings_FullMethodName            = "/blocky.kms.admin.v1alpha.KmsAdminService/ListKeyRings"
	KmsAdminService_GetKeyRing_FullMethodName              = "/blocky.kms.admin.v1alpha.KmsAdminService/GetKeyRing"
	KmsAdminService_ListKeyRingPublicKeys_FullMethodName   = "/blocky.kms.admin.v1alpha.KmsAdminService/ListKeyRingPublicKeys"
	KmsAdminService_UpdateKeyRing_FullMethodName           = "/blocky.kms.admin.v1alpha.KmsAdminService/UpdateKeyRing"
	KmsAdminService_DeleteKeyRing_FullMethodName           = "/blocky.kms.admin.v1alpha.KmsAdminService/DeleteKeyRing"
)

// KmsAdminServiceClient is the client API for KmsAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KmsAdminServiceClient interface {
	// CreateKey creates a new cryptographic key.
	// New key is neither active nor used in a set.
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Lists the keys for a given project.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Get a key by its resource name.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// UpdateKey updates the specified cryptographic key.
	UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// DeleteKey deletes the specified cryptographic key.
	// If the key is protected it will result in an error of type PERMISSION_DENIED.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Creates a new key material and rotates the key.
	RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// GetKeyMaterial returns the specified key material.
	GetKeyMaterial(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error)
	// ListKeyMaterials lists cryptographic keys that matches given request.
	ListKeyMaterials(ctx context.Context, in *ListKeyMaterialsRequest, opts ...grpc.CallOption) (*ListKeyMaterialsResponse, error)
	// GetKeyMaterialCryptoKey returns the specified key material.
	GetKeyMaterialCryptoKey(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterialContent, error)
	// Create a new key ring.
	CreateKeyRing(ctx context.Context, in *CreateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
	// List key rings.
	ListKeyRings(ctx context.Context, in *ListKeyRingsRequest, opts ...grpc.CallOption) (*ListKeyRingsResponse, error)
	// Get key ring.
	GetKeyRing(ctx context.Context, in *GetKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
	// ListKeyRingPublicKeys lists the asymmetric public keys for a given key rings key materials.
	ListKeyRingPublicKeys(ctx context.Context, in *ListKeyRingPublicKeysRequest, opts ...grpc.CallOption) (*ListKeyRingPublicKeysResponse, error)
	// Update key ring.
	UpdateKeyRing(ctx context.Context, in *UpdateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
	// Delete key ring.
	DeleteKeyRing(ctx context.Context, in *DeleteKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
}

type kmsAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKmsAdminServiceClient(cc grpc.ClientConnInterface) KmsAdminServiceClient {
	return &kmsAdminServiceClient{cc}
}

func (c *kmsAdminServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KmsAdminService_CreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, KmsAdminService_ListKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KmsAdminService_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KmsAdminService_UpdateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KmsAdminService_DeleteKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KmsAdminService_RotateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) GetKeyMaterial(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error) {
	out := new(KeyMaterial)
	err := c.cc.Invoke(ctx, KmsAdminService_GetKeyMaterial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) ListKeyMaterials(ctx context.Context, in *ListKeyMaterialsRequest, opts ...grpc.CallOption) (*ListKeyMaterialsResponse, error) {
	out := new(ListKeyMaterialsResponse)
	err := c.cc.Invoke(ctx, KmsAdminService_ListKeyMaterials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) GetKeyMaterialCryptoKey(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterialContent, error) {
	out := new(KeyMaterialContent)
	err := c.cc.Invoke(ctx, KmsAdminService_GetKeyMaterialCryptoKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) CreateKeyRing(ctx context.Context, in *CreateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KmsAdminService_CreateKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) ListKeyRings(ctx context.Context, in *ListKeyRingsRequest, opts ...grpc.CallOption) (*ListKeyRingsResponse, error) {
	out := new(ListKeyRingsResponse)
	err := c.cc.Invoke(ctx, KmsAdminService_ListKeyRings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) GetKeyRing(ctx context.Context, in *GetKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KmsAdminService_GetKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) ListKeyRingPublicKeys(ctx context.Context, in *ListKeyRingPublicKeysRequest, opts ...grpc.CallOption) (*ListKeyRingPublicKeysResponse, error) {
	out := new(ListKeyRingPublicKeysResponse)
	err := c.cc.Invoke(ctx, KmsAdminService_ListKeyRingPublicKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) UpdateKeyRing(ctx context.Context, in *UpdateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KmsAdminService_UpdateKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsAdminServiceClient) DeleteKeyRing(ctx context.Context, in *DeleteKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KmsAdminService_DeleteKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KmsAdminServiceServer is the server API for KmsAdminService service.
// All implementations must embed UnimplementedKmsAdminServiceServer
// for forward compatibility
type KmsAdminServiceServer interface {
	// CreateKey creates a new cryptographic key.
	// New key is neither active nor used in a set.
	CreateKey(context.Context, *CreateKeyRequest) (*Key, error)
	// Lists the keys for a given project.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// Get a key by its resource name.
	GetKey(context.Context, *GetKeyRequest) (*Key, error)
	// UpdateKey updates the specified cryptographic key.
	UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error)
	// DeleteKey deletes the specified cryptographic key.
	// If the key is protected it will result in an error of type PERMISSION_DENIED.
	DeleteKey(context.Context, *DeleteKeyRequest) (*Key, error)
	// Creates a new key material and rotates the key.
	RotateKey(context.Context, *RotateKeyRequest) (*Key, error)
	// GetKeyMaterial returns the specified key material.
	GetKeyMaterial(context.Context, *GetKeyMaterialRequest) (*KeyMaterial, error)
	// ListKeyMaterials lists cryptographic keys that matches given request.
	ListKeyMaterials(context.Context, *ListKeyMaterialsRequest) (*ListKeyMaterialsResponse, error)
	// GetKeyMaterialCryptoKey returns the specified key material.
	GetKeyMaterialCryptoKey(context.Context, *GetKeyMaterialRequest) (*KeyMaterialContent, error)
	// Create a new key ring.
	CreateKeyRing(context.Context, *CreateKeyRingRequest) (*KeyRing, error)
	// List key rings.
	ListKeyRings(context.Context, *ListKeyRingsRequest) (*ListKeyRingsResponse, error)
	// Get key ring.
	GetKeyRing(context.Context, *GetKeyRingRequest) (*KeyRing, error)
	// ListKeyRingPublicKeys lists the asymmetric public keys for a given key rings key materials.
	ListKeyRingPublicKeys(context.Context, *ListKeyRingPublicKeysRequest) (*ListKeyRingPublicKeysResponse, error)
	// Update key ring.
	UpdateKeyRing(context.Context, *UpdateKeyRingRequest) (*KeyRing, error)
	// Delete key ring.
	DeleteKeyRing(context.Context, *DeleteKeyRingRequest) (*KeyRing, error)
	mustEmbedUnimplementedKmsAdminServiceServer()
}

// UnimplementedKmsAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKmsAdminServiceServer struct {
}

func (UnimplementedKmsAdminServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKmsAdminServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKmsAdminServiceServer) GetKey(context.Context, *GetKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKmsAdminServiceServer) UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedKmsAdminServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKmsAdminServiceServer) RotateKey(context.Context, *RotateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKey not implemented")
}
func (UnimplementedKmsAdminServiceServer) GetKeyMaterial(context.Context, *GetKeyMaterialRequest) (*KeyMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyMaterial not implemented")
}
func (UnimplementedKmsAdminServiceServer) ListKeyMaterials(context.Context, *ListKeyMaterialsRequest) (*ListKeyMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyMaterials not implemented")
}
func (UnimplementedKmsAdminServiceServer) GetKeyMaterialCryptoKey(context.Context, *GetKeyMaterialRequest) (*KeyMaterialContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyMaterialCryptoKey not implemented")
}
func (UnimplementedKmsAdminServiceServer) CreateKeyRing(context.Context, *CreateKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyRing not implemented")
}
func (UnimplementedKmsAdminServiceServer) ListKeyRings(context.Context, *ListKeyRingsRequest) (*ListKeyRingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyRings not implemented")
}
func (UnimplementedKmsAdminServiceServer) GetKeyRing(context.Context, *GetKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyRing not implemented")
}
func (UnimplementedKmsAdminServiceServer) ListKeyRingPublicKeys(context.Context, *ListKeyRingPublicKeysRequest) (*ListKeyRingPublicKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyRingPublicKeys not implemented")
}
func (UnimplementedKmsAdminServiceServer) UpdateKeyRing(context.Context, *UpdateKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyRing not implemented")
}
func (UnimplementedKmsAdminServiceServer) DeleteKeyRing(context.Context, *DeleteKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyRing not implemented")
}
func (UnimplementedKmsAdminServiceServer) mustEmbedUnimplementedKmsAdminServiceServer() {}

// UnsafeKmsAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KmsAdminServiceServer will
// result in compilation errors.
type UnsafeKmsAdminServiceServer interface {
	mustEmbedUnimplementedKmsAdminServiceServer()
}

func RegisterKmsAdminServiceServer(s grpc.ServiceRegistrar, srv KmsAdminServiceServer) {
	s.RegisterService(&KmsAdminService_ServiceDesc, srv)
}

func _KmsAdminService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_UpdateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).UpdateKey(ctx, req.(*UpdateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_RotateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).RotateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_RotateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).RotateKey(ctx, req.(*RotateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_GetKeyMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).GetKeyMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_GetKeyMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).GetKeyMaterial(ctx, req.(*GetKeyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_ListKeyMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).ListKeyMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_ListKeyMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).ListKeyMaterials(ctx, req.(*ListKeyMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_GetKeyMaterialCryptoKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).GetKeyMaterialCryptoKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_GetKeyMaterialCryptoKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).GetKeyMaterialCryptoKey(ctx, req.(*GetKeyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_CreateKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).CreateKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_CreateKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).CreateKeyRing(ctx, req.(*CreateKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_ListKeyRings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).ListKeyRings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_ListKeyRings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).ListKeyRings(ctx, req.(*ListKeyRingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_GetKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).GetKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_GetKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).GetKeyRing(ctx, req.(*GetKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_ListKeyRingPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRingPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).ListKeyRingPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_ListKeyRingPublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).ListKeyRingPublicKeys(ctx, req.(*ListKeyRingPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_UpdateKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).UpdateKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_UpdateKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).UpdateKeyRing(ctx, req.(*UpdateKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsAdminService_DeleteKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsAdminServiceServer).DeleteKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsAdminService_DeleteKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsAdminServiceServer).DeleteKeyRing(ctx, req.(*DeleteKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KmsAdminService_ServiceDesc is the grpc.ServiceDesc for KmsAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KmsAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.kms.admin.v1alpha.KmsAdminService",
	HandlerType: (*KmsAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KmsAdminService_CreateKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _KmsAdminService_ListKeys_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _KmsAdminService_GetKey_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _KmsAdminService_UpdateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KmsAdminService_DeleteKey_Handler,
		},
		{
			MethodName: "RotateKey",
			Handler:    _KmsAdminService_RotateKey_Handler,
		},
		{
			MethodName: "GetKeyMaterial",
			Handler:    _KmsAdminService_GetKeyMaterial_Handler,
		},
		{
			MethodName: "ListKeyMaterials",
			Handler:    _KmsAdminService_ListKeyMaterials_Handler,
		},
		{
			MethodName: "GetKeyMaterialCryptoKey",
			Handler:    _KmsAdminService_GetKeyMaterialCryptoKey_Handler,
		},
		{
			MethodName: "CreateKeyRing",
			Handler:    _KmsAdminService_CreateKeyRing_Handler,
		},
		{
			MethodName: "ListKeyRings",
			Handler:    _KmsAdminService_ListKeyRings_Handler,
		},
		{
			MethodName: "GetKeyRing",
			Handler:    _KmsAdminService_GetKeyRing_Handler,
		},
		{
			MethodName: "ListKeyRingPublicKeys",
			Handler:    _KmsAdminService_ListKeyRingPublicKeys_Handler,
		},
		{
			MethodName: "UpdateKeyRing",
			Handler:    _KmsAdminService_UpdateKeyRing_Handler,
		},
		{
			MethodName: "DeleteKeyRing",
			Handler:    _KmsAdminService_DeleteKeyRing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/kms/admin/v1alpha/key_admin_service.proto",
}
