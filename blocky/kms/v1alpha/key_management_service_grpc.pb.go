// Copyright 2024 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/kms/v1alpha/key_management_service.proto

package kmspb

import (
	context "context"
	crypto "github.com/blockysource/go-genproto/blocky/type/crypto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyManagementService_CreateKey_FullMethodName             = "/blocky.kms.v1alpha.KeyManagementService/CreateKey"
	KeyManagementService_GetKey_FullMethodName                = "/blocky.kms.v1alpha.KeyManagementService/GetKey"
	KeyManagementService_ListKeys_FullMethodName              = "/blocky.kms.v1alpha.KeyManagementService/ListKeys"
	KeyManagementService_UpdateKey_FullMethodName             = "/blocky.kms.v1alpha.KeyManagementService/UpdateKey"
	KeyManagementService_DeleteKey_FullMethodName             = "/blocky.kms.v1alpha.KeyManagementService/DeleteKey"
	KeyManagementService_RotateKey_FullMethodName             = "/blocky.kms.v1alpha.KeyManagementService/RotateKey"
	KeyManagementService_GetKeyMaterial_FullMethodName        = "/blocky.kms.v1alpha.KeyManagementService/GetKeyMaterial"
	KeyManagementService_ListKeyMaterials_FullMethodName      = "/blocky.kms.v1alpha.KeyManagementService/ListKeyMaterials"
	KeyManagementService_SignBlob_FullMethodName              = "/blocky.kms.v1alpha.KeyManagementService/SignBlob"
	KeyManagementService_VerifyBlob_FullMethodName            = "/blocky.kms.v1alpha.KeyManagementService/VerifyBlob"
	KeyManagementService_SignContent_FullMethodName           = "/blocky.kms.v1alpha.KeyManagementService/SignContent"
	KeyManagementService_VerifySignedContent_FullMethodName   = "/blocky.kms.v1alpha.KeyManagementService/VerifySignedContent"
	KeyManagementService_EncryptContent_FullMethodName        = "/blocky.kms.v1alpha.KeyManagementService/EncryptContent"
	KeyManagementService_DecryptContent_FullMethodName        = "/blocky.kms.v1alpha.KeyManagementService/DecryptContent"
	KeyManagementService_EncryptBlob_FullMethodName           = "/blocky.kms.v1alpha.KeyManagementService/EncryptBlob"
	KeyManagementService_DecryptBlob_FullMethodName           = "/blocky.kms.v1alpha.KeyManagementService/DecryptBlob"
	KeyManagementService_CreateKeyRing_FullMethodName         = "/blocky.kms.v1alpha.KeyManagementService/CreateKeyRing"
	KeyManagementService_ListKeyRings_FullMethodName          = "/blocky.kms.v1alpha.KeyManagementService/ListKeyRings"
	KeyManagementService_GetKeyRing_FullMethodName            = "/blocky.kms.v1alpha.KeyManagementService/GetKeyRing"
	KeyManagementService_ListKeyRingPublicKeys_FullMethodName = "/blocky.kms.v1alpha.KeyManagementService/ListKeyRingPublicKeys"
	KeyManagementService_UpdateKeyRing_FullMethodName         = "/blocky.kms.v1alpha.KeyManagementService/UpdateKeyRing"
	KeyManagementService_DeleteKeyRing_FullMethodName         = "/blocky.kms.v1alpha.KeyManagementService/DeleteKeyRing"
)

// KeyManagementServiceClient is the client API for KeyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyManagementServiceClient interface {
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Lists Keys.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Updates the metadata and/or key material of a Key.
	UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Deletes a Key.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Rotates the key material of a Key.
	RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Gets the key material of a Key.
	GetKeyMaterial(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error)
	// Lists cryptographic keys that matches given query.
	ListKeyMaterials(ctx context.Context, in *ListKeyMaterialsRequest, opts ...grpc.CallOption) (*ListKeyMaterialsResponse, error)
	// SignBlob signs the given data with the given key.
	// The client is responsible for either hard-coding the pair of key and algorithm or
	// encode specific metadata into the blob to be signed.
	// This might be used for the needs of creating a JWT token by storing storing the algorithm and key id in the
	// tokens header.
	SignBlob(ctx context.Context, in *SignBlobRequest, opts ...grpc.CallOption) (*SignBlobResponse, error)
	// VerifyBlob verifies the given signature with the given key.
	VerifyBlob(ctx context.Context, in *VerifyBlobRequest, opts ...grpc.CallOption) (*VerifyBlobResponse, error)
	// SignContent signs the given data with the given key.
	// Compared to the SignBlob, this method encodes required metadata into the signature header.
	// This can be used as a generic signing operation which results with well-known structure of the signature.
	SignContent(ctx context.Context, in *SignContentRequest, opts ...grpc.CallOption) (*crypto.SignedContent, error)
	// Verify signed content verifies the given signature with the given key.
	VerifySignedContent(ctx context.Context, in *VerifySignedContentRequest, opts ...grpc.CallOption) (*VerifySignedContentResponse, error)
	// Encrypts the input content with the given key.
	EncryptContent(ctx context.Context, in *EncryptContentRequest, opts ...grpc.CallOption) (*EncryptContentResponse, error)
	// Decrypts the input content with the given key.
	DecryptContent(ctx context.Context, in *DecryptContentRequest, opts ...grpc.CallOption) (*DecryptContentResponse, error)
	// EncryptBlob encrypts the input blob with the given key.
	EncryptBlob(ctx context.Context, in *EncryptBlobRequest, opts ...grpc.CallOption) (*EncryptBlobResponse, error)
	// DecryptBlob decrypts the input blob with the given key.
	DecryptBlob(ctx context.Context, in *DecryptBlobRequest, opts ...grpc.CallOption) (*DecryptBlobResponse, error)
	// Create a new key ring.
	CreateKeyRing(ctx context.Context, in *CreateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
	// List key rings.
	ListKeyRings(ctx context.Context, in *ListKeyRingsRequest, opts ...grpc.CallOption) (*ListKeyRingsResponse, error)
	// Get key ring.
	GetKeyRing(ctx context.Context, in *GetKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
	// ListKeyRingPublicKeys lists the asymmetric public keys for a given key rings key materials.
	ListKeyRingPublicKeys(ctx context.Context, in *ListKeyRingPublicKeysRequest, opts ...grpc.CallOption) (*ListKeyRingPublicKeysResponse, error)
	// Update key ring.
	UpdateKeyRing(ctx context.Context, in *UpdateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
	// Delete key ring.
	DeleteKeyRing(ctx context.Context, in *DeleteKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error)
}

type keyManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyManagementServiceClient(cc grpc.ClientConnInterface) KeyManagementServiceClient {
	return &keyManagementServiceClient{cc}
}

func (c *keyManagementServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyManagementService_CreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyManagementService_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_ListKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyManagementService_UpdateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyManagementService_DeleteKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, KeyManagementService_RotateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) GetKeyMaterial(ctx context.Context, in *GetKeyMaterialRequest, opts ...grpc.CallOption) (*KeyMaterial, error) {
	out := new(KeyMaterial)
	err := c.cc.Invoke(ctx, KeyManagementService_GetKeyMaterial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) ListKeyMaterials(ctx context.Context, in *ListKeyMaterialsRequest, opts ...grpc.CallOption) (*ListKeyMaterialsResponse, error) {
	out := new(ListKeyMaterialsResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_ListKeyMaterials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) SignBlob(ctx context.Context, in *SignBlobRequest, opts ...grpc.CallOption) (*SignBlobResponse, error) {
	out := new(SignBlobResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_SignBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) VerifyBlob(ctx context.Context, in *VerifyBlobRequest, opts ...grpc.CallOption) (*VerifyBlobResponse, error) {
	out := new(VerifyBlobResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_VerifyBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) SignContent(ctx context.Context, in *SignContentRequest, opts ...grpc.CallOption) (*crypto.SignedContent, error) {
	out := new(crypto.SignedContent)
	err := c.cc.Invoke(ctx, KeyManagementService_SignContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) VerifySignedContent(ctx context.Context, in *VerifySignedContentRequest, opts ...grpc.CallOption) (*VerifySignedContentResponse, error) {
	out := new(VerifySignedContentResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_VerifySignedContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) EncryptContent(ctx context.Context, in *EncryptContentRequest, opts ...grpc.CallOption) (*EncryptContentResponse, error) {
	out := new(EncryptContentResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_EncryptContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) DecryptContent(ctx context.Context, in *DecryptContentRequest, opts ...grpc.CallOption) (*DecryptContentResponse, error) {
	out := new(DecryptContentResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_DecryptContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) EncryptBlob(ctx context.Context, in *EncryptBlobRequest, opts ...grpc.CallOption) (*EncryptBlobResponse, error) {
	out := new(EncryptBlobResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_EncryptBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) DecryptBlob(ctx context.Context, in *DecryptBlobRequest, opts ...grpc.CallOption) (*DecryptBlobResponse, error) {
	out := new(DecryptBlobResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_DecryptBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) CreateKeyRing(ctx context.Context, in *CreateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KeyManagementService_CreateKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) ListKeyRings(ctx context.Context, in *ListKeyRingsRequest, opts ...grpc.CallOption) (*ListKeyRingsResponse, error) {
	out := new(ListKeyRingsResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_ListKeyRings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) GetKeyRing(ctx context.Context, in *GetKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KeyManagementService_GetKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) ListKeyRingPublicKeys(ctx context.Context, in *ListKeyRingPublicKeysRequest, opts ...grpc.CallOption) (*ListKeyRingPublicKeysResponse, error) {
	out := new(ListKeyRingPublicKeysResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_ListKeyRingPublicKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) UpdateKeyRing(ctx context.Context, in *UpdateKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KeyManagementService_UpdateKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) DeleteKeyRing(ctx context.Context, in *DeleteKeyRingRequest, opts ...grpc.CallOption) (*KeyRing, error) {
	out := new(KeyRing)
	err := c.cc.Invoke(ctx, KeyManagementService_DeleteKeyRing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyManagementServiceServer is the server API for KeyManagementService service.
// All implementations must embed UnimplementedKeyManagementServiceServer
// for forward compatibility
type KeyManagementServiceServer interface {
	CreateKey(context.Context, *CreateKeyRequest) (*Key, error)
	GetKey(context.Context, *GetKeyRequest) (*Key, error)
	// Lists Keys.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// Updates the metadata and/or key material of a Key.
	UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error)
	// Deletes a Key.
	DeleteKey(context.Context, *DeleteKeyRequest) (*Key, error)
	// Rotates the key material of a Key.
	RotateKey(context.Context, *RotateKeyRequest) (*Key, error)
	// Gets the key material of a Key.
	GetKeyMaterial(context.Context, *GetKeyMaterialRequest) (*KeyMaterial, error)
	// Lists cryptographic keys that matches given query.
	ListKeyMaterials(context.Context, *ListKeyMaterialsRequest) (*ListKeyMaterialsResponse, error)
	// SignBlob signs the given data with the given key.
	// The client is responsible for either hard-coding the pair of key and algorithm or
	// encode specific metadata into the blob to be signed.
	// This might be used for the needs of creating a JWT token by storing storing the algorithm and key id in the
	// tokens header.
	SignBlob(context.Context, *SignBlobRequest) (*SignBlobResponse, error)
	// VerifyBlob verifies the given signature with the given key.
	VerifyBlob(context.Context, *VerifyBlobRequest) (*VerifyBlobResponse, error)
	// SignContent signs the given data with the given key.
	// Compared to the SignBlob, this method encodes required metadata into the signature header.
	// This can be used as a generic signing operation which results with well-known structure of the signature.
	SignContent(context.Context, *SignContentRequest) (*crypto.SignedContent, error)
	// Verify signed content verifies the given signature with the given key.
	VerifySignedContent(context.Context, *VerifySignedContentRequest) (*VerifySignedContentResponse, error)
	// Encrypts the input content with the given key.
	EncryptContent(context.Context, *EncryptContentRequest) (*EncryptContentResponse, error)
	// Decrypts the input content with the given key.
	DecryptContent(context.Context, *DecryptContentRequest) (*DecryptContentResponse, error)
	// EncryptBlob encrypts the input blob with the given key.
	EncryptBlob(context.Context, *EncryptBlobRequest) (*EncryptBlobResponse, error)
	// DecryptBlob decrypts the input blob with the given key.
	DecryptBlob(context.Context, *DecryptBlobRequest) (*DecryptBlobResponse, error)
	// Create a new key ring.
	CreateKeyRing(context.Context, *CreateKeyRingRequest) (*KeyRing, error)
	// List key rings.
	ListKeyRings(context.Context, *ListKeyRingsRequest) (*ListKeyRingsResponse, error)
	// Get key ring.
	GetKeyRing(context.Context, *GetKeyRingRequest) (*KeyRing, error)
	// ListKeyRingPublicKeys lists the asymmetric public keys for a given key rings key materials.
	ListKeyRingPublicKeys(context.Context, *ListKeyRingPublicKeysRequest) (*ListKeyRingPublicKeysResponse, error)
	// Update key ring.
	UpdateKeyRing(context.Context, *UpdateKeyRingRequest) (*KeyRing, error)
	// Delete key ring.
	DeleteKeyRing(context.Context, *DeleteKeyRingRequest) (*KeyRing, error)
	mustEmbedUnimplementedKeyManagementServiceServer()
}

// UnimplementedKeyManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyManagementServiceServer struct {
}

func (UnimplementedKeyManagementServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKeyManagementServiceServer) GetKey(context.Context, *GetKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeyManagementServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKeyManagementServiceServer) UpdateKey(context.Context, *UpdateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedKeyManagementServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKeyManagementServiceServer) RotateKey(context.Context, *RotateKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKey not implemented")
}
func (UnimplementedKeyManagementServiceServer) GetKeyMaterial(context.Context, *GetKeyMaterialRequest) (*KeyMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyMaterial not implemented")
}
func (UnimplementedKeyManagementServiceServer) ListKeyMaterials(context.Context, *ListKeyMaterialsRequest) (*ListKeyMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyMaterials not implemented")
}
func (UnimplementedKeyManagementServiceServer) SignBlob(context.Context, *SignBlobRequest) (*SignBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBlob not implemented")
}
func (UnimplementedKeyManagementServiceServer) VerifyBlob(context.Context, *VerifyBlobRequest) (*VerifyBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBlob not implemented")
}
func (UnimplementedKeyManagementServiceServer) SignContent(context.Context, *SignContentRequest) (*crypto.SignedContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignContent not implemented")
}
func (UnimplementedKeyManagementServiceServer) VerifySignedContent(context.Context, *VerifySignedContentRequest) (*VerifySignedContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignedContent not implemented")
}
func (UnimplementedKeyManagementServiceServer) EncryptContent(context.Context, *EncryptContentRequest) (*EncryptContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptContent not implemented")
}
func (UnimplementedKeyManagementServiceServer) DecryptContent(context.Context, *DecryptContentRequest) (*DecryptContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptContent not implemented")
}
func (UnimplementedKeyManagementServiceServer) EncryptBlob(context.Context, *EncryptBlobRequest) (*EncryptBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptBlob not implemented")
}
func (UnimplementedKeyManagementServiceServer) DecryptBlob(context.Context, *DecryptBlobRequest) (*DecryptBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptBlob not implemented")
}
func (UnimplementedKeyManagementServiceServer) CreateKeyRing(context.Context, *CreateKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyRing not implemented")
}
func (UnimplementedKeyManagementServiceServer) ListKeyRings(context.Context, *ListKeyRingsRequest) (*ListKeyRingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyRings not implemented")
}
func (UnimplementedKeyManagementServiceServer) GetKeyRing(context.Context, *GetKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyRing not implemented")
}
func (UnimplementedKeyManagementServiceServer) ListKeyRingPublicKeys(context.Context, *ListKeyRingPublicKeysRequest) (*ListKeyRingPublicKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyRingPublicKeys not implemented")
}
func (UnimplementedKeyManagementServiceServer) UpdateKeyRing(context.Context, *UpdateKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyRing not implemented")
}
func (UnimplementedKeyManagementServiceServer) DeleteKeyRing(context.Context, *DeleteKeyRingRequest) (*KeyRing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyRing not implemented")
}
func (UnimplementedKeyManagementServiceServer) mustEmbedUnimplementedKeyManagementServiceServer() {}

// UnsafeKeyManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyManagementServiceServer will
// result in compilation errors.
type UnsafeKeyManagementServiceServer interface {
	mustEmbedUnimplementedKeyManagementServiceServer()
}

func RegisterKeyManagementServiceServer(s grpc.ServiceRegistrar, srv KeyManagementServiceServer) {
	s.RegisterService(&KeyManagementService_ServiceDesc, srv)
}

func _KeyManagementService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_UpdateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).UpdateKey(ctx, req.(*UpdateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_RotateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).RotateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_RotateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).RotateKey(ctx, req.(*RotateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_GetKeyMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).GetKeyMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_GetKeyMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).GetKeyMaterial(ctx, req.(*GetKeyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_ListKeyMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).ListKeyMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_ListKeyMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).ListKeyMaterials(ctx, req.(*ListKeyMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_SignBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).SignBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_SignBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).SignBlob(ctx, req.(*SignBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_VerifyBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).VerifyBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_VerifyBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).VerifyBlob(ctx, req.(*VerifyBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_SignContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).SignContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_SignContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).SignContent(ctx, req.(*SignContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_VerifySignedContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignedContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).VerifySignedContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_VerifySignedContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).VerifySignedContent(ctx, req.(*VerifySignedContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_EncryptContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).EncryptContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_EncryptContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).EncryptContent(ctx, req.(*EncryptContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_DecryptContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).DecryptContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_DecryptContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).DecryptContent(ctx, req.(*DecryptContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_EncryptBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).EncryptBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_EncryptBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).EncryptBlob(ctx, req.(*EncryptBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_DecryptBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).DecryptBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_DecryptBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).DecryptBlob(ctx, req.(*DecryptBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_CreateKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).CreateKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_CreateKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).CreateKeyRing(ctx, req.(*CreateKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_ListKeyRings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).ListKeyRings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_ListKeyRings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).ListKeyRings(ctx, req.(*ListKeyRingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_GetKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).GetKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_GetKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).GetKeyRing(ctx, req.(*GetKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_ListKeyRingPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRingPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).ListKeyRingPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_ListKeyRingPublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).ListKeyRingPublicKeys(ctx, req.(*ListKeyRingPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_UpdateKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).UpdateKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_UpdateKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).UpdateKeyRing(ctx, req.(*UpdateKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_DeleteKeyRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).DeleteKeyRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_DeleteKeyRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).DeleteKeyRing(ctx, req.(*DeleteKeyRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyManagementService_ServiceDesc is the grpc.ServiceDesc for KeyManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.kms.v1alpha.KeyManagementService",
	HandlerType: (*KeyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KeyManagementService_CreateKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _KeyManagementService_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _KeyManagementService_ListKeys_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _KeyManagementService_UpdateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeyManagementService_DeleteKey_Handler,
		},
		{
			MethodName: "RotateKey",
			Handler:    _KeyManagementService_RotateKey_Handler,
		},
		{
			MethodName: "GetKeyMaterial",
			Handler:    _KeyManagementService_GetKeyMaterial_Handler,
		},
		{
			MethodName: "ListKeyMaterials",
			Handler:    _KeyManagementService_ListKeyMaterials_Handler,
		},
		{
			MethodName: "SignBlob",
			Handler:    _KeyManagementService_SignBlob_Handler,
		},
		{
			MethodName: "VerifyBlob",
			Handler:    _KeyManagementService_VerifyBlob_Handler,
		},
		{
			MethodName: "SignContent",
			Handler:    _KeyManagementService_SignContent_Handler,
		},
		{
			MethodName: "VerifySignedContent",
			Handler:    _KeyManagementService_VerifySignedContent_Handler,
		},
		{
			MethodName: "EncryptContent",
			Handler:    _KeyManagementService_EncryptContent_Handler,
		},
		{
			MethodName: "DecryptContent",
			Handler:    _KeyManagementService_DecryptContent_Handler,
		},
		{
			MethodName: "EncryptBlob",
			Handler:    _KeyManagementService_EncryptBlob_Handler,
		},
		{
			MethodName: "DecryptBlob",
			Handler:    _KeyManagementService_DecryptBlob_Handler,
		},
		{
			MethodName: "CreateKeyRing",
			Handler:    _KeyManagementService_CreateKeyRing_Handler,
		},
		{
			MethodName: "ListKeyRings",
			Handler:    _KeyManagementService_ListKeyRings_Handler,
		},
		{
			MethodName: "GetKeyRing",
			Handler:    _KeyManagementService_GetKeyRing_Handler,
		},
		{
			MethodName: "ListKeyRingPublicKeys",
			Handler:    _KeyManagementService_ListKeyRingPublicKeys_Handler,
		},
		{
			MethodName: "UpdateKeyRing",
			Handler:    _KeyManagementService_UpdateKeyRing_Handler,
		},
		{
			MethodName: "DeleteKeyRing",
			Handler:    _KeyManagementService_DeleteKeyRing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/kms/v1alpha/key_management_service.proto",
}
