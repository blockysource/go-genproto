// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/kms/v1alpha/kms_service.proto

package kmspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KmsService_SignContent_FullMethodName         = "/blocky.kms.v1alpha.KmsService/SignContent"
	KmsService_VerifySignedContent_FullMethodName = "/blocky.kms.v1alpha.KmsService/VerifySignedContent"
	KmsService_SignBlob_FullMethodName            = "/blocky.kms.v1alpha.KmsService/SignBlob"
	KmsService_VerifyBlob_FullMethodName          = "/blocky.kms.v1alpha.KmsService/VerifyBlob"
	KmsService_EncryptContent_FullMethodName      = "/blocky.kms.v1alpha.KmsService/EncryptContent"
	KmsService_DecryptContent_FullMethodName      = "/blocky.kms.v1alpha.KmsService/DecryptContent"
	KmsService_EncryptBlob_FullMethodName         = "/blocky.kms.v1alpha.KmsService/EncryptBlob"
	KmsService_DecryptBlob_FullMethodName         = "/blocky.kms.v1alpha.KmsService/DecryptBlob"
)

// KmsServiceClient is the client API for KmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KmsServiceClient interface {
	// SignContent signs the given data with the given key.
	SignContent(ctx context.Context, in *SignContentRequest, opts ...grpc.CallOption) (*SignContentResponse, error)
	// Verify signed content verifies the given signature with the given key.
	VerifySignedContent(ctx context.Context, in *VerifySignedContentRequest, opts ...grpc.CallOption) (*VerifySignedContentResponse, error)
	// SignBlob creates a raw signature for the given input blob.
	SignBlob(ctx context.Context, in *SignBlobRequest, opts ...grpc.CallOption) (*SignBlobResponse, error)
	// VerifyBlob verifies if input signature were created for the given input blob.
	VerifyBlob(ctx context.Context, in *VerifyBlobRequest, opts ...grpc.CallOption) (*VerifyBlobResponse, error)
	// Encrypts the input content with the given key.
	EncryptContent(ctx context.Context, in *EncryptContentRequest, opts ...grpc.CallOption) (*EncryptContentResponse, error)
	// Decrypts the input content with the given key.
	DecryptContent(ctx context.Context, in *DecryptContentRequest, opts ...grpc.CallOption) (*DecryptContentResponse, error)
	// EncryptBlob encrypts the input blob with the given key.
	EncryptBlob(ctx context.Context, in *EncryptBlobRequest, opts ...grpc.CallOption) (*EncryptBlobResponse, error)
	// DecryptBlob decrypts the input blob with the given key.
	DecryptBlob(ctx context.Context, in *DecryptBlobRequest, opts ...grpc.CallOption) (*DecryptBlobResponse, error)
}

type kmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKmsServiceClient(cc grpc.ClientConnInterface) KmsServiceClient {
	return &kmsServiceClient{cc}
}

func (c *kmsServiceClient) SignContent(ctx context.Context, in *SignContentRequest, opts ...grpc.CallOption) (*SignContentResponse, error) {
	out := new(SignContentResponse)
	err := c.cc.Invoke(ctx, KmsService_SignContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) VerifySignedContent(ctx context.Context, in *VerifySignedContentRequest, opts ...grpc.CallOption) (*VerifySignedContentResponse, error) {
	out := new(VerifySignedContentResponse)
	err := c.cc.Invoke(ctx, KmsService_VerifySignedContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) SignBlob(ctx context.Context, in *SignBlobRequest, opts ...grpc.CallOption) (*SignBlobResponse, error) {
	out := new(SignBlobResponse)
	err := c.cc.Invoke(ctx, KmsService_SignBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) VerifyBlob(ctx context.Context, in *VerifyBlobRequest, opts ...grpc.CallOption) (*VerifyBlobResponse, error) {
	out := new(VerifyBlobResponse)
	err := c.cc.Invoke(ctx, KmsService_VerifyBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) EncryptContent(ctx context.Context, in *EncryptContentRequest, opts ...grpc.CallOption) (*EncryptContentResponse, error) {
	out := new(EncryptContentResponse)
	err := c.cc.Invoke(ctx, KmsService_EncryptContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) DecryptContent(ctx context.Context, in *DecryptContentRequest, opts ...grpc.CallOption) (*DecryptContentResponse, error) {
	out := new(DecryptContentResponse)
	err := c.cc.Invoke(ctx, KmsService_DecryptContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) EncryptBlob(ctx context.Context, in *EncryptBlobRequest, opts ...grpc.CallOption) (*EncryptBlobResponse, error) {
	out := new(EncryptBlobResponse)
	err := c.cc.Invoke(ctx, KmsService_EncryptBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsServiceClient) DecryptBlob(ctx context.Context, in *DecryptBlobRequest, opts ...grpc.CallOption) (*DecryptBlobResponse, error) {
	out := new(DecryptBlobResponse)
	err := c.cc.Invoke(ctx, KmsService_DecryptBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KmsServiceServer is the server API for KmsService service.
// All implementations must embed UnimplementedKmsServiceServer
// for forward compatibility
type KmsServiceServer interface {
	// SignContent signs the given data with the given key.
	SignContent(context.Context, *SignContentRequest) (*SignContentResponse, error)
	// Verify signed content verifies the given signature with the given key.
	VerifySignedContent(context.Context, *VerifySignedContentRequest) (*VerifySignedContentResponse, error)
	// SignBlob creates a raw signature for the given input blob.
	SignBlob(context.Context, *SignBlobRequest) (*SignBlobResponse, error)
	// VerifyBlob verifies if input signature were created for the given input blob.
	VerifyBlob(context.Context, *VerifyBlobRequest) (*VerifyBlobResponse, error)
	// Encrypts the input content with the given key.
	EncryptContent(context.Context, *EncryptContentRequest) (*EncryptContentResponse, error)
	// Decrypts the input content with the given key.
	DecryptContent(context.Context, *DecryptContentRequest) (*DecryptContentResponse, error)
	// EncryptBlob encrypts the input blob with the given key.
	EncryptBlob(context.Context, *EncryptBlobRequest) (*EncryptBlobResponse, error)
	// DecryptBlob decrypts the input blob with the given key.
	DecryptBlob(context.Context, *DecryptBlobRequest) (*DecryptBlobResponse, error)
	mustEmbedUnimplementedKmsServiceServer()
}

// UnimplementedKmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKmsServiceServer struct {
}

func (UnimplementedKmsServiceServer) SignContent(context.Context, *SignContentRequest) (*SignContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignContent not implemented")
}
func (UnimplementedKmsServiceServer) VerifySignedContent(context.Context, *VerifySignedContentRequest) (*VerifySignedContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignedContent not implemented")
}
func (UnimplementedKmsServiceServer) SignBlob(context.Context, *SignBlobRequest) (*SignBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBlob not implemented")
}
func (UnimplementedKmsServiceServer) VerifyBlob(context.Context, *VerifyBlobRequest) (*VerifyBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBlob not implemented")
}
func (UnimplementedKmsServiceServer) EncryptContent(context.Context, *EncryptContentRequest) (*EncryptContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptContent not implemented")
}
func (UnimplementedKmsServiceServer) DecryptContent(context.Context, *DecryptContentRequest) (*DecryptContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptContent not implemented")
}
func (UnimplementedKmsServiceServer) EncryptBlob(context.Context, *EncryptBlobRequest) (*EncryptBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptBlob not implemented")
}
func (UnimplementedKmsServiceServer) DecryptBlob(context.Context, *DecryptBlobRequest) (*DecryptBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptBlob not implemented")
}
func (UnimplementedKmsServiceServer) mustEmbedUnimplementedKmsServiceServer() {}

// UnsafeKmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KmsServiceServer will
// result in compilation errors.
type UnsafeKmsServiceServer interface {
	mustEmbedUnimplementedKmsServiceServer()
}

func RegisterKmsServiceServer(s grpc.ServiceRegistrar, srv KmsServiceServer) {
	s.RegisterService(&KmsService_ServiceDesc, srv)
}

func _KmsService_SignContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).SignContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_SignContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).SignContent(ctx, req.(*SignContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_VerifySignedContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignedContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).VerifySignedContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_VerifySignedContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).VerifySignedContent(ctx, req.(*VerifySignedContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_SignBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).SignBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_SignBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).SignBlob(ctx, req.(*SignBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_VerifyBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).VerifyBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_VerifyBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).VerifyBlob(ctx, req.(*VerifyBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_EncryptContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).EncryptContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_EncryptContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).EncryptContent(ctx, req.(*EncryptContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_DecryptContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).DecryptContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_DecryptContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).DecryptContent(ctx, req.(*DecryptContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_EncryptBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).EncryptBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_EncryptBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).EncryptBlob(ctx, req.(*EncryptBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsService_DecryptBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsServiceServer).DecryptBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsService_DecryptBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsServiceServer).DecryptBlob(ctx, req.(*DecryptBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KmsService_ServiceDesc is the grpc.ServiceDesc for KmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.kms.v1alpha.KmsService",
	HandlerType: (*KmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignContent",
			Handler:    _KmsService_SignContent_Handler,
		},
		{
			MethodName: "VerifySignedContent",
			Handler:    _KmsService_VerifySignedContent_Handler,
		},
		{
			MethodName: "SignBlob",
			Handler:    _KmsService_SignBlob_Handler,
		},
		{
			MethodName: "VerifyBlob",
			Handler:    _KmsService_VerifyBlob_Handler,
		},
		{
			MethodName: "EncryptContent",
			Handler:    _KmsService_EncryptContent_Handler,
		},
		{
			MethodName: "DecryptContent",
			Handler:    _KmsService_DecryptContent_Handler,
		},
		{
			MethodName: "EncryptBlob",
			Handler:    _KmsService_EncryptBlob_Handler,
		},
		{
			MethodName: "DecryptBlob",
			Handler:    _KmsService_DecryptBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/kms/v1alpha/kms_service.proto",
}
