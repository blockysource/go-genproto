// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/projects/admin/v1alpha/project_admin.proto

package projectsadminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/projects/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProjectsAdminServiceName is the fully-qualified name of the ProjectsAdminService service.
	ProjectsAdminServiceName = "blocky.projects.admin.v1alpha.ProjectsAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectsAdminServiceCreateProjectProcedure is the fully-qualified name of the
	// ProjectsAdminService's CreateProject RPC.
	ProjectsAdminServiceCreateProjectProcedure = "/blocky.projects.admin.v1alpha.ProjectsAdminService/CreateProject"
	// ProjectsAdminServiceGetProjectProcedure is the fully-qualified name of the ProjectsAdminService's
	// GetProject RPC.
	ProjectsAdminServiceGetProjectProcedure = "/blocky.projects.admin.v1alpha.ProjectsAdminService/GetProject"
)

// ProjectsAdminServiceClient is a client for the blocky.projects.admin.v1alpha.ProjectsAdminService
// service.
type ProjectsAdminServiceClient interface {
	// Creates a Project.
	CreateProject(context.Context, *connect_go.Request[v1alpha.CreateProjectRequest]) (*connect_go.Response[v1alpha.Project], error)
	// Gets a Project.
	GetProject(context.Context, *connect_go.Request[v1alpha.GetProjectRequest]) (*connect_go.Response[v1alpha.Project], error)
}

// NewProjectsAdminServiceClient constructs a client for the
// blocky.projects.admin.v1alpha.ProjectsAdminService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectsAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProjectsAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectsAdminServiceClient{
		createProject: connect_go.NewClient[v1alpha.CreateProjectRequest, v1alpha.Project](
			httpClient,
			baseURL+ProjectsAdminServiceCreateProjectProcedure,
			opts...,
		),
		getProject: connect_go.NewClient[v1alpha.GetProjectRequest, v1alpha.Project](
			httpClient,
			baseURL+ProjectsAdminServiceGetProjectProcedure,
			opts...,
		),
	}
}

// projectsAdminServiceClient implements ProjectsAdminServiceClient.
type projectsAdminServiceClient struct {
	createProject *connect_go.Client[v1alpha.CreateProjectRequest, v1alpha.Project]
	getProject    *connect_go.Client[v1alpha.GetProjectRequest, v1alpha.Project]
}

// CreateProject calls blocky.projects.admin.v1alpha.ProjectsAdminService.CreateProject.
func (c *projectsAdminServiceClient) CreateProject(ctx context.Context, req *connect_go.Request[v1alpha.CreateProjectRequest]) (*connect_go.Response[v1alpha.Project], error) {
	return c.createProject.CallUnary(ctx, req)
}

// GetProject calls blocky.projects.admin.v1alpha.ProjectsAdminService.GetProject.
func (c *projectsAdminServiceClient) GetProject(ctx context.Context, req *connect_go.Request[v1alpha.GetProjectRequest]) (*connect_go.Response[v1alpha.Project], error) {
	return c.getProject.CallUnary(ctx, req)
}

// ProjectsAdminServiceHandler is an implementation of the
// blocky.projects.admin.v1alpha.ProjectsAdminService service.
type ProjectsAdminServiceHandler interface {
	// Creates a Project.
	CreateProject(context.Context, *connect_go.Request[v1alpha.CreateProjectRequest]) (*connect_go.Response[v1alpha.Project], error)
	// Gets a Project.
	GetProject(context.Context, *connect_go.Request[v1alpha.GetProjectRequest]) (*connect_go.Response[v1alpha.Project], error)
}

// NewProjectsAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectsAdminServiceHandler(svc ProjectsAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	projectsAdminServiceCreateProjectHandler := connect_go.NewUnaryHandler(
		ProjectsAdminServiceCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	projectsAdminServiceGetProjectHandler := connect_go.NewUnaryHandler(
		ProjectsAdminServiceGetProjectProcedure,
		svc.GetProject,
		opts...,
	)
	return "/blocky.projects.admin.v1alpha.ProjectsAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectsAdminServiceCreateProjectProcedure:
			projectsAdminServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectsAdminServiceGetProjectProcedure:
			projectsAdminServiceGetProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectsAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectsAdminServiceHandler struct{}

func (UnimplementedProjectsAdminServiceHandler) CreateProject(context.Context, *connect_go.Request[v1alpha.CreateProjectRequest]) (*connect_go.Response[v1alpha.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.projects.admin.v1alpha.ProjectsAdminService.CreateProject is not implemented"))
}

func (UnimplementedProjectsAdminServiceHandler) GetProject(context.Context, *connect_go.Request[v1alpha.GetProjectRequest]) (*connect_go.Response[v1alpha.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.projects.admin.v1alpha.ProjectsAdminService.GetProject is not implemented"))
}
