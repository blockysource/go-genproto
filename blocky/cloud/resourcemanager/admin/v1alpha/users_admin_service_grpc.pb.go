// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blocky/cloud/resourcemanager/admin/v1alpha/users_admin_service.proto

package resourcemanageradminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsersAdminService_RegisterUser_FullMethodName        = "/blocky.cloud.resourcemanager.admin.v1alpha.UsersAdminService/RegisterUser"
	UsersAdminService_GetUser_FullMethodName             = "/blocky.cloud.resourcemanager.admin.v1alpha.UsersAdminService/GetUser"
	UsersAdminService_GetUserByExternalId_FullMethodName = "/blocky.cloud.resourcemanager.admin.v1alpha.UsersAdminService/GetUserByExternalId"
	UsersAdminService_DeleteUser_FullMethodName          = "/blocky.cloud.resourcemanager.admin.v1alpha.UsersAdminService/DeleteUser"
)

// UsersAdminServiceClient is the client API for UsersAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersAdminServiceClient interface {
	// Registers a new user capable of using cloud resources.
	// The source of the user is not within a domain of cloud resource manager.
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*User, error)
	// Gets the user by the identifier.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	// Gets the user by the external identifier.
	GetUserByExternalId(ctx context.Context, in *GetUserByExternalIdRequest, opts ...grpc.CallOption) (*User, error)
	// Deletes the user by the identifier.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usersAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersAdminServiceClient(cc grpc.ClientConnInterface) UsersAdminServiceClient {
	return &usersAdminServiceClient{cc}
}

func (c *usersAdminServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UsersAdminService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersAdminServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UsersAdminService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersAdminServiceClient) GetUserByExternalId(ctx context.Context, in *GetUserByExternalIdRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UsersAdminService_GetUserByExternalId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersAdminServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersAdminService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersAdminServiceServer is the server API for UsersAdminService service.
// All implementations must embed UnimplementedUsersAdminServiceServer
// for forward compatibility
type UsersAdminServiceServer interface {
	// Registers a new user capable of using cloud resources.
	// The source of the user is not within a domain of cloud resource manager.
	RegisterUser(context.Context, *RegisterUserRequest) (*User, error)
	// Gets the user by the identifier.
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// Gets the user by the external identifier.
	GetUserByExternalId(context.Context, *GetUserByExternalIdRequest) (*User, error)
	// Deletes the user by the identifier.
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsersAdminServiceServer()
}

// UnimplementedUsersAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersAdminServiceServer struct {
}

func (UnimplementedUsersAdminServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUsersAdminServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersAdminServiceServer) GetUserByExternalId(context.Context, *GetUserByExternalIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByExternalId not implemented")
}
func (UnimplementedUsersAdminServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersAdminServiceServer) mustEmbedUnimplementedUsersAdminServiceServer() {}

// UnsafeUsersAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersAdminServiceServer will
// result in compilation errors.
type UnsafeUsersAdminServiceServer interface {
	mustEmbedUnimplementedUsersAdminServiceServer()
}

func RegisterUsersAdminServiceServer(s grpc.ServiceRegistrar, srv UsersAdminServiceServer) {
	s.RegisterService(&UsersAdminService_ServiceDesc, srv)
}

func _UsersAdminService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersAdminServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersAdminService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersAdminServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersAdminService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersAdminServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersAdminService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersAdminServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersAdminService_GetUserByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersAdminServiceServer).GetUserByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersAdminService_GetUserByExternalId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersAdminServiceServer).GetUserByExternalId(ctx, req.(*GetUserByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersAdminService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersAdminServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersAdminService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersAdminServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersAdminService_ServiceDesc is the grpc.ServiceDesc for UsersAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocky.cloud.resourcemanager.admin.v1alpha.UsersAdminService",
	HandlerType: (*UsersAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UsersAdminService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UsersAdminService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByExternalId",
			Handler:    _UsersAdminService_GetUserByExternalId_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersAdminService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blocky/cloud/resourcemanager/admin/v1alpha/users_admin_service.proto",
}
