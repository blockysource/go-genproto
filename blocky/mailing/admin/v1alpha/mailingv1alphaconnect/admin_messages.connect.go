// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/mailing/admin/v1alpha/admin_messages.proto

package mailingv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/mailing/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MessagesAdminServiceName is the fully-qualified name of the MessagesAdminService service.
	MessagesAdminServiceName = "blocky.mailing.v1alpha.MessagesAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessagesAdminServiceListMessagesProcedure is the fully-qualified name of the
	// MessagesAdminService's ListMessages RPC.
	MessagesAdminServiceListMessagesProcedure = "/blocky.mailing.v1alpha.MessagesAdminService/ListMessages"
)

// MessagesAdminServiceClient is a client for the blocky.mailing.v1alpha.MessagesAdminService
// service.
type MessagesAdminServiceClient interface {
	// Lists the messages that satisfies provided request.
	ListMessages(context.Context, *connect_go.Request[v1alpha.ListMessagesRequest]) (*connect_go.Response[v1alpha.ListMessagesResponse], error)
}

// NewMessagesAdminServiceClient constructs a client for the
// blocky.mailing.v1alpha.MessagesAdminService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessagesAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessagesAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messagesAdminServiceClient{
		listMessages: connect_go.NewClient[v1alpha.ListMessagesRequest, v1alpha.ListMessagesResponse](
			httpClient,
			baseURL+MessagesAdminServiceListMessagesProcedure,
			opts...,
		),
	}
}

// messagesAdminServiceClient implements MessagesAdminServiceClient.
type messagesAdminServiceClient struct {
	listMessages *connect_go.Client[v1alpha.ListMessagesRequest, v1alpha.ListMessagesResponse]
}

// ListMessages calls blocky.mailing.v1alpha.MessagesAdminService.ListMessages.
func (c *messagesAdminServiceClient) ListMessages(ctx context.Context, req *connect_go.Request[v1alpha.ListMessagesRequest]) (*connect_go.Response[v1alpha.ListMessagesResponse], error) {
	return c.listMessages.CallUnary(ctx, req)
}

// MessagesAdminServiceHandler is an implementation of the
// blocky.mailing.v1alpha.MessagesAdminService service.
type MessagesAdminServiceHandler interface {
	// Lists the messages that satisfies provided request.
	ListMessages(context.Context, *connect_go.Request[v1alpha.ListMessagesRequest]) (*connect_go.Response[v1alpha.ListMessagesResponse], error)
}

// NewMessagesAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessagesAdminServiceHandler(svc MessagesAdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	messagesAdminServiceListMessagesHandler := connect_go.NewUnaryHandler(
		MessagesAdminServiceListMessagesProcedure,
		svc.ListMessages,
		opts...,
	)
	return "/blocky.mailing.v1alpha.MessagesAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessagesAdminServiceListMessagesProcedure:
			messagesAdminServiceListMessagesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessagesAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessagesAdminServiceHandler struct{}

func (UnimplementedMessagesAdminServiceHandler) ListMessages(context.Context, *connect_go.Request[v1alpha.ListMessagesRequest]) (*connect_go.Response[v1alpha.ListMessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.mailing.v1alpha.MessagesAdminService.ListMessages is not implemented"))
}
