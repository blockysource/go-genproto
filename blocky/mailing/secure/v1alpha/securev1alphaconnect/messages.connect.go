// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocky/mailing/secure/v1alpha/messages.proto

package securev1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blocky/mailing/secure/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MailingServiceName is the fully-qualified name of the MailingService service.
	MailingServiceName = "blocky.mailing.secure.v1alpha.MailingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MailingServiceUploadAttachmentProcedure is the fully-qualified name of the MailingService's
	// UploadAttachment RPC.
	MailingServiceUploadAttachmentProcedure = "/blocky.mailing.secure.v1alpha.MailingService/UploadAttachment"
	// MailingServiceSendMessageProcedure is the fully-qualified name of the MailingService's
	// SendMessage RPC.
	MailingServiceSendMessageProcedure = "/blocky.mailing.secure.v1alpha.MailingService/SendMessage"
	// MailingServiceSendTemplatedMessageProcedure is the fully-qualified name of the MailingService's
	// SendTemplatedMessage RPC.
	MailingServiceSendTemplatedMessageProcedure = "/blocky.mailing.secure.v1alpha.MailingService/SendTemplatedMessage"
)

// MailingServiceClient is a client for the blocky.mailing.secure.v1alpha.MailingService service.
type MailingServiceClient interface {
	// UploadAttachment uploads an attachment to the mailing service, the attachment will be available for sending.
	// The attachment will be deleted from the mailing service after the specified TTL.
	// In order to properly upload an attachment, the client should send a stream of
	// [UploadAttachmentRequest][blocky.mailing.secure.v1alpha.UploadAttachmentRequest] messages, where the first message
	// should be a [UploadAttachmentHeader][blocky.mailing.secure.v1alpha.UploadAttachmentHeader] message and the subsequent
	// messages should be [UploadAttachmentChunk][blocky.mailing.secure.v1alpha.UploadAttachmentChunk] messages.
	// The client should send the chunks in the same order as they are in the original file.
	// The maximum gRPC message size is 4MB, so the chunk size should be less than that.
	// The best practice is to use the chunks of 16-64KB.
	UploadAttachment(context.Context) *connect_go.ClientStreamForClient[v1alpha.UploadAttachmentRequest, v1alpha.UploadAttachmentResponse]
	// SendMessage sends a single email message.
	SendMessage(context.Context, *connect_go.Request[v1alpha.SendMessageRequest]) (*connect_go.Response[v1alpha.SendMessageResponse], error)
	// SendTemplatedMessage sends a single email message using a template.
	SendTemplatedMessage(context.Context, *connect_go.Request[v1alpha.SendTemplatedMessageRequest]) (*connect_go.Response[v1alpha.SendTemplatedMessageResponse], error)
}

// NewMailingServiceClient constructs a client for the blocky.mailing.secure.v1alpha.MailingService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMailingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MailingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mailingServiceClient{
		uploadAttachment: connect_go.NewClient[v1alpha.UploadAttachmentRequest, v1alpha.UploadAttachmentResponse](
			httpClient,
			baseURL+MailingServiceUploadAttachmentProcedure,
			opts...,
		),
		sendMessage: connect_go.NewClient[v1alpha.SendMessageRequest, v1alpha.SendMessageResponse](
			httpClient,
			baseURL+MailingServiceSendMessageProcedure,
			opts...,
		),
		sendTemplatedMessage: connect_go.NewClient[v1alpha.SendTemplatedMessageRequest, v1alpha.SendTemplatedMessageResponse](
			httpClient,
			baseURL+MailingServiceSendTemplatedMessageProcedure,
			opts...,
		),
	}
}

// mailingServiceClient implements MailingServiceClient.
type mailingServiceClient struct {
	uploadAttachment     *connect_go.Client[v1alpha.UploadAttachmentRequest, v1alpha.UploadAttachmentResponse]
	sendMessage          *connect_go.Client[v1alpha.SendMessageRequest, v1alpha.SendMessageResponse]
	sendTemplatedMessage *connect_go.Client[v1alpha.SendTemplatedMessageRequest, v1alpha.SendTemplatedMessageResponse]
}

// UploadAttachment calls blocky.mailing.secure.v1alpha.MailingService.UploadAttachment.
func (c *mailingServiceClient) UploadAttachment(ctx context.Context) *connect_go.ClientStreamForClient[v1alpha.UploadAttachmentRequest, v1alpha.UploadAttachmentResponse] {
	return c.uploadAttachment.CallClientStream(ctx)
}

// SendMessage calls blocky.mailing.secure.v1alpha.MailingService.SendMessage.
func (c *mailingServiceClient) SendMessage(ctx context.Context, req *connect_go.Request[v1alpha.SendMessageRequest]) (*connect_go.Response[v1alpha.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// SendTemplatedMessage calls blocky.mailing.secure.v1alpha.MailingService.SendTemplatedMessage.
func (c *mailingServiceClient) SendTemplatedMessage(ctx context.Context, req *connect_go.Request[v1alpha.SendTemplatedMessageRequest]) (*connect_go.Response[v1alpha.SendTemplatedMessageResponse], error) {
	return c.sendTemplatedMessage.CallUnary(ctx, req)
}

// MailingServiceHandler is an implementation of the blocky.mailing.secure.v1alpha.MailingService
// service.
type MailingServiceHandler interface {
	// UploadAttachment uploads an attachment to the mailing service, the attachment will be available for sending.
	// The attachment will be deleted from the mailing service after the specified TTL.
	// In order to properly upload an attachment, the client should send a stream of
	// [UploadAttachmentRequest][blocky.mailing.secure.v1alpha.UploadAttachmentRequest] messages, where the first message
	// should be a [UploadAttachmentHeader][blocky.mailing.secure.v1alpha.UploadAttachmentHeader] message and the subsequent
	// messages should be [UploadAttachmentChunk][blocky.mailing.secure.v1alpha.UploadAttachmentChunk] messages.
	// The client should send the chunks in the same order as they are in the original file.
	// The maximum gRPC message size is 4MB, so the chunk size should be less than that.
	// The best practice is to use the chunks of 16-64KB.
	UploadAttachment(context.Context, *connect_go.ClientStream[v1alpha.UploadAttachmentRequest]) (*connect_go.Response[v1alpha.UploadAttachmentResponse], error)
	// SendMessage sends a single email message.
	SendMessage(context.Context, *connect_go.Request[v1alpha.SendMessageRequest]) (*connect_go.Response[v1alpha.SendMessageResponse], error)
	// SendTemplatedMessage sends a single email message using a template.
	SendTemplatedMessage(context.Context, *connect_go.Request[v1alpha.SendTemplatedMessageRequest]) (*connect_go.Response[v1alpha.SendTemplatedMessageResponse], error)
}

// NewMailingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMailingServiceHandler(svc MailingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mailingServiceUploadAttachmentHandler := connect_go.NewClientStreamHandler(
		MailingServiceUploadAttachmentProcedure,
		svc.UploadAttachment,
		opts...,
	)
	mailingServiceSendMessageHandler := connect_go.NewUnaryHandler(
		MailingServiceSendMessageProcedure,
		svc.SendMessage,
		opts...,
	)
	mailingServiceSendTemplatedMessageHandler := connect_go.NewUnaryHandler(
		MailingServiceSendTemplatedMessageProcedure,
		svc.SendTemplatedMessage,
		opts...,
	)
	return "/blocky.mailing.secure.v1alpha.MailingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MailingServiceUploadAttachmentProcedure:
			mailingServiceUploadAttachmentHandler.ServeHTTP(w, r)
		case MailingServiceSendMessageProcedure:
			mailingServiceSendMessageHandler.ServeHTTP(w, r)
		case MailingServiceSendTemplatedMessageProcedure:
			mailingServiceSendTemplatedMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMailingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMailingServiceHandler struct{}

func (UnimplementedMailingServiceHandler) UploadAttachment(context.Context, *connect_go.ClientStream[v1alpha.UploadAttachmentRequest]) (*connect_go.Response[v1alpha.UploadAttachmentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.mailing.secure.v1alpha.MailingService.UploadAttachment is not implemented"))
}

func (UnimplementedMailingServiceHandler) SendMessage(context.Context, *connect_go.Request[v1alpha.SendMessageRequest]) (*connect_go.Response[v1alpha.SendMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.mailing.secure.v1alpha.MailingService.SendMessage is not implemented"))
}

func (UnimplementedMailingServiceHandler) SendTemplatedMessage(context.Context, *connect_go.Request[v1alpha.SendTemplatedMessageRequest]) (*connect_go.Response[v1alpha.SendTemplatedMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocky.mailing.secure.v1alpha.MailingService.SendTemplatedMessage is not implemented"))
}
