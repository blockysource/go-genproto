// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blocky/mailing/secure/v1alpha/messages.proto

package securev1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DeliveryEventType determines the type of the delivery event.
type DeliveryEventType int32

const (
	// Determines an event that the message was successfully sent.
	DeliveryEventType_DELIVERY_EVENT_TYPE_SEND DeliveryEventType = 0
	// Determines an event that the message had bounced.
	DeliveryEventType_DELIVERY_EVENT_TYPE_BOUNCE DeliveryEventType = 1
	// Determines an event that the message was delayed.
	DeliveryEventType_DELIVERY_EVENT_TYPE_DELAYED DeliveryEventType = 2
	// Determines an event that the message was not rendered
	// and was not sent.
	DeliveryEventType_DELIVERY_EVENT_TYPE_RENDERING_FAILURE DeliveryEventType = 3
	// Determines an event that the message was delivered
	// to the recipient.
	DeliveryEventType_DELIVERY_EVENT_TYPE_DELIVERED DeliveryEventType = 4
	// Determines an event that the message was not delivered
	// as it's sender address was from some reason invalid.
	DeliveryEventType_DELIVERY_EVENT_TYPE_FROM_FAILURE DeliveryEventType = 5
)

// Enum value maps for DeliveryEventType.
var (
	DeliveryEventType_name = map[int32]string{
		0: "DELIVERY_EVENT_TYPE_SEND",
		1: "DELIVERY_EVENT_TYPE_BOUNCE",
		2: "DELIVERY_EVENT_TYPE_DELAYED",
		3: "DELIVERY_EVENT_TYPE_RENDERING_FAILURE",
		4: "DELIVERY_EVENT_TYPE_DELIVERED",
		5: "DELIVERY_EVENT_TYPE_FROM_FAILURE",
	}
	DeliveryEventType_value = map[string]int32{
		"DELIVERY_EVENT_TYPE_SEND":              0,
		"DELIVERY_EVENT_TYPE_BOUNCE":            1,
		"DELIVERY_EVENT_TYPE_DELAYED":           2,
		"DELIVERY_EVENT_TYPE_RENDERING_FAILURE": 3,
		"DELIVERY_EVENT_TYPE_DELIVERED":         4,
		"DELIVERY_EVENT_TYPE_FROM_FAILURE":      5,
	}
)

func (x DeliveryEventType) Enum() *DeliveryEventType {
	p := new(DeliveryEventType)
	*p = x
	return p
}

func (x DeliveryEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes[0].Descriptor()
}

func (DeliveryEventType) Type() protoreflect.EnumType {
	return &file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes[0]
}

func (x DeliveryEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryEventType.Descriptor instead.
func (DeliveryEventType) EnumDescriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{0}
}

// BounceType determines the type of the bounce event.
type BounceType int32

const (
	// The type of the bounce is undefined.
	BounceType_BOUNCE_TYPE_UNDEFINED BounceType = 0
	// The transient type of a bounce, which means that further attempts
	// to send the message may be successful.
	BounceType_BOUNCE_TYPE_TRANSIENT BounceType = 1
	// The permanent type of a bounce, which means that further attempts
	// to send the message cannot be successful, and the message will not be sent.
	// This should also mean that the email address should be removed from
	// the mailing lists.
	BounceType_BOUNCE_TYPE_PERMANENT BounceType = 2
)

// Enum value maps for BounceType.
var (
	BounceType_name = map[int32]string{
		0: "BOUNCE_TYPE_UNDEFINED",
		1: "BOUNCE_TYPE_TRANSIENT",
		2: "BOUNCE_TYPE_PERMANENT",
	}
	BounceType_value = map[string]int32{
		"BOUNCE_TYPE_UNDEFINED": 0,
		"BOUNCE_TYPE_TRANSIENT": 1,
		"BOUNCE_TYPE_PERMANENT": 2,
	}
)

func (x BounceType) Enum() *BounceType {
	p := new(BounceType)
	*p = x
	return p
}

func (x BounceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BounceType) Descriptor() protoreflect.EnumDescriptor {
	return file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes[1].Descriptor()
}

func (BounceType) Type() protoreflect.EnumType {
	return &file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes[1]
}

func (x BounceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BounceType.Descriptor instead.
func (BounceType) EnumDescriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{1}
}

// Defines a status of the message delivery.
type MessageStatus int32

const (
	// The status of the message is undefined.
	MessageStatus_MESSAGE_STATUS_UNDEFINED MessageStatus = 0
	// The status of the message is pending.
	MessageStatus_MESSAGE_STATUS_PENDING MessageStatus = 1
	// The status of the message is sent.
	MessageStatus_MESSAGE_STATUS_SENT MessageStatus = 2
	// The status of the message is bounced.
	MessageStatus_MESSAGE_STATUS_BOUNCED MessageStatus = 3
	// The status of the message is delayed.
	MessageStatus_MESSAGE_STATUS_DELAYED MessageStatus = 4
	// The status of the message is delivered.
	MessageStatus_MESSAGE_STATUS_DELIVERED MessageStatus = 5
	// The status of the message is rendering failure.
	MessageStatus_MESSAGE_STATUS_RENDERING_FAILURE MessageStatus = 6
	// The status of the message is from failure.
	MessageStatus_MESSAGE_STATUS_FROM_FAILURE MessageStatus = 7
)

// Enum value maps for MessageStatus.
var (
	MessageStatus_name = map[int32]string{
		0: "MESSAGE_STATUS_UNDEFINED",
		1: "MESSAGE_STATUS_PENDING",
		2: "MESSAGE_STATUS_SENT",
		3: "MESSAGE_STATUS_BOUNCED",
		4: "MESSAGE_STATUS_DELAYED",
		5: "MESSAGE_STATUS_DELIVERED",
		6: "MESSAGE_STATUS_RENDERING_FAILURE",
		7: "MESSAGE_STATUS_FROM_FAILURE",
	}
	MessageStatus_value = map[string]int32{
		"MESSAGE_STATUS_UNDEFINED":         0,
		"MESSAGE_STATUS_PENDING":           1,
		"MESSAGE_STATUS_SENT":              2,
		"MESSAGE_STATUS_BOUNCED":           3,
		"MESSAGE_STATUS_DELAYED":           4,
		"MESSAGE_STATUS_DELIVERED":         5,
		"MESSAGE_STATUS_RENDERING_FAILURE": 6,
		"MESSAGE_STATUS_FROM_FAILURE":      7,
	}
)

func (x MessageStatus) Enum() *MessageStatus {
	p := new(MessageStatus)
	*p = x
	return p
}

func (x MessageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes[2].Descriptor()
}

func (MessageStatus) Type() protoreflect.EnumType {
	return &file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes[2]
}

func (x MessageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageStatus.Descriptor instead.
func (MessageStatus) EnumDescriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{2}
}

// Request message for
// [MailingService.UploadAttachment][blocky.mailing.secure.v1alpha.MailingService.UploadAttachment].
type UploadAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attachment to upload.
	// The first message in the stream should be a [UploadAttachmentHeader][blocky.mailing.secure.v1alpha.UploadAttachmentHeader]
	// message and the subsequent messages should be [UploadAttachmentChunk][blocky.mailing.secure.v1alpha.UploadAttachmentChunk]
	// Once streaming is complete, the client should half-close the stream.
	// The client should send the chunks in the same order as they are in the original file.
	//
	// Types that are assignable to Attachment:
	//
	//	*UploadAttachmentRequest_Header
	//	*UploadAttachmentRequest_Chunk
	Attachment isUploadAttachmentRequest_Attachment `protobuf_oneof:"attachment"`
}

func (x *UploadAttachmentRequest) Reset() {
	*x = UploadAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAttachmentRequest) ProtoMessage() {}

func (x *UploadAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAttachmentRequest.ProtoReflect.Descriptor instead.
func (*UploadAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{0}
}

func (m *UploadAttachmentRequest) GetAttachment() isUploadAttachmentRequest_Attachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (x *UploadAttachmentRequest) GetHeader() *UploadAttachmentHeader {
	if x, ok := x.GetAttachment().(*UploadAttachmentRequest_Header); ok {
		return x.Header
	}
	return nil
}

func (x *UploadAttachmentRequest) GetChunk() *UploadAttachmentChunk {
	if x, ok := x.GetAttachment().(*UploadAttachmentRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadAttachmentRequest_Attachment interface {
	isUploadAttachmentRequest_Attachment()
}

type UploadAttachmentRequest_Header struct {
	Header *UploadAttachmentHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type UploadAttachmentRequest_Chunk struct {
	Chunk *UploadAttachmentChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadAttachmentRequest_Header) isUploadAttachmentRequest_Attachment() {}

func (*UploadAttachmentRequest_Chunk) isUploadAttachmentRequest_Attachment() {}

// A header of the attachment to upload used as a first message in the stream
// of [UploadAttachmentRequest][blocky.mailing.secure.v1alpha.UploadAttachmentRequest]
type UploadAttachmentHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the attachment to upload.
	// If not provided, a new ID will be generated and returned in the response.
	AttachmentId string `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	// The name of the attachment file to upload.
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// The content type of the attachment, if not provided, the content type will be resolved from the file name.
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The duration after which the attachment will be deleted from the mailing service,
	// once the attachment is sent in a message.
	// If not provided the attachment will be deleted after default file TTL.
	TtlAfterSend *durationpb.Duration `protobuf:"bytes,4,opt,name=ttl_after_send,json=ttlAfterSend,proto3" json:"ttl_after_send,omitempty"`
}

func (x *UploadAttachmentHeader) Reset() {
	*x = UploadAttachmentHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAttachmentHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAttachmentHeader) ProtoMessage() {}

func (x *UploadAttachmentHeader) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAttachmentHeader.ProtoReflect.Descriptor instead.
func (*UploadAttachmentHeader) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{1}
}

func (x *UploadAttachmentHeader) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *UploadAttachmentHeader) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadAttachmentHeader) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *UploadAttachmentHeader) GetTtlAfterSend() *durationpb.Duration {
	if x != nil {
		return x.TtlAfterSend
	}
	return nil
}

// A chunk of the attachment to upload used as a subsequent message in the stream
// of [UploadAttachmentRequest][blocky.mailing.secure.v1alpha.UploadAttachmentRequest]
type UploadAttachmentChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the data chunk of the attachment to upload.
	// The default grpc max message size is 4MB, so the chunk size should be less than that.
	// The best practice is to use the chunks of 16-64KB.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UploadAttachmentChunk) Reset() {
	*x = UploadAttachmentChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAttachmentChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAttachmentChunk) ProtoMessage() {}

func (x *UploadAttachmentChunk) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAttachmentChunk.ProtoReflect.Descriptor instead.
func (*UploadAttachmentChunk) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{2}
}

func (x *UploadAttachmentChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Response message for
// [MailingService.UploadAttachment][blocky.mailing.secure.v1alpha.MailingService.UploadAttachment].
type UploadAttachmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the attachment to upload.
	AttachmentId string `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	// Resolved content type of the attachment.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The size of the attachment in bytes.
	Size uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The duration after which the attachment will be deleted from the mailing service.
	TtlAfterSend *durationpb.Duration `protobuf:"bytes,4,opt,name=ttl_after_send,json=ttlAfterSend,proto3" json:"ttl_after_send,omitempty"`
}

func (x *UploadAttachmentResponse) Reset() {
	*x = UploadAttachmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAttachmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAttachmentResponse) ProtoMessage() {}

func (x *UploadAttachmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAttachmentResponse.ProtoReflect.Descriptor instead.
func (*UploadAttachmentResponse) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{3}
}

func (x *UploadAttachmentResponse) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *UploadAttachmentResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *UploadAttachmentResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UploadAttachmentResponse) GetTtlAfterSend() *durationpb.Duration {
	if x != nil {
		return x.TtlAfterSend
	}
	return nil
}

// Request message for
// [MailingService.SendMessage][blocky.mailing.secure.v1alpha.MailingService.SendMessage].
type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required message definition to send.
	// The message.message_id field is optional, if not provided, a new ID will be generated and returned in the response.
	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Determines if the text body of the message should be automatically generated from the HTML body.
	// If not provided only a HTML body will be sent.
	// The raw text body, is useful for clients that cannot display HTML content.
	GenerateTextBody bool `protobuf:"varint,2,opt,name=generate_text_body,json=generateTextBody,proto3" json:"generate_text_body,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{4}
}

func (x *SendMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SendMessageRequest) GetGenerateTextBody() bool {
	if x != nil {
		return x.GenerateTextBody
	}
	return false
}

// Response message for
// [MailingService.SendMessage][blocky.mailing.secure.v1alpha.MailingService.SendMessage].
type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the message that was sent.
	// If the message_id was provided in the request, the same ID will be returned in the response,
	// otherwise this value is a referencable unique identifier generated by the mailing service.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{5}
}

func (x *SendMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

// Message is a single email message to send.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the message to send, if not provided, a new ID will be generated and returned in the response.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The sender of the message.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// The recipients of the message.
	To []string `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	// The carbon copy recipients of the message.
	Cc []string `protobuf:"bytes,4,rep,name=cc,proto3" json:"cc,omitempty"`
	// The blind carbon copy recipients of the message.
	Bcc []string `protobuf:"bytes,5,rep,name=bcc,proto3" json:"bcc,omitempty"`
	// The subject of the message.
	Subject string `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	// The HTML body of the message, if not provided, the text body should be provided.
	Html string `protobuf:"bytes,7,opt,name=html,proto3" json:"html,omitempty"`
	// The text body of the message, if not provided, the HTML body should be provided.
	// If not provided, the HTML body can be converted to the text body, if requested or
	// service is configured to do so.
	Text string `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	// The reply to address of the message.
	ReplyTo string `protobuf:"bytes,9,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// The date of the message.
	Date *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=date,proto3" json:"date,omitempty"`
	// The attachments of the message.
	Attachments []*EmailAttachment `protobuf:"bytes,11,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{6}
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Message) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Message) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Message) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *Message) GetBcc() []string {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *Message) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Message) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *Message) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Message) GetAttachments() []*EmailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// A single email attachment to send along with the message.
// It can either be a reference to the attachment uploaded to the mailing service
// or a raw attachment data.
// Note, that sum of all attachments size should not exceed 4MB
// (the default gRPC message size limit).
// If the sum is greater the attachment should be uploaded first, and then referenced by the attachment_id.
type EmailAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Attachment:
	//
	//	*EmailAttachment_AttachmentId
	//	*EmailAttachment_Embed
	Attachment isEmailAttachment_Attachment `protobuf_oneof:"attachment"`
}

func (x *EmailAttachment) Reset() {
	*x = EmailAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAttachment) ProtoMessage() {}

func (x *EmailAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAttachment.ProtoReflect.Descriptor instead.
func (*EmailAttachment) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{7}
}

func (m *EmailAttachment) GetAttachment() isEmailAttachment_Attachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (x *EmailAttachment) GetAttachmentId() string {
	if x, ok := x.GetAttachment().(*EmailAttachment_AttachmentId); ok {
		return x.AttachmentId
	}
	return ""
}

func (x *EmailAttachment) GetEmbed() *EmbedEmailAttachment {
	if x, ok := x.GetAttachment().(*EmailAttachment_Embed); ok {
		return x.Embed
	}
	return nil
}

type isEmailAttachment_Attachment interface {
	isEmailAttachment_Attachment()
}

type EmailAttachment_AttachmentId struct {
	// The reference to the attachment uploaded to the mailing service.
	AttachmentId string `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3,oneof"`
}

type EmailAttachment_Embed struct {
	// Embed attachment data, which will be sent over the gRPC.
	// This should be relatively small attachment, which in sum with other attachments and message content should not exceed
	// the default gRPC message size limit of 4MB.
	Embed *EmbedEmailAttachment `protobuf:"bytes,2,opt,name=embed,proto3,oneof"`
}

func (*EmailAttachment_AttachmentId) isEmailAttachment_Attachment() {}

func (*EmailAttachment_Embed) isEmailAttachment_Attachment() {}

// An attachment that is send over the gRPC
// [blocky.mailing.secure.v1alpha.MailingService.SendMessage][blocky.mailing.secure.v1alpha.MailingService.SendMessage] or
// [blocky.mailing.secure.v1alpha.MailingService.SendTemplatedMessage][blocky.mailing.secure.v1alpha.MailingService.SendTemplatedMessage]
// request.
// This should be relatively small attachment, which in sum with other attachments and message content should not exceed
// the default gRPC message size limit of 4MB.
type EmbedEmailAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The file_name of the attachment.
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Optional, content type of the attachment.
	// If not provided, the content type will be guessed from the file name.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The data of the attachment.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EmbedEmailAttachment) Reset() {
	*x = EmbedEmailAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedEmailAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedEmailAttachment) ProtoMessage() {}

func (x *EmbedEmailAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedEmailAttachment.ProtoReflect.Descriptor instead.
func (*EmbedEmailAttachment) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{8}
}

func (x *EmbedEmailAttachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *EmbedEmailAttachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EmbedEmailAttachment) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for
// [MailingService.SendTemplatedMessage][blocky.mailing.secure.v1alpha.MailingService.SendTemplatedMessage].
type SendTemplatedMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required templated message definition to send.
	Message *TemplatedMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendTemplatedMessageRequest) Reset() {
	*x = SendTemplatedMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTemplatedMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTemplatedMessageRequest) ProtoMessage() {}

func (x *SendTemplatedMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTemplatedMessageRequest.ProtoReflect.Descriptor instead.
func (*SendTemplatedMessageRequest) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{9}
}

func (x *SendTemplatedMessageRequest) GetMessage() *TemplatedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SendTemplatedMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the message that was sent,
	// if the message_id was provided in the request, the same ID will be returned in the response,
	// otherwise this value is a referencable unique identifier generated by the mailing service.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendTemplatedMessageResponse) Reset() {
	*x = SendTemplatedMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTemplatedMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTemplatedMessageResponse) ProtoMessage() {}

func (x *SendTemplatedMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTemplatedMessageResponse.ProtoReflect.Descriptor instead.
func (*SendTemplatedMessageResponse) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{10}
}

func (x *SendTemplatedMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

// TemplatedMessage is a single email message to send using a template.
type TemplatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the message to send, if not provided,
	// a new ID will be generated and returned in the response.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The sender of the message,
	// in contrast to the [Message.from][blocky.mailing.secure.v1alpha.Message.from] field,
	// this may be predefined by the template, thus it is optional.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Required recipients of the message.
	To []string `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	// Optional carbon copy recipients of the message.
	Cc []string `protobuf:"bytes,4,rep,name=cc,proto3" json:"cc,omitempty"`
	// Optional blind carbon copy recipients of the message.
	Bcc []string `protobuf:"bytes,5,rep,name=bcc,proto3" json:"bcc,omitempty"`
	// Required template name to use for the message.
	TemplateName string `protobuf:"bytes,6,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	// Required template version to use for the message.
	// A template may have multiple versions, and the version
	// is used to select the correct template version.
	TemplateVersion string `protobuf:"bytes,7,opt,name=template_version,json=templateVersion,proto3" json:"template_version,omitempty"`
	// Optional template data, which will be used to render the template.
	TemplateData *structpb.Struct `protobuf:"bytes,8,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	// Optional address which will be included in the 'Reply-To' header of the message.
	ReplyTo string `protobuf:"bytes,9,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// Optional date which will be included in the 'Date' header of the message.
	Date *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *TemplatedMessage) Reset() {
	*x = TemplatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatedMessage) ProtoMessage() {}

func (x *TemplatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatedMessage.ProtoReflect.Descriptor instead.
func (*TemplatedMessage) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{11}
}

func (x *TemplatedMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *TemplatedMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TemplatedMessage) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TemplatedMessage) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *TemplatedMessage) GetBcc() []string {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *TemplatedMessage) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *TemplatedMessage) GetTemplateVersion() string {
	if x != nil {
		return x.TemplateVersion
	}
	return ""
}

func (x *TemplatedMessage) GetTemplateData() *structpb.Struct {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *TemplatedMessage) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *TemplatedMessage) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

// DeliveryEvent represents a single delivery event done by the mailing service.
type DeliveryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the delivery event.
	Type DeliveryEventType `protobuf:"varint,1,opt,name=type,proto3,enum=blocky.mailing.secure.v1alpha.DeliveryEventType" json:"type,omitempty"`
	// Bounce details if the event is a bounce.
	Bounce *BounceRecord `protobuf:"bytes,2,opt,name=bounce,proto3" json:"bounce,omitempty"`
	// The timestamp once the event was recorded.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The identifier of the message that the event is related to.
	MessageId string `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *DeliveryEvent) Reset() {
	*x = DeliveryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryEvent) ProtoMessage() {}

func (x *DeliveryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryEvent.ProtoReflect.Descriptor instead.
func (*DeliveryEvent) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{12}
}

func (x *DeliveryEvent) GetType() DeliveryEventType {
	if x != nil {
		return x.Type
	}
	return DeliveryEventType_DELIVERY_EVENT_TYPE_SEND
}

func (x *DeliveryEvent) GetBounce() *BounceRecord {
	if x != nil {
		return x.Bounce
	}
	return nil
}

func (x *DeliveryEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DeliveryEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

// BounceRecord is a delivery event record for a bounced message.
type BounceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the bounce.
	Type BounceType `protobuf:"varint,1,opt,name=type,proto3,enum=blocky.mailing.secure.v1alpha.BounceType" json:"type,omitempty"`
	// Recipients that bounced the message.
	Recipients []*BouncedRecipient `protobuf:"bytes,2,rep,name=recipients,proto3" json:"recipients,omitempty"`
	// The timestamp once the event was recorded.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BounceRecord) Reset() {
	*x = BounceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceRecord) ProtoMessage() {}

func (x *BounceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceRecord.ProtoReflect.Descriptor instead.
func (*BounceRecord) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{13}
}

func (x *BounceRecord) GetType() BounceType {
	if x != nil {
		return x.Type
	}
	return BounceType_BOUNCE_TYPE_UNDEFINED
}

func (x *BounceRecord) GetRecipients() []*BouncedRecipient {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *BounceRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// BouncedRecipient is a recipient that bounced the message.
// The status and code fields are taken from the SMTP response.
type BouncedRecipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The email address of the recipient that bounced the message.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// The status of the bounce.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// The code of the bounce.
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BouncedRecipient) Reset() {
	*x = BouncedRecipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BouncedRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BouncedRecipient) ProtoMessage() {}

func (x *BouncedRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BouncedRecipient.ProtoReflect.Descriptor instead.
func (*BouncedRecipient) Descriptor() ([]byte, []int) {
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP(), []int{14}
}

func (x *BouncedRecipient) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BouncedRecipient) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BouncedRecipient) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

var File_blocky_mailing_secure_v1alpha_messages_proto protoreflect.FileDescriptor

var file_blocky_mailing_secure_v1alpha_messages_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0d,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x0e, 0x74, 0x74, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x74, 0x74, 0x6c, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x22, 0x30, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x74, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x74, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x6e, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x34, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x02, 0x63, 0x63, 0x12, 0x15, 0x0a, 0x03,
	0x62, 0x63, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03,
	0x62, 0x63, 0x63, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x93, 0x01, 0x0a, 0x0f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x14, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6d, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3d, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x82, 0x03, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x02, 0x63, 0x63, 0x12, 0x15, 0x0a, 0x03, 0x62,
	0x63, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x62,
	0x63, 0x63, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12,
	0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06,
	0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x42,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x54, 0x0a, 0x10, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0xe6, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x05, 0x2a, 0x5d, 0x0a, 0x0a, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x55, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x2a, 0xff, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x07, 0x32, 0xa0, 0x03, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x12, 0x74, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x9a, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f, 0x6d, 0x61, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x3b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0xa2, 0x02, 0x03, 0x42, 0x4d, 0x53, 0xaa, 0x02, 0x1d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2e,
	0x4d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x1d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c,
	0x4d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x29, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x5c,
	0x4d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x3a, 0x3a, 0x4d, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blocky_mailing_secure_v1alpha_messages_proto_rawDescOnce sync.Once
	file_blocky_mailing_secure_v1alpha_messages_proto_rawDescData = file_blocky_mailing_secure_v1alpha_messages_proto_rawDesc
)

func file_blocky_mailing_secure_v1alpha_messages_proto_rawDescGZIP() []byte {
	file_blocky_mailing_secure_v1alpha_messages_proto_rawDescOnce.Do(func() {
		file_blocky_mailing_secure_v1alpha_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_blocky_mailing_secure_v1alpha_messages_proto_rawDescData)
	})
	return file_blocky_mailing_secure_v1alpha_messages_proto_rawDescData
}

var file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_blocky_mailing_secure_v1alpha_messages_proto_goTypes = []interface{}{
	(DeliveryEventType)(0),               // 0: blocky.mailing.secure.v1alpha.DeliveryEventType
	(BounceType)(0),                      // 1: blocky.mailing.secure.v1alpha.BounceType
	(MessageStatus)(0),                   // 2: blocky.mailing.secure.v1alpha.MessageStatus
	(*UploadAttachmentRequest)(nil),      // 3: blocky.mailing.secure.v1alpha.UploadAttachmentRequest
	(*UploadAttachmentHeader)(nil),       // 4: blocky.mailing.secure.v1alpha.UploadAttachmentHeader
	(*UploadAttachmentChunk)(nil),        // 5: blocky.mailing.secure.v1alpha.UploadAttachmentChunk
	(*UploadAttachmentResponse)(nil),     // 6: blocky.mailing.secure.v1alpha.UploadAttachmentResponse
	(*SendMessageRequest)(nil),           // 7: blocky.mailing.secure.v1alpha.SendMessageRequest
	(*SendMessageResponse)(nil),          // 8: blocky.mailing.secure.v1alpha.SendMessageResponse
	(*Message)(nil),                      // 9: blocky.mailing.secure.v1alpha.Message
	(*EmailAttachment)(nil),              // 10: blocky.mailing.secure.v1alpha.EmailAttachment
	(*EmbedEmailAttachment)(nil),         // 11: blocky.mailing.secure.v1alpha.EmbedEmailAttachment
	(*SendTemplatedMessageRequest)(nil),  // 12: blocky.mailing.secure.v1alpha.SendTemplatedMessageRequest
	(*SendTemplatedMessageResponse)(nil), // 13: blocky.mailing.secure.v1alpha.SendTemplatedMessageResponse
	(*TemplatedMessage)(nil),             // 14: blocky.mailing.secure.v1alpha.TemplatedMessage
	(*DeliveryEvent)(nil),                // 15: blocky.mailing.secure.v1alpha.DeliveryEvent
	(*BounceRecord)(nil),                 // 16: blocky.mailing.secure.v1alpha.BounceRecord
	(*BouncedRecipient)(nil),             // 17: blocky.mailing.secure.v1alpha.BouncedRecipient
	(*durationpb.Duration)(nil),          // 18: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),        // 19: google.protobuf.Timestamp
	(*structpb.Struct)(nil),              // 20: google.protobuf.Struct
}
var file_blocky_mailing_secure_v1alpha_messages_proto_depIdxs = []int32{
	4,  // 0: blocky.mailing.secure.v1alpha.UploadAttachmentRequest.header:type_name -> blocky.mailing.secure.v1alpha.UploadAttachmentHeader
	5,  // 1: blocky.mailing.secure.v1alpha.UploadAttachmentRequest.chunk:type_name -> blocky.mailing.secure.v1alpha.UploadAttachmentChunk
	18, // 2: blocky.mailing.secure.v1alpha.UploadAttachmentHeader.ttl_after_send:type_name -> google.protobuf.Duration
	18, // 3: blocky.mailing.secure.v1alpha.UploadAttachmentResponse.ttl_after_send:type_name -> google.protobuf.Duration
	9,  // 4: blocky.mailing.secure.v1alpha.SendMessageRequest.message:type_name -> blocky.mailing.secure.v1alpha.Message
	19, // 5: blocky.mailing.secure.v1alpha.Message.date:type_name -> google.protobuf.Timestamp
	10, // 6: blocky.mailing.secure.v1alpha.Message.attachments:type_name -> blocky.mailing.secure.v1alpha.EmailAttachment
	11, // 7: blocky.mailing.secure.v1alpha.EmailAttachment.embed:type_name -> blocky.mailing.secure.v1alpha.EmbedEmailAttachment
	14, // 8: blocky.mailing.secure.v1alpha.SendTemplatedMessageRequest.message:type_name -> blocky.mailing.secure.v1alpha.TemplatedMessage
	20, // 9: blocky.mailing.secure.v1alpha.TemplatedMessage.template_data:type_name -> google.protobuf.Struct
	19, // 10: blocky.mailing.secure.v1alpha.TemplatedMessage.date:type_name -> google.protobuf.Timestamp
	0,  // 11: blocky.mailing.secure.v1alpha.DeliveryEvent.type:type_name -> blocky.mailing.secure.v1alpha.DeliveryEventType
	16, // 12: blocky.mailing.secure.v1alpha.DeliveryEvent.bounce:type_name -> blocky.mailing.secure.v1alpha.BounceRecord
	19, // 13: blocky.mailing.secure.v1alpha.DeliveryEvent.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 14: blocky.mailing.secure.v1alpha.BounceRecord.type:type_name -> blocky.mailing.secure.v1alpha.BounceType
	17, // 15: blocky.mailing.secure.v1alpha.BounceRecord.recipients:type_name -> blocky.mailing.secure.v1alpha.BouncedRecipient
	19, // 16: blocky.mailing.secure.v1alpha.BounceRecord.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 17: blocky.mailing.secure.v1alpha.MailingService.UploadAttachment:input_type -> blocky.mailing.secure.v1alpha.UploadAttachmentRequest
	7,  // 18: blocky.mailing.secure.v1alpha.MailingService.SendMessage:input_type -> blocky.mailing.secure.v1alpha.SendMessageRequest
	12, // 19: blocky.mailing.secure.v1alpha.MailingService.SendTemplatedMessage:input_type -> blocky.mailing.secure.v1alpha.SendTemplatedMessageRequest
	6,  // 20: blocky.mailing.secure.v1alpha.MailingService.UploadAttachment:output_type -> blocky.mailing.secure.v1alpha.UploadAttachmentResponse
	8,  // 21: blocky.mailing.secure.v1alpha.MailingService.SendMessage:output_type -> blocky.mailing.secure.v1alpha.SendMessageResponse
	13, // 22: blocky.mailing.secure.v1alpha.MailingService.SendTemplatedMessage:output_type -> blocky.mailing.secure.v1alpha.SendTemplatedMessageResponse
	20, // [20:23] is the sub-list for method output_type
	17, // [17:20] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_blocky_mailing_secure_v1alpha_messages_proto_init() }
func file_blocky_mailing_secure_v1alpha_messages_proto_init() {
	if File_blocky_mailing_secure_v1alpha_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAttachmentHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAttachmentChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAttachmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedEmailAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTemplatedMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTemplatedMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BouncedRecipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UploadAttachmentRequest_Header)(nil),
		(*UploadAttachmentRequest_Chunk)(nil),
	}
	file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*EmailAttachment_AttachmentId)(nil),
		(*EmailAttachment_Embed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blocky_mailing_secure_v1alpha_messages_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blocky_mailing_secure_v1alpha_messages_proto_goTypes,
		DependencyIndexes: file_blocky_mailing_secure_v1alpha_messages_proto_depIdxs,
		EnumInfos:         file_blocky_mailing_secure_v1alpha_messages_proto_enumTypes,
		MessageInfos:      file_blocky_mailing_secure_v1alpha_messages_proto_msgTypes,
	}.Build()
	File_blocky_mailing_secure_v1alpha_messages_proto = out.File
	file_blocky_mailing_secure_v1alpha_messages_proto_rawDesc = nil
	file_blocky_mailing_secure_v1alpha_messages_proto_goTypes = nil
	file_blocky_mailing_secure_v1alpha_messages_proto_depIdxs = nil
}
