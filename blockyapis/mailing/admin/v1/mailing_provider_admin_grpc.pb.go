// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blockyapis/mailing/admin/v1/mailing_provider_admin.proto

package adminv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailingProviderAdminClient is the client API for MailingProviderAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingProviderAdminClient interface {
	CreateMailingProvider(ctx context.Context, in *CreateMailingProviderRequest, opts ...grpc.CallOption) (*CreateMailingProviderResponse, error)
	SetCurrentMailingProvider(ctx context.Context, in *SetCurrentMailingProviderRequest, opts ...grpc.CallOption) (*SetCurrentMailingProviderResponse, error)
	UpdateMailingProvider(ctx context.Context, in *UpdateMailingProviderRequest, opts ...grpc.CallOption) (*UpdateMailingProviderResponse, error)
	ListMailingProviders(ctx context.Context, in *ListMailingProvidersRequest, opts ...grpc.CallOption) (*ListMailingProvidersResponse, error)
	GetCurrentMailingProvider(ctx context.Context, in *GetCurrentMailingProviderRequest, opts ...grpc.CallOption) (*GetCurrentMailingProviderResponse, error)
}

type mailingProviderAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingProviderAdminClient(cc grpc.ClientConnInterface) MailingProviderAdminClient {
	return &mailingProviderAdminClient{cc}
}

func (c *mailingProviderAdminClient) CreateMailingProvider(ctx context.Context, in *CreateMailingProviderRequest, opts ...grpc.CallOption) (*CreateMailingProviderResponse, error) {
	out := new(CreateMailingProviderResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.mailing.admin.v1.MailingProviderAdmin/CreateMailingProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingProviderAdminClient) SetCurrentMailingProvider(ctx context.Context, in *SetCurrentMailingProviderRequest, opts ...grpc.CallOption) (*SetCurrentMailingProviderResponse, error) {
	out := new(SetCurrentMailingProviderResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.mailing.admin.v1.MailingProviderAdmin/SetCurrentMailingProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingProviderAdminClient) UpdateMailingProvider(ctx context.Context, in *UpdateMailingProviderRequest, opts ...grpc.CallOption) (*UpdateMailingProviderResponse, error) {
	out := new(UpdateMailingProviderResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.mailing.admin.v1.MailingProviderAdmin/UpdateMailingProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingProviderAdminClient) ListMailingProviders(ctx context.Context, in *ListMailingProvidersRequest, opts ...grpc.CallOption) (*ListMailingProvidersResponse, error) {
	out := new(ListMailingProvidersResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.mailing.admin.v1.MailingProviderAdmin/ListMailingProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingProviderAdminClient) GetCurrentMailingProvider(ctx context.Context, in *GetCurrentMailingProviderRequest, opts ...grpc.CallOption) (*GetCurrentMailingProviderResponse, error) {
	out := new(GetCurrentMailingProviderResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.mailing.admin.v1.MailingProviderAdmin/GetCurrentMailingProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingProviderAdminServer is the server API for MailingProviderAdmin service.
// All implementations must embed UnimplementedMailingProviderAdminServer
// for forward compatibility
type MailingProviderAdminServer interface {
	CreateMailingProvider(context.Context, *CreateMailingProviderRequest) (*CreateMailingProviderResponse, error)
	SetCurrentMailingProvider(context.Context, *SetCurrentMailingProviderRequest) (*SetCurrentMailingProviderResponse, error)
	UpdateMailingProvider(context.Context, *UpdateMailingProviderRequest) (*UpdateMailingProviderResponse, error)
	ListMailingProviders(context.Context, *ListMailingProvidersRequest) (*ListMailingProvidersResponse, error)
	GetCurrentMailingProvider(context.Context, *GetCurrentMailingProviderRequest) (*GetCurrentMailingProviderResponse, error)
	mustEmbedUnimplementedMailingProviderAdminServer()
}

// UnimplementedMailingProviderAdminServer must be embedded to have forward compatible implementations.
type UnimplementedMailingProviderAdminServer struct {
}

func (UnimplementedMailingProviderAdminServer) CreateMailingProvider(context.Context, *CreateMailingProviderRequest) (*CreateMailingProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMailingProvider not implemented")
}
func (UnimplementedMailingProviderAdminServer) SetCurrentMailingProvider(context.Context, *SetCurrentMailingProviderRequest) (*SetCurrentMailingProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentMailingProvider not implemented")
}
func (UnimplementedMailingProviderAdminServer) UpdateMailingProvider(context.Context, *UpdateMailingProviderRequest) (*UpdateMailingProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailingProvider not implemented")
}
func (UnimplementedMailingProviderAdminServer) ListMailingProviders(context.Context, *ListMailingProvidersRequest) (*ListMailingProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMailingProviders not implemented")
}
func (UnimplementedMailingProviderAdminServer) GetCurrentMailingProvider(context.Context, *GetCurrentMailingProviderRequest) (*GetCurrentMailingProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentMailingProvider not implemented")
}
func (UnimplementedMailingProviderAdminServer) mustEmbedUnimplementedMailingProviderAdminServer() {}

// UnsafeMailingProviderAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingProviderAdminServer will
// result in compilation errors.
type UnsafeMailingProviderAdminServer interface {
	mustEmbedUnimplementedMailingProviderAdminServer()
}

func RegisterMailingProviderAdminServer(s grpc.ServiceRegistrar, srv MailingProviderAdminServer) {
	s.RegisterService(&MailingProviderAdmin_ServiceDesc, srv)
}

func _MailingProviderAdmin_CreateMailingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMailingProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingProviderAdminServer).CreateMailingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.mailing.admin.v1.MailingProviderAdmin/CreateMailingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingProviderAdminServer).CreateMailingProvider(ctx, req.(*CreateMailingProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingProviderAdmin_SetCurrentMailingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentMailingProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingProviderAdminServer).SetCurrentMailingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.mailing.admin.v1.MailingProviderAdmin/SetCurrentMailingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingProviderAdminServer).SetCurrentMailingProvider(ctx, req.(*SetCurrentMailingProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingProviderAdmin_UpdateMailingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailingProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingProviderAdminServer).UpdateMailingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.mailing.admin.v1.MailingProviderAdmin/UpdateMailingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingProviderAdminServer).UpdateMailingProvider(ctx, req.(*UpdateMailingProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingProviderAdmin_ListMailingProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMailingProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingProviderAdminServer).ListMailingProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.mailing.admin.v1.MailingProviderAdmin/ListMailingProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingProviderAdminServer).ListMailingProviders(ctx, req.(*ListMailingProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingProviderAdmin_GetCurrentMailingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentMailingProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingProviderAdminServer).GetCurrentMailingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.mailing.admin.v1.MailingProviderAdmin/GetCurrentMailingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingProviderAdminServer).GetCurrentMailingProvider(ctx, req.(*GetCurrentMailingProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingProviderAdmin_ServiceDesc is the grpc.ServiceDesc for MailingProviderAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingProviderAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockyapis.mailing.admin.v1.MailingProviderAdmin",
	HandlerType: (*MailingProviderAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMailingProvider",
			Handler:    _MailingProviderAdmin_CreateMailingProvider_Handler,
		},
		{
			MethodName: "SetCurrentMailingProvider",
			Handler:    _MailingProviderAdmin_SetCurrentMailingProvider_Handler,
		},
		{
			MethodName: "UpdateMailingProvider",
			Handler:    _MailingProviderAdmin_UpdateMailingProvider_Handler,
		},
		{
			MethodName: "ListMailingProviders",
			Handler:    _MailingProviderAdmin_ListMailingProviders_Handler,
		},
		{
			MethodName: "GetCurrentMailingProvider",
			Handler:    _MailingProviderAdmin_GetCurrentMailingProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockyapis/mailing/admin/v1/mailing_provider_admin.proto",
}
