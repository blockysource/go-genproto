// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blockyapis/mailing/v1/mailing_attachment.proto

package mailingv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/blockysource/go-genproto/blockyapis/mailing/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AttachmentServiceName is the fully-qualified name of the AttachmentService service.
	AttachmentServiceName = "blockyapis.mailing.v1.AttachmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AttachmentServiceUploadAttachmentProcedure is the fully-qualified name of the AttachmentService's
	// UploadAttachment RPC.
	AttachmentServiceUploadAttachmentProcedure = "/blockyapis.mailing.v1.AttachmentService/UploadAttachment"
)

// AttachmentServiceClient is a client for the blockyapis.mailing.v1.AttachmentService service.
type AttachmentServiceClient interface {
	UploadAttachment(context.Context) *connect_go.ClientStreamForClient[v1.AttachmentUploadRequest, v1.AttachmentUploadResponse]
}

// NewAttachmentServiceClient constructs a client for the blockyapis.mailing.v1.AttachmentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttachmentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AttachmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &attachmentServiceClient{
		uploadAttachment: connect_go.NewClient[v1.AttachmentUploadRequest, v1.AttachmentUploadResponse](
			httpClient,
			baseURL+AttachmentServiceUploadAttachmentProcedure,
			opts...,
		),
	}
}

// attachmentServiceClient implements AttachmentServiceClient.
type attachmentServiceClient struct {
	uploadAttachment *connect_go.Client[v1.AttachmentUploadRequest, v1.AttachmentUploadResponse]
}

// UploadAttachment calls blockyapis.mailing.v1.AttachmentService.UploadAttachment.
func (c *attachmentServiceClient) UploadAttachment(ctx context.Context) *connect_go.ClientStreamForClient[v1.AttachmentUploadRequest, v1.AttachmentUploadResponse] {
	return c.uploadAttachment.CallClientStream(ctx)
}

// AttachmentServiceHandler is an implementation of the blockyapis.mailing.v1.AttachmentService
// service.
type AttachmentServiceHandler interface {
	UploadAttachment(context.Context, *connect_go.ClientStream[v1.AttachmentUploadRequest]) (*connect_go.Response[v1.AttachmentUploadResponse], error)
}

// NewAttachmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttachmentServiceHandler(svc AttachmentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	attachmentServiceUploadAttachmentHandler := connect_go.NewClientStreamHandler(
		AttachmentServiceUploadAttachmentProcedure,
		svc.UploadAttachment,
		opts...,
	)
	return "/blockyapis.mailing.v1.AttachmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttachmentServiceUploadAttachmentProcedure:
			attachmentServiceUploadAttachmentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttachmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAttachmentServiceHandler struct{}

func (UnimplementedAttachmentServiceHandler) UploadAttachment(context.Context, *connect_go.ClientStream[v1.AttachmentUploadRequest]) (*connect_go.Response[v1.AttachmentUploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.mailing.v1.AttachmentService.UploadAttachment is not implemented"))
}
