// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blockyapis/mailing/v1/mailing_attachment.proto

package mailingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttachmentServiceClient is the client API for AttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentServiceClient interface {
	UploadAttachment(ctx context.Context, opts ...grpc.CallOption) (AttachmentService_UploadAttachmentClient, error)
}

type attachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentServiceClient(cc grpc.ClientConnInterface) AttachmentServiceClient {
	return &attachmentServiceClient{cc}
}

func (c *attachmentServiceClient) UploadAttachment(ctx context.Context, opts ...grpc.CallOption) (AttachmentService_UploadAttachmentClient, error) {
	stream, err := c.cc.NewStream(ctx, &AttachmentService_ServiceDesc.Streams[0], "/blockyapis.mailing.v1.AttachmentService/UploadAttachment", opts...)
	if err != nil {
		return nil, err
	}
	x := &attachmentServiceUploadAttachmentClient{stream}
	return x, nil
}

type AttachmentService_UploadAttachmentClient interface {
	Send(*AttachmentUploadRequest) error
	CloseAndRecv() (*AttachmentUploadResponse, error)
	grpc.ClientStream
}

type attachmentServiceUploadAttachmentClient struct {
	grpc.ClientStream
}

func (x *attachmentServiceUploadAttachmentClient) Send(m *AttachmentUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *attachmentServiceUploadAttachmentClient) CloseAndRecv() (*AttachmentUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AttachmentUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AttachmentServiceServer is the server API for AttachmentService service.
// All implementations must embed UnimplementedAttachmentServiceServer
// for forward compatibility
type AttachmentServiceServer interface {
	UploadAttachment(AttachmentService_UploadAttachmentServer) error
	mustEmbedUnimplementedAttachmentServiceServer()
}

// UnimplementedAttachmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttachmentServiceServer struct {
}

func (UnimplementedAttachmentServiceServer) UploadAttachment(AttachmentService_UploadAttachmentServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAttachment not implemented")
}
func (UnimplementedAttachmentServiceServer) mustEmbedUnimplementedAttachmentServiceServer() {}

// UnsafeAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentServiceServer will
// result in compilation errors.
type UnsafeAttachmentServiceServer interface {
	mustEmbedUnimplementedAttachmentServiceServer()
}

func RegisterAttachmentServiceServer(s grpc.ServiceRegistrar, srv AttachmentServiceServer) {
	s.RegisterService(&AttachmentService_ServiceDesc, srv)
}

func _AttachmentService_UploadAttachment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AttachmentServiceServer).UploadAttachment(&attachmentServiceUploadAttachmentServer{stream})
}

type AttachmentService_UploadAttachmentServer interface {
	SendAndClose(*AttachmentUploadResponse) error
	Recv() (*AttachmentUploadRequest, error)
	grpc.ServerStream
}

type attachmentServiceUploadAttachmentServer struct {
	grpc.ServerStream
}

func (x *attachmentServiceUploadAttachmentServer) SendAndClose(m *AttachmentUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *attachmentServiceUploadAttachmentServer) Recv() (*AttachmentUploadRequest, error) {
	m := new(AttachmentUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AttachmentService_ServiceDesc is the grpc.ServiceDesc for AttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockyapis.mailing.v1.AttachmentService",
	HandlerType: (*AttachmentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAttachment",
			Handler:       _AttachmentService_UploadAttachment_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "blockyapis/mailing/v1/mailing_attachment.proto",
}
