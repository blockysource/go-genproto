// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: blockyapis/authz/admin/v1alpha/authz_admin_keys.proto

package adminv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeysServiceClient is the client API for KeysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeysServiceClient interface {
	RotateKeyType(ctx context.Context, in *RotateKeyTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetJwkSet(ctx context.Context, in *GetJwkSetRequest, opts ...grpc.CallOption) (*GetJwkSetResponse, error)
	CreateKeyType(ctx context.Context, in *CreateKeyTypeRequest, opts ...grpc.CallOption) (*CreateKeyTypeResponse, error)
	UpdateKeyTypeConfig(ctx context.Context, in *UpdateKeyTypeConfigRequest, opts ...grpc.CallOption) (*UpdateKeyTypeConfigResponse, error)
	ListKeyTypes(ctx context.Context, in *ListKeyTypesRequest, opts ...grpc.CallOption) (*ListKeyTypesResponse, error)
}

type keysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeysServiceClient(cc grpc.ClientConnInterface) KeysServiceClient {
	return &keysServiceClient{cc}
}

func (c *keysServiceClient) RotateKeyType(ctx context.Context, in *RotateKeyTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blockyapis.authz.admin.v1alpha.KeysService/RotateKeyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysServiceClient) GetJwkSet(ctx context.Context, in *GetJwkSetRequest, opts ...grpc.CallOption) (*GetJwkSetResponse, error) {
	out := new(GetJwkSetResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.authz.admin.v1alpha.KeysService/GetJwkSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysServiceClient) CreateKeyType(ctx context.Context, in *CreateKeyTypeRequest, opts ...grpc.CallOption) (*CreateKeyTypeResponse, error) {
	out := new(CreateKeyTypeResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.authz.admin.v1alpha.KeysService/CreateKeyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysServiceClient) UpdateKeyTypeConfig(ctx context.Context, in *UpdateKeyTypeConfigRequest, opts ...grpc.CallOption) (*UpdateKeyTypeConfigResponse, error) {
	out := new(UpdateKeyTypeConfigResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.authz.admin.v1alpha.KeysService/UpdateKeyTypeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysServiceClient) ListKeyTypes(ctx context.Context, in *ListKeyTypesRequest, opts ...grpc.CallOption) (*ListKeyTypesResponse, error) {
	out := new(ListKeyTypesResponse)
	err := c.cc.Invoke(ctx, "/blockyapis.authz.admin.v1alpha.KeysService/ListKeyTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeysServiceServer is the server API for KeysService service.
// All implementations must embed UnimplementedKeysServiceServer
// for forward compatibility
type KeysServiceServer interface {
	RotateKeyType(context.Context, *RotateKeyTypeRequest) (*emptypb.Empty, error)
	GetJwkSet(context.Context, *GetJwkSetRequest) (*GetJwkSetResponse, error)
	CreateKeyType(context.Context, *CreateKeyTypeRequest) (*CreateKeyTypeResponse, error)
	UpdateKeyTypeConfig(context.Context, *UpdateKeyTypeConfigRequest) (*UpdateKeyTypeConfigResponse, error)
	ListKeyTypes(context.Context, *ListKeyTypesRequest) (*ListKeyTypesResponse, error)
	mustEmbedUnimplementedKeysServiceServer()
}

// UnimplementedKeysServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeysServiceServer struct {
}

func (UnimplementedKeysServiceServer) RotateKeyType(context.Context, *RotateKeyTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKeyType not implemented")
}
func (UnimplementedKeysServiceServer) GetJwkSet(context.Context, *GetJwkSetRequest) (*GetJwkSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwkSet not implemented")
}
func (UnimplementedKeysServiceServer) CreateKeyType(context.Context, *CreateKeyTypeRequest) (*CreateKeyTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyType not implemented")
}
func (UnimplementedKeysServiceServer) UpdateKeyTypeConfig(context.Context, *UpdateKeyTypeConfigRequest) (*UpdateKeyTypeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyTypeConfig not implemented")
}
func (UnimplementedKeysServiceServer) ListKeyTypes(context.Context, *ListKeyTypesRequest) (*ListKeyTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyTypes not implemented")
}
func (UnimplementedKeysServiceServer) mustEmbedUnimplementedKeysServiceServer() {}

// UnsafeKeysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeysServiceServer will
// result in compilation errors.
type UnsafeKeysServiceServer interface {
	mustEmbedUnimplementedKeysServiceServer()
}

func RegisterKeysServiceServer(s grpc.ServiceRegistrar, srv KeysServiceServer) {
	s.RegisterService(&KeysService_ServiceDesc, srv)
}

func _KeysService_RotateKeyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysServiceServer).RotateKeyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.authz.admin.v1alpha.KeysService/RotateKeyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysServiceServer).RotateKeyType(ctx, req.(*RotateKeyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysService_GetJwkSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwkSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysServiceServer).GetJwkSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.authz.admin.v1alpha.KeysService/GetJwkSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysServiceServer).GetJwkSet(ctx, req.(*GetJwkSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysService_CreateKeyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysServiceServer).CreateKeyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.authz.admin.v1alpha.KeysService/CreateKeyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysServiceServer).CreateKeyType(ctx, req.(*CreateKeyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysService_UpdateKeyTypeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyTypeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysServiceServer).UpdateKeyTypeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.authz.admin.v1alpha.KeysService/UpdateKeyTypeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysServiceServer).UpdateKeyTypeConfig(ctx, req.(*UpdateKeyTypeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysService_ListKeyTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysServiceServer).ListKeyTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockyapis.authz.admin.v1alpha.KeysService/ListKeyTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysServiceServer).ListKeyTypes(ctx, req.(*ListKeyTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeysService_ServiceDesc is the grpc.ServiceDesc for KeysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockyapis.authz.admin.v1alpha.KeysService",
	HandlerType: (*KeysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RotateKeyType",
			Handler:    _KeysService_RotateKeyType_Handler,
		},
		{
			MethodName: "GetJwkSet",
			Handler:    _KeysService_GetJwkSet_Handler,
		},
		{
			MethodName: "CreateKeyType",
			Handler:    _KeysService_CreateKeyType_Handler,
		},
		{
			MethodName: "UpdateKeyTypeConfig",
			Handler:    _KeysService_UpdateKeyTypeConfig_Handler,
		},
		{
			MethodName: "ListKeyTypes",
			Handler:    _KeysService_ListKeyTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockyapis/authz/admin/v1alpha/authz_admin_keys.proto",
}
