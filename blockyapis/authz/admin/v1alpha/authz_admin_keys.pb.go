// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: blockyapis/authz/admin/v1alpha/authz_admin_keys.proto

package adminv1alpha

import (
	v1alpha "github.com/blockysource/go-genproto/blockyapis/authz/v1alpha"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyAlgorithm is an algorith used to sign and verify JSON Web Tokens (JWT) as defined in RFC 7518.
type KeyAlgorithm int32

const (
	KeyAlgorithm_KEY_ALGORITHM_UNSPECIFIED KeyAlgorithm = 0
	KeyAlgorithm_HS256                     KeyAlgorithm = 1
	KeyAlgorithm_HS384                     KeyAlgorithm = 2
	KeyAlgorithm_HS512                     KeyAlgorithm = 3
	KeyAlgorithm_RS256                     KeyAlgorithm = 4
	KeyAlgorithm_RS384                     KeyAlgorithm = 5
	KeyAlgorithm_RS512                     KeyAlgorithm = 6
	KeyAlgorithm_ES256                     KeyAlgorithm = 7
	KeyAlgorithm_ES384                     KeyAlgorithm = 8
	KeyAlgorithm_ES512                     KeyAlgorithm = 9
	KeyAlgorithm_EdDSA                     KeyAlgorithm = 10
)

// Enum value maps for KeyAlgorithm.
var (
	KeyAlgorithm_name = map[int32]string{
		0:  "KEY_ALGORITHM_UNSPECIFIED",
		1:  "HS256",
		2:  "HS384",
		3:  "HS512",
		4:  "RS256",
		5:  "RS384",
		6:  "RS512",
		7:  "ES256",
		8:  "ES384",
		9:  "ES512",
		10: "EdDSA",
	}
	KeyAlgorithm_value = map[string]int32{
		"KEY_ALGORITHM_UNSPECIFIED": 0,
		"HS256":                     1,
		"HS384":                     2,
		"HS512":                     3,
		"RS256":                     4,
		"RS384":                     5,
		"RS512":                     6,
		"ES256":                     7,
		"ES384":                     8,
		"ES512":                     9,
		"EdDSA":                     10,
	}
)

func (x KeyAlgorithm) Enum() *KeyAlgorithm {
	p := new(KeyAlgorithm)
	*p = x
	return p
}

func (x KeyAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_enumTypes[0].Descriptor()
}

func (KeyAlgorithm) Type() protoreflect.EnumType {
	return &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_enumTypes[0]
}

func (x KeyAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyAlgorithm.Descriptor instead.
func (KeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{0}
}

// EventKeyTypeRotated is an event that is emitted when a key type is rotated.
type EventKeyTypeRotated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId    string                 `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"`
	NextRotation *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=next_rotation,json=nextRotation,proto3" json:"next_rotation,omitempty"`
	SigningKeyId string                 `protobuf:"bytes,3,opt,name=signing_key_id,json=signingKeyId,proto3" json:"signing_key_id,omitempty"`
	Nonce        string                 `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EventKeyTypeRotated) Reset() {
	*x = EventKeyTypeRotated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventKeyTypeRotated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventKeyTypeRotated) ProtoMessage() {}

func (x *EventKeyTypeRotated) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventKeyTypeRotated.ProtoReflect.Descriptor instead.
func (*EventKeyTypeRotated) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{0}
}

func (x *EventKeyTypeRotated) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

func (x *EventKeyTypeRotated) GetNextRotation() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRotation
	}
	return nil
}

func (x *EventKeyTypeRotated) GetSigningKeyId() string {
	if x != nil {
		return x.SigningKeyId
	}
	return ""
}

func (x *EventKeyTypeRotated) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

// EventKeyTypeCreated is an event that is emitted when a key type is created.
type EventKeyTypeConfigUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId string               `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"`
	Config    *KeyTypeConfigChange `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Nonce     string               `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EventKeyTypeConfigUpdated) Reset() {
	*x = EventKeyTypeConfigUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventKeyTypeConfigUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventKeyTypeConfigUpdated) ProtoMessage() {}

func (x *EventKeyTypeConfigUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventKeyTypeConfigUpdated.ProtoReflect.Descriptor instead.
func (*EventKeyTypeConfigUpdated) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{1}
}

func (x *EventKeyTypeConfigUpdated) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

func (x *EventKeyTypeConfigUpdated) GetConfig() *KeyTypeConfigChange {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EventKeyTypeConfigUpdated) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

// EventKeyRevoked is an event that is emitted when a key is revoked.
type EventKeyRevoked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId string `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"`
	KeyId     string `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Nonce     string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EventKeyRevoked) Reset() {
	*x = EventKeyRevoked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventKeyRevoked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventKeyRevoked) ProtoMessage() {}

func (x *EventKeyRevoked) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventKeyRevoked.ProtoReflect.Descriptor instead.
func (*EventKeyRevoked) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{2}
}

func (x *EventKeyRevoked) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

func (x *EventKeyRevoked) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *EventKeyRevoked) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

// RotateJwkSetRequest is used to rotate the JSON Web Key Set (JWK Set) as defined in RFC 7517.
type RotateKeyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId string `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"`
}

func (x *RotateKeyTypeRequest) Reset() {
	*x = RotateKeyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateKeyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateKeyTypeRequest) ProtoMessage() {}

func (x *RotateKeyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateKeyTypeRequest.ProtoReflect.Descriptor instead.
func (*RotateKeyTypeRequest) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{3}
}

func (x *RotateKeyTypeRequest) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

// GetJwkSet returns the JSON Web Key Set (JWK Set) as defined in RFC 7517.
type GetJwkSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId string `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"`
}

func (x *GetJwkSetRequest) Reset() {
	*x = GetJwkSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJwkSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJwkSetRequest) ProtoMessage() {}

func (x *GetJwkSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJwkSetRequest.ProtoReflect.Descriptor instead.
func (*GetJwkSetRequest) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{4}
}

func (x *GetJwkSetRequest) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

// GetJwkSetResponse returns a set of JWK keys, and the next (planned) key rotation time.
type GetJwkSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwkSet       *JwkSet                `protobuf:"bytes,1,opt,name=jwk_set,json=jwkSet,proto3" json:"jwk_set,omitempty"`
	NextRotation *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=next_rotation,json=nextRotation,proto3" json:"next_rotation,omitempty"`
}

func (x *GetJwkSetResponse) Reset() {
	*x = GetJwkSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJwkSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJwkSetResponse) ProtoMessage() {}

func (x *GetJwkSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJwkSetResponse.ProtoReflect.Descriptor instead.
func (*GetJwkSetResponse) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{5}
}

func (x *GetJwkSetResponse) GetJwkSet() *JwkSet {
	if x != nil {
		return x.JwkSet
	}
	return nil
}

func (x *GetJwkSetResponse) GetNextRotation() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRotation
	}
	return nil
}

type JwkSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*v1alpha.JWK `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *JwkSet) Reset() {
	*x = JwkSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwkSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwkSet) ProtoMessage() {}

func (x *JwkSet) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwkSet.ProtoReflect.Descriptor instead.
func (*JwkSet) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{6}
}

func (x *JwkSet) GetKeys() []*v1alpha.JWK {
	if x != nil {
		return x.Keys
	}
	return nil
}

// CreateKeyTypeRequest is used to create a new application key.
type CreateKeyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId   string               `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"` // key_type_id is a unique identifier for a key type.
	KeyTypeName string               `protobuf:"bytes,2,opt,name=key_type_name,json=keyTypeName,proto3" json:"key_type_name,omitempty"`
	Config      *KeyTypeConfigChange `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateKeyTypeRequest) Reset() {
	*x = CreateKeyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyTypeRequest) ProtoMessage() {}

func (x *CreateKeyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateKeyTypeRequest) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{7}
}

func (x *CreateKeyTypeRequest) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

func (x *CreateKeyTypeRequest) GetKeyTypeName() string {
	if x != nil {
		return x.KeyTypeName
	}
	return ""
}

func (x *CreateKeyTypeRequest) GetConfig() *KeyTypeConfigChange {
	if x != nil {
		return x.Config
	}
	return nil
}

// CreateKeyTypeResponse is used to create a new application key.
type CreateKeyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *KeyTypeConfigChange   `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	NextRotation *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=next_rotation,json=nextRotation,proto3" json:"next_rotation,omitempty"`
}

func (x *CreateKeyTypeResponse) Reset() {
	*x = CreateKeyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyTypeResponse) ProtoMessage() {}

func (x *CreateKeyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateKeyTypeResponse) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{8}
}

func (x *CreateKeyTypeResponse) GetConfig() *KeyTypeConfigChange {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateKeyTypeResponse) GetNextRotation() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRotation
	}
	return nil
}

// KeyTypeConfig defines a configuration of a key type.
type KeyTypeConfigChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm       KeyAlgorithm         `protobuf:"varint,1,opt,name=algorithm,proto3,enum=blockyapis.authz.admin.v1alpha.KeyAlgorithm" json:"algorithm,omitempty"`
	RotationCycle   *durationpb.Duration `protobuf:"bytes,2,opt,name=rotation_cycle,json=rotationCycle,proto3" json:"rotation_cycle,omitempty"`
	Issuer          string               `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	TokenExpiration *durationpb.Duration `protobuf:"bytes,4,opt,name=token_expiration,json=tokenExpiration,proto3" json:"token_expiration,omitempty"`
}

func (x *KeyTypeConfigChange) Reset() {
	*x = KeyTypeConfigChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyTypeConfigChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyTypeConfigChange) ProtoMessage() {}

func (x *KeyTypeConfigChange) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyTypeConfigChange.ProtoReflect.Descriptor instead.
func (*KeyTypeConfigChange) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{9}
}

func (x *KeyTypeConfigChange) GetAlgorithm() KeyAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return KeyAlgorithm_KEY_ALGORITHM_UNSPECIFIED
}

func (x *KeyTypeConfigChange) GetRotationCycle() *durationpb.Duration {
	if x != nil {
		return x.RotationCycle
	}
	return nil
}

func (x *KeyTypeConfigChange) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *KeyTypeConfigChange) GetTokenExpiration() *durationpb.Duration {
	if x != nil {
		return x.TokenExpiration
	}
	return nil
}

// UpdateKeyTypeConfigRequest is used to update the configuration of a key type.
type UpdateKeyTypeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeId string               `protobuf:"bytes,1,opt,name=key_type_id,json=keyTypeId,proto3" json:"key_type_id,omitempty"`
	Config    *KeyTypeConfigChange `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *UpdateKeyTypeConfigRequest) Reset() {
	*x = UpdateKeyTypeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKeyTypeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKeyTypeConfigRequest) ProtoMessage() {}

func (x *UpdateKeyTypeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKeyTypeConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateKeyTypeConfigRequest) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateKeyTypeConfigRequest) GetKeyTypeId() string {
	if x != nil {
		return x.KeyTypeId
	}
	return ""
}

func (x *UpdateKeyTypeConfigRequest) GetConfig() *KeyTypeConfigChange {
	if x != nil {
		return x.Config
	}
	return nil
}

// UpdateKeyTypeConfigResponse is used to update the configuration of a key type.
type UpdateKeyTypeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *KeyTypeConfigChange   `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	NextRotation *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=next_rotation,json=nextRotation,proto3" json:"next_rotation,omitempty"`
}

func (x *UpdateKeyTypeConfigResponse) Reset() {
	*x = UpdateKeyTypeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKeyTypeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKeyTypeConfigResponse) ProtoMessage() {}

func (x *UpdateKeyTypeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKeyTypeConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateKeyTypeConfigResponse) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateKeyTypeConfigResponse) GetConfig() *KeyTypeConfigChange {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateKeyTypeConfigResponse) GetNextRotation() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRotation
	}
	return nil
}

type ListKeyTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNumber int64 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (x *ListKeyTypesRequest) Reset() {
	*x = ListKeyTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyTypesRequest) ProtoMessage() {}

func (x *ListKeyTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyTypesRequest.ProtoReflect.Descriptor instead.
func (*ListKeyTypesRequest) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{12}
}

func (x *ListKeyTypesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKeyTypesRequest) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListKeyTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypes   []*KeyType `protobuf:"bytes,1,rep,name=key_types,json=keyTypes,proto3" json:"key_types,omitempty"`
	Total      int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	PageSize   int64      `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNumber int64      `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (x *ListKeyTypesResponse) Reset() {
	*x = ListKeyTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyTypesResponse) ProtoMessage() {}

func (x *ListKeyTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyTypesResponse.ProtoReflect.Descriptor instead.
func (*ListKeyTypesResponse) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{13}
}

func (x *ListKeyTypesResponse) GetKeyTypes() []*KeyType {
	if x != nil {
		return x.KeyTypes
	}
	return nil
}

func (x *ListKeyTypesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListKeyTypesResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKeyTypesResponse) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type KeyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Config         *KeyTypeConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	LastRotatedKey *Key                   `protobuf:"bytes,5,opt,name=last_rotated_key,json=lastRotatedKey,proto3" json:"last_rotated_key,omitempty"`
}

func (x *KeyType) Reset() {
	*x = KeyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyType) ProtoMessage() {}

func (x *KeyType) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyType.ProtoReflect.Descriptor instead.
func (*KeyType) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{14}
}

func (x *KeyType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyType) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KeyType) GetConfig() *KeyTypeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *KeyType) GetLastRotatedKey() *Key {
	if x != nil {
		return x.LastRotatedKey
	}
	return nil
}

type KeyTypeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm       KeyAlgorithm           `protobuf:"varint,1,opt,name=algorithm,proto3,enum=blockyapis.authz.admin.v1alpha.KeyAlgorithm" json:"algorithm,omitempty"`
	RotationCycle   *durationpb.Duration   `protobuf:"bytes,2,opt,name=rotation_cycle,json=rotationCycle,proto3" json:"rotation_cycle,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Issuer          string                 `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	TokenExpiration *durationpb.Duration   `protobuf:"bytes,5,opt,name=token_expiration,json=tokenExpiration,proto3" json:"token_expiration,omitempty"`
}

func (x *KeyTypeConfig) Reset() {
	*x = KeyTypeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyTypeConfig) ProtoMessage() {}

func (x *KeyTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyTypeConfig.ProtoReflect.Descriptor instead.
func (*KeyTypeConfig) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{15}
}

func (x *KeyTypeConfig) GetAlgorithm() KeyAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return KeyAlgorithm_KEY_ALGORITHM_UNSPECIFIED
}

func (x *KeyTypeConfig) GetRotationCycle() *durationpb.Duration {
	if x != nil {
		return x.RotationCycle
	}
	return nil
}

func (x *KeyTypeConfig) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *KeyTypeConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *KeyTypeConfig) GetTokenExpiration() *durationpb.Duration {
	if x != nil {
		return x.TokenExpiration
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RotatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=rotated_at,json=rotatedAt,proto3" json:"rotated_at,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP(), []int{16}
}

func (x *Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Key) GetRotatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RotatedAt
	}
	return nil
}

var File_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto protoreflect.FileDescriptor

var file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDesc = []byte{
	0x0a, 0x35, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x29, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb2, 0x01, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x14, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x77, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4a, 0x77, 0x6b, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6a, 0x77, 0x6b, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4a, 0x77, 0x6b, 0x53, 0x65,
	0x74, 0x52, 0x06, 0x6a, 0x77, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x06, 0x4a, 0x77,
	0x6b, 0x53, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4a, 0x57,
	0x4b, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x40, 0x0a,
	0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xab, 0x01, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xfe, 0x01, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4d, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x22, 0xb6, 0x02, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x40,
	0x0a, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x9b, 0x01, 0x0a, 0x0c,
	0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x19,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x53, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x53, 0x33, 0x38, 0x34, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x53, 0x35, 0x31, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x53, 0x32, 0x35, 0x36, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x53, 0x33, 0x38, 0x34,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x53, 0x35, 0x31, 0x32, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x53, 0x33, 0x38,
	0x34, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x53, 0x35, 0x31, 0x32, 0x10, 0x09, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0x10, 0x0a, 0x32, 0xe8, 0x04, 0x0a, 0x0b, 0x4b, 0x65,
	0x79, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4a,
	0x77, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x77, 0x6b, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x77, 0x6b, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa5, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x13, 0x41, 0x75, 0x74,
	0x68, 0x7a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x42, 0x41, 0x41, 0xaa, 0x02, 0x1e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x1e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x2a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x21, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x79, 0x61, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x3a, 0x3a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescOnce sync.Once
	file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescData = file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDesc
)

func file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescGZIP() []byte {
	file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescOnce.Do(func() {
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescData)
	})
	return file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDescData
}

var file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_goTypes = []interface{}{
	(KeyAlgorithm)(0),                   // 0: blockyapis.authz.admin.v1alpha.KeyAlgorithm
	(*EventKeyTypeRotated)(nil),         // 1: blockyapis.authz.admin.v1alpha.EventKeyTypeRotated
	(*EventKeyTypeConfigUpdated)(nil),   // 2: blockyapis.authz.admin.v1alpha.EventKeyTypeConfigUpdated
	(*EventKeyRevoked)(nil),             // 3: blockyapis.authz.admin.v1alpha.EventKeyRevoked
	(*RotateKeyTypeRequest)(nil),        // 4: blockyapis.authz.admin.v1alpha.RotateKeyTypeRequest
	(*GetJwkSetRequest)(nil),            // 5: blockyapis.authz.admin.v1alpha.GetJwkSetRequest
	(*GetJwkSetResponse)(nil),           // 6: blockyapis.authz.admin.v1alpha.GetJwkSetResponse
	(*JwkSet)(nil),                      // 7: blockyapis.authz.admin.v1alpha.JwkSet
	(*CreateKeyTypeRequest)(nil),        // 8: blockyapis.authz.admin.v1alpha.CreateKeyTypeRequest
	(*CreateKeyTypeResponse)(nil),       // 9: blockyapis.authz.admin.v1alpha.CreateKeyTypeResponse
	(*KeyTypeConfigChange)(nil),         // 10: blockyapis.authz.admin.v1alpha.KeyTypeConfigChange
	(*UpdateKeyTypeConfigRequest)(nil),  // 11: blockyapis.authz.admin.v1alpha.UpdateKeyTypeConfigRequest
	(*UpdateKeyTypeConfigResponse)(nil), // 12: blockyapis.authz.admin.v1alpha.UpdateKeyTypeConfigResponse
	(*ListKeyTypesRequest)(nil),         // 13: blockyapis.authz.admin.v1alpha.ListKeyTypesRequest
	(*ListKeyTypesResponse)(nil),        // 14: blockyapis.authz.admin.v1alpha.ListKeyTypesResponse
	(*KeyType)(nil),                     // 15: blockyapis.authz.admin.v1alpha.KeyType
	(*KeyTypeConfig)(nil),               // 16: blockyapis.authz.admin.v1alpha.KeyTypeConfig
	(*Key)(nil),                         // 17: blockyapis.authz.admin.v1alpha.Key
	(*timestamppb.Timestamp)(nil),       // 18: google.protobuf.Timestamp
	(*v1alpha.JWK)(nil),                 // 19: blockyapis.authz.v1alpha.JWK
	(*durationpb.Duration)(nil),         // 20: google.protobuf.Duration
	(*emptypb.Empty)(nil),               // 21: google.protobuf.Empty
}
var file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_depIdxs = []int32{
	18, // 0: blockyapis.authz.admin.v1alpha.EventKeyTypeRotated.next_rotation:type_name -> google.protobuf.Timestamp
	10, // 1: blockyapis.authz.admin.v1alpha.EventKeyTypeConfigUpdated.config:type_name -> blockyapis.authz.admin.v1alpha.KeyTypeConfigChange
	7,  // 2: blockyapis.authz.admin.v1alpha.GetJwkSetResponse.jwk_set:type_name -> blockyapis.authz.admin.v1alpha.JwkSet
	18, // 3: blockyapis.authz.admin.v1alpha.GetJwkSetResponse.next_rotation:type_name -> google.protobuf.Timestamp
	19, // 4: blockyapis.authz.admin.v1alpha.JwkSet.keys:type_name -> blockyapis.authz.v1alpha.JWK
	10, // 5: blockyapis.authz.admin.v1alpha.CreateKeyTypeRequest.config:type_name -> blockyapis.authz.admin.v1alpha.KeyTypeConfigChange
	10, // 6: blockyapis.authz.admin.v1alpha.CreateKeyTypeResponse.config:type_name -> blockyapis.authz.admin.v1alpha.KeyTypeConfigChange
	18, // 7: blockyapis.authz.admin.v1alpha.CreateKeyTypeResponse.next_rotation:type_name -> google.protobuf.Timestamp
	0,  // 8: blockyapis.authz.admin.v1alpha.KeyTypeConfigChange.algorithm:type_name -> blockyapis.authz.admin.v1alpha.KeyAlgorithm
	20, // 9: blockyapis.authz.admin.v1alpha.KeyTypeConfigChange.rotation_cycle:type_name -> google.protobuf.Duration
	20, // 10: blockyapis.authz.admin.v1alpha.KeyTypeConfigChange.token_expiration:type_name -> google.protobuf.Duration
	10, // 11: blockyapis.authz.admin.v1alpha.UpdateKeyTypeConfigRequest.config:type_name -> blockyapis.authz.admin.v1alpha.KeyTypeConfigChange
	10, // 12: blockyapis.authz.admin.v1alpha.UpdateKeyTypeConfigResponse.config:type_name -> blockyapis.authz.admin.v1alpha.KeyTypeConfigChange
	18, // 13: blockyapis.authz.admin.v1alpha.UpdateKeyTypeConfigResponse.next_rotation:type_name -> google.protobuf.Timestamp
	15, // 14: blockyapis.authz.admin.v1alpha.ListKeyTypesResponse.key_types:type_name -> blockyapis.authz.admin.v1alpha.KeyType
	18, // 15: blockyapis.authz.admin.v1alpha.KeyType.created_at:type_name -> google.protobuf.Timestamp
	16, // 16: blockyapis.authz.admin.v1alpha.KeyType.config:type_name -> blockyapis.authz.admin.v1alpha.KeyTypeConfig
	17, // 17: blockyapis.authz.admin.v1alpha.KeyType.last_rotated_key:type_name -> blockyapis.authz.admin.v1alpha.Key
	0,  // 18: blockyapis.authz.admin.v1alpha.KeyTypeConfig.algorithm:type_name -> blockyapis.authz.admin.v1alpha.KeyAlgorithm
	20, // 19: blockyapis.authz.admin.v1alpha.KeyTypeConfig.rotation_cycle:type_name -> google.protobuf.Duration
	18, // 20: blockyapis.authz.admin.v1alpha.KeyTypeConfig.updated_at:type_name -> google.protobuf.Timestamp
	20, // 21: blockyapis.authz.admin.v1alpha.KeyTypeConfig.token_expiration:type_name -> google.protobuf.Duration
	18, // 22: blockyapis.authz.admin.v1alpha.Key.rotated_at:type_name -> google.protobuf.Timestamp
	4,  // 23: blockyapis.authz.admin.v1alpha.KeysService.RotateKeyType:input_type -> blockyapis.authz.admin.v1alpha.RotateKeyTypeRequest
	5,  // 24: blockyapis.authz.admin.v1alpha.KeysService.GetJwkSet:input_type -> blockyapis.authz.admin.v1alpha.GetJwkSetRequest
	8,  // 25: blockyapis.authz.admin.v1alpha.KeysService.CreateKeyType:input_type -> blockyapis.authz.admin.v1alpha.CreateKeyTypeRequest
	11, // 26: blockyapis.authz.admin.v1alpha.KeysService.UpdateKeyTypeConfig:input_type -> blockyapis.authz.admin.v1alpha.UpdateKeyTypeConfigRequest
	13, // 27: blockyapis.authz.admin.v1alpha.KeysService.ListKeyTypes:input_type -> blockyapis.authz.admin.v1alpha.ListKeyTypesRequest
	21, // 28: blockyapis.authz.admin.v1alpha.KeysService.RotateKeyType:output_type -> google.protobuf.Empty
	6,  // 29: blockyapis.authz.admin.v1alpha.KeysService.GetJwkSet:output_type -> blockyapis.authz.admin.v1alpha.GetJwkSetResponse
	9,  // 30: blockyapis.authz.admin.v1alpha.KeysService.CreateKeyType:output_type -> blockyapis.authz.admin.v1alpha.CreateKeyTypeResponse
	12, // 31: blockyapis.authz.admin.v1alpha.KeysService.UpdateKeyTypeConfig:output_type -> blockyapis.authz.admin.v1alpha.UpdateKeyTypeConfigResponse
	14, // 32: blockyapis.authz.admin.v1alpha.KeysService.ListKeyTypes:output_type -> blockyapis.authz.admin.v1alpha.ListKeyTypesResponse
	28, // [28:33] is the sub-list for method output_type
	23, // [23:28] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_init() }
func file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_init() {
	if File_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventKeyTypeRotated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventKeyTypeConfigUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventKeyRevoked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateKeyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJwkSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJwkSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwkSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyTypeConfigChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKeyTypeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKeyTypeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyTypeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_goTypes,
		DependencyIndexes: file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_depIdxs,
		EnumInfos:         file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_enumTypes,
		MessageInfos:      file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_msgTypes,
	}.Build()
	File_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto = out.File
	file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_rawDesc = nil
	file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_goTypes = nil
	file_blockyapis_authz_admin_v1alpha_authz_admin_keys_proto_depIdxs = nil
}
