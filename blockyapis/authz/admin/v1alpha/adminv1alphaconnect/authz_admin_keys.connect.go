// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blockyapis/authz/admin/v1alpha/authz_admin_keys.proto

package adminv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blockyapis/authz/admin/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KeysServiceName is the fully-qualified name of the KeysService service.
	KeysServiceName = "blockyapis.authz.admin.v1alpha.KeysService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeysServiceRotateKeyTypeProcedure is the fully-qualified name of the KeysService's RotateKeyType
	// RPC.
	KeysServiceRotateKeyTypeProcedure = "/blockyapis.authz.admin.v1alpha.KeysService/RotateKeyType"
	// KeysServiceGetJwkSetProcedure is the fully-qualified name of the KeysService's GetJwkSet RPC.
	KeysServiceGetJwkSetProcedure = "/blockyapis.authz.admin.v1alpha.KeysService/GetJwkSet"
	// KeysServiceCreateKeyTypeProcedure is the fully-qualified name of the KeysService's CreateKeyType
	// RPC.
	KeysServiceCreateKeyTypeProcedure = "/blockyapis.authz.admin.v1alpha.KeysService/CreateKeyType"
	// KeysServiceUpdateKeyTypeConfigProcedure is the fully-qualified name of the KeysService's
	// UpdateKeyTypeConfig RPC.
	KeysServiceUpdateKeyTypeConfigProcedure = "/blockyapis.authz.admin.v1alpha.KeysService/UpdateKeyTypeConfig"
	// KeysServiceListKeyTypesProcedure is the fully-qualified name of the KeysService's ListKeyTypes
	// RPC.
	KeysServiceListKeyTypesProcedure = "/blockyapis.authz.admin.v1alpha.KeysService/ListKeyTypes"
)

// KeysServiceClient is a client for the blockyapis.authz.admin.v1alpha.KeysService service.
type KeysServiceClient interface {
	RotateKeyType(context.Context, *connect_go.Request[v1alpha.RotateKeyTypeRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetJwkSet(context.Context, *connect_go.Request[v1alpha.GetJwkSetRequest]) (*connect_go.Response[v1alpha.GetJwkSetResponse], error)
	CreateKeyType(context.Context, *connect_go.Request[v1alpha.CreateKeyTypeRequest]) (*connect_go.Response[v1alpha.CreateKeyTypeResponse], error)
	UpdateKeyTypeConfig(context.Context, *connect_go.Request[v1alpha.UpdateKeyTypeConfigRequest]) (*connect_go.Response[v1alpha.UpdateKeyTypeConfigResponse], error)
	ListKeyTypes(context.Context, *connect_go.Request[v1alpha.ListKeyTypesRequest]) (*connect_go.Response[v1alpha.ListKeyTypesResponse], error)
}

// NewKeysServiceClient constructs a client for the blockyapis.authz.admin.v1alpha.KeysService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeysServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KeysServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keysServiceClient{
		rotateKeyType: connect_go.NewClient[v1alpha.RotateKeyTypeRequest, emptypb.Empty](
			httpClient,
			baseURL+KeysServiceRotateKeyTypeProcedure,
			opts...,
		),
		getJwkSet: connect_go.NewClient[v1alpha.GetJwkSetRequest, v1alpha.GetJwkSetResponse](
			httpClient,
			baseURL+KeysServiceGetJwkSetProcedure,
			opts...,
		),
		createKeyType: connect_go.NewClient[v1alpha.CreateKeyTypeRequest, v1alpha.CreateKeyTypeResponse](
			httpClient,
			baseURL+KeysServiceCreateKeyTypeProcedure,
			opts...,
		),
		updateKeyTypeConfig: connect_go.NewClient[v1alpha.UpdateKeyTypeConfigRequest, v1alpha.UpdateKeyTypeConfigResponse](
			httpClient,
			baseURL+KeysServiceUpdateKeyTypeConfigProcedure,
			opts...,
		),
		listKeyTypes: connect_go.NewClient[v1alpha.ListKeyTypesRequest, v1alpha.ListKeyTypesResponse](
			httpClient,
			baseURL+KeysServiceListKeyTypesProcedure,
			opts...,
		),
	}
}

// keysServiceClient implements KeysServiceClient.
type keysServiceClient struct {
	rotateKeyType       *connect_go.Client[v1alpha.RotateKeyTypeRequest, emptypb.Empty]
	getJwkSet           *connect_go.Client[v1alpha.GetJwkSetRequest, v1alpha.GetJwkSetResponse]
	createKeyType       *connect_go.Client[v1alpha.CreateKeyTypeRequest, v1alpha.CreateKeyTypeResponse]
	updateKeyTypeConfig *connect_go.Client[v1alpha.UpdateKeyTypeConfigRequest, v1alpha.UpdateKeyTypeConfigResponse]
	listKeyTypes        *connect_go.Client[v1alpha.ListKeyTypesRequest, v1alpha.ListKeyTypesResponse]
}

// RotateKeyType calls blockyapis.authz.admin.v1alpha.KeysService.RotateKeyType.
func (c *keysServiceClient) RotateKeyType(ctx context.Context, req *connect_go.Request[v1alpha.RotateKeyTypeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.rotateKeyType.CallUnary(ctx, req)
}

// GetJwkSet calls blockyapis.authz.admin.v1alpha.KeysService.GetJwkSet.
func (c *keysServiceClient) GetJwkSet(ctx context.Context, req *connect_go.Request[v1alpha.GetJwkSetRequest]) (*connect_go.Response[v1alpha.GetJwkSetResponse], error) {
	return c.getJwkSet.CallUnary(ctx, req)
}

// CreateKeyType calls blockyapis.authz.admin.v1alpha.KeysService.CreateKeyType.
func (c *keysServiceClient) CreateKeyType(ctx context.Context, req *connect_go.Request[v1alpha.CreateKeyTypeRequest]) (*connect_go.Response[v1alpha.CreateKeyTypeResponse], error) {
	return c.createKeyType.CallUnary(ctx, req)
}

// UpdateKeyTypeConfig calls blockyapis.authz.admin.v1alpha.KeysService.UpdateKeyTypeConfig.
func (c *keysServiceClient) UpdateKeyTypeConfig(ctx context.Context, req *connect_go.Request[v1alpha.UpdateKeyTypeConfigRequest]) (*connect_go.Response[v1alpha.UpdateKeyTypeConfigResponse], error) {
	return c.updateKeyTypeConfig.CallUnary(ctx, req)
}

// ListKeyTypes calls blockyapis.authz.admin.v1alpha.KeysService.ListKeyTypes.
func (c *keysServiceClient) ListKeyTypes(ctx context.Context, req *connect_go.Request[v1alpha.ListKeyTypesRequest]) (*connect_go.Response[v1alpha.ListKeyTypesResponse], error) {
	return c.listKeyTypes.CallUnary(ctx, req)
}

// KeysServiceHandler is an implementation of the blockyapis.authz.admin.v1alpha.KeysService
// service.
type KeysServiceHandler interface {
	RotateKeyType(context.Context, *connect_go.Request[v1alpha.RotateKeyTypeRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetJwkSet(context.Context, *connect_go.Request[v1alpha.GetJwkSetRequest]) (*connect_go.Response[v1alpha.GetJwkSetResponse], error)
	CreateKeyType(context.Context, *connect_go.Request[v1alpha.CreateKeyTypeRequest]) (*connect_go.Response[v1alpha.CreateKeyTypeResponse], error)
	UpdateKeyTypeConfig(context.Context, *connect_go.Request[v1alpha.UpdateKeyTypeConfigRequest]) (*connect_go.Response[v1alpha.UpdateKeyTypeConfigResponse], error)
	ListKeyTypes(context.Context, *connect_go.Request[v1alpha.ListKeyTypesRequest]) (*connect_go.Response[v1alpha.ListKeyTypesResponse], error)
}

// NewKeysServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeysServiceHandler(svc KeysServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	keysServiceRotateKeyTypeHandler := connect_go.NewUnaryHandler(
		KeysServiceRotateKeyTypeProcedure,
		svc.RotateKeyType,
		opts...,
	)
	keysServiceGetJwkSetHandler := connect_go.NewUnaryHandler(
		KeysServiceGetJwkSetProcedure,
		svc.GetJwkSet,
		opts...,
	)
	keysServiceCreateKeyTypeHandler := connect_go.NewUnaryHandler(
		KeysServiceCreateKeyTypeProcedure,
		svc.CreateKeyType,
		opts...,
	)
	keysServiceUpdateKeyTypeConfigHandler := connect_go.NewUnaryHandler(
		KeysServiceUpdateKeyTypeConfigProcedure,
		svc.UpdateKeyTypeConfig,
		opts...,
	)
	keysServiceListKeyTypesHandler := connect_go.NewUnaryHandler(
		KeysServiceListKeyTypesProcedure,
		svc.ListKeyTypes,
		opts...,
	)
	return "/blockyapis.authz.admin.v1alpha.KeysService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeysServiceRotateKeyTypeProcedure:
			keysServiceRotateKeyTypeHandler.ServeHTTP(w, r)
		case KeysServiceGetJwkSetProcedure:
			keysServiceGetJwkSetHandler.ServeHTTP(w, r)
		case KeysServiceCreateKeyTypeProcedure:
			keysServiceCreateKeyTypeHandler.ServeHTTP(w, r)
		case KeysServiceUpdateKeyTypeConfigProcedure:
			keysServiceUpdateKeyTypeConfigHandler.ServeHTTP(w, r)
		case KeysServiceListKeyTypesProcedure:
			keysServiceListKeyTypesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeysServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeysServiceHandler struct{}

func (UnimplementedKeysServiceHandler) RotateKeyType(context.Context, *connect_go.Request[v1alpha.RotateKeyTypeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.admin.v1alpha.KeysService.RotateKeyType is not implemented"))
}

func (UnimplementedKeysServiceHandler) GetJwkSet(context.Context, *connect_go.Request[v1alpha.GetJwkSetRequest]) (*connect_go.Response[v1alpha.GetJwkSetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.admin.v1alpha.KeysService.GetJwkSet is not implemented"))
}

func (UnimplementedKeysServiceHandler) CreateKeyType(context.Context, *connect_go.Request[v1alpha.CreateKeyTypeRequest]) (*connect_go.Response[v1alpha.CreateKeyTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.admin.v1alpha.KeysService.CreateKeyType is not implemented"))
}

func (UnimplementedKeysServiceHandler) UpdateKeyTypeConfig(context.Context, *connect_go.Request[v1alpha.UpdateKeyTypeConfigRequest]) (*connect_go.Response[v1alpha.UpdateKeyTypeConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.admin.v1alpha.KeysService.UpdateKeyTypeConfig is not implemented"))
}

func (UnimplementedKeysServiceHandler) ListKeyTypes(context.Context, *connect_go.Request[v1alpha.ListKeyTypesRequest]) (*connect_go.Response[v1alpha.ListKeyTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.admin.v1alpha.KeysService.ListKeyTypes is not implemented"))
}
