// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blockyapis/authz/v1alpha/tokens.proto

package authzv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/blockysource/go-genproto/blockyapis/authz/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TokensServiceName is the fully-qualified name of the TokensService service.
	TokensServiceName = "blockyapis.authz.v1alpha.TokensService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokensServiceIssueTokenProcedure is the fully-qualified name of the TokensService's IssueToken
	// RPC.
	TokensServiceIssueTokenProcedure = "/blockyapis.authz.v1alpha.TokensService/IssueToken"
	// TokensServiceRefreshTokenProcedure is the fully-qualified name of the TokensService's
	// RefreshToken RPC.
	TokensServiceRefreshTokenProcedure = "/blockyapis.authz.v1alpha.TokensService/RefreshToken"
	// TokensServiceIntrospectTokenProcedure is the fully-qualified name of the TokensService's
	// IntrospectToken RPC.
	TokensServiceIntrospectTokenProcedure = "/blockyapis.authz.v1alpha.TokensService/IntrospectToken"
	// TokensServiceIssueKeyTypeTokenProcedure is the fully-qualified name of the TokensService's
	// IssueKeyTypeToken RPC.
	TokensServiceIssueKeyTypeTokenProcedure = "/blockyapis.authz.v1alpha.TokensService/IssueKeyTypeToken"
	// TokensServiceIntrospectKeyTypeTokenProcedure is the fully-qualified name of the TokensService's
	// IntrospectKeyTypeToken RPC.
	TokensServiceIntrospectKeyTypeTokenProcedure = "/blockyapis.authz.v1alpha.TokensService/IntrospectKeyTypeToken"
)

// TokensServiceClient is a client for the blockyapis.authz.v1alpha.TokensService service.
type TokensServiceClient interface {
	IssueToken(context.Context, *connect_go.Request[v1alpha.IssueTokenRequest]) (*connect_go.Response[v1alpha.IssueTokenResponse], error)
	RefreshToken(context.Context, *connect_go.Request[v1alpha.RefreshTokenRequest]) (*connect_go.Response[v1alpha.RefreshTokenResponse], error)
	IntrospectToken(context.Context, *connect_go.Request[v1alpha.IntrospectTokenRequest]) (*connect_go.Response[v1alpha.IntrospectTokenResponse], error)
	IssueKeyTypeToken(context.Context, *connect_go.Request[v1alpha.IssueKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IssueKeyTypeTokenResponse], error)
	IntrospectKeyTypeToken(context.Context, *connect_go.Request[v1alpha.IntrospectKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IntrospectKeyTypeTokenResponse], error)
}

// NewTokensServiceClient constructs a client for the blockyapis.authz.v1alpha.TokensService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokensServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TokensServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokensServiceClient{
		issueToken: connect_go.NewClient[v1alpha.IssueTokenRequest, v1alpha.IssueTokenResponse](
			httpClient,
			baseURL+TokensServiceIssueTokenProcedure,
			opts...,
		),
		refreshToken: connect_go.NewClient[v1alpha.RefreshTokenRequest, v1alpha.RefreshTokenResponse](
			httpClient,
			baseURL+TokensServiceRefreshTokenProcedure,
			opts...,
		),
		introspectToken: connect_go.NewClient[v1alpha.IntrospectTokenRequest, v1alpha.IntrospectTokenResponse](
			httpClient,
			baseURL+TokensServiceIntrospectTokenProcedure,
			opts...,
		),
		issueKeyTypeToken: connect_go.NewClient[v1alpha.IssueKeyTypeTokenRequest, v1alpha.IssueKeyTypeTokenResponse](
			httpClient,
			baseURL+TokensServiceIssueKeyTypeTokenProcedure,
			opts...,
		),
		introspectKeyTypeToken: connect_go.NewClient[v1alpha.IntrospectKeyTypeTokenRequest, v1alpha.IntrospectKeyTypeTokenResponse](
			httpClient,
			baseURL+TokensServiceIntrospectKeyTypeTokenProcedure,
			opts...,
		),
	}
}

// tokensServiceClient implements TokensServiceClient.
type tokensServiceClient struct {
	issueToken             *connect_go.Client[v1alpha.IssueTokenRequest, v1alpha.IssueTokenResponse]
	refreshToken           *connect_go.Client[v1alpha.RefreshTokenRequest, v1alpha.RefreshTokenResponse]
	introspectToken        *connect_go.Client[v1alpha.IntrospectTokenRequest, v1alpha.IntrospectTokenResponse]
	issueKeyTypeToken      *connect_go.Client[v1alpha.IssueKeyTypeTokenRequest, v1alpha.IssueKeyTypeTokenResponse]
	introspectKeyTypeToken *connect_go.Client[v1alpha.IntrospectKeyTypeTokenRequest, v1alpha.IntrospectKeyTypeTokenResponse]
}

// IssueToken calls blockyapis.authz.v1alpha.TokensService.IssueToken.
func (c *tokensServiceClient) IssueToken(ctx context.Context, req *connect_go.Request[v1alpha.IssueTokenRequest]) (*connect_go.Response[v1alpha.IssueTokenResponse], error) {
	return c.issueToken.CallUnary(ctx, req)
}

// RefreshToken calls blockyapis.authz.v1alpha.TokensService.RefreshToken.
func (c *tokensServiceClient) RefreshToken(ctx context.Context, req *connect_go.Request[v1alpha.RefreshTokenRequest]) (*connect_go.Response[v1alpha.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// IntrospectToken calls blockyapis.authz.v1alpha.TokensService.IntrospectToken.
func (c *tokensServiceClient) IntrospectToken(ctx context.Context, req *connect_go.Request[v1alpha.IntrospectTokenRequest]) (*connect_go.Response[v1alpha.IntrospectTokenResponse], error) {
	return c.introspectToken.CallUnary(ctx, req)
}

// IssueKeyTypeToken calls blockyapis.authz.v1alpha.TokensService.IssueKeyTypeToken.
func (c *tokensServiceClient) IssueKeyTypeToken(ctx context.Context, req *connect_go.Request[v1alpha.IssueKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IssueKeyTypeTokenResponse], error) {
	return c.issueKeyTypeToken.CallUnary(ctx, req)
}

// IntrospectKeyTypeToken calls blockyapis.authz.v1alpha.TokensService.IntrospectKeyTypeToken.
func (c *tokensServiceClient) IntrospectKeyTypeToken(ctx context.Context, req *connect_go.Request[v1alpha.IntrospectKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IntrospectKeyTypeTokenResponse], error) {
	return c.introspectKeyTypeToken.CallUnary(ctx, req)
}

// TokensServiceHandler is an implementation of the blockyapis.authz.v1alpha.TokensService service.
type TokensServiceHandler interface {
	IssueToken(context.Context, *connect_go.Request[v1alpha.IssueTokenRequest]) (*connect_go.Response[v1alpha.IssueTokenResponse], error)
	RefreshToken(context.Context, *connect_go.Request[v1alpha.RefreshTokenRequest]) (*connect_go.Response[v1alpha.RefreshTokenResponse], error)
	IntrospectToken(context.Context, *connect_go.Request[v1alpha.IntrospectTokenRequest]) (*connect_go.Response[v1alpha.IntrospectTokenResponse], error)
	IssueKeyTypeToken(context.Context, *connect_go.Request[v1alpha.IssueKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IssueKeyTypeTokenResponse], error)
	IntrospectKeyTypeToken(context.Context, *connect_go.Request[v1alpha.IntrospectKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IntrospectKeyTypeTokenResponse], error)
}

// NewTokensServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokensServiceHandler(svc TokensServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	tokensServiceIssueTokenHandler := connect_go.NewUnaryHandler(
		TokensServiceIssueTokenProcedure,
		svc.IssueToken,
		opts...,
	)
	tokensServiceRefreshTokenHandler := connect_go.NewUnaryHandler(
		TokensServiceRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	tokensServiceIntrospectTokenHandler := connect_go.NewUnaryHandler(
		TokensServiceIntrospectTokenProcedure,
		svc.IntrospectToken,
		opts...,
	)
	tokensServiceIssueKeyTypeTokenHandler := connect_go.NewUnaryHandler(
		TokensServiceIssueKeyTypeTokenProcedure,
		svc.IssueKeyTypeToken,
		opts...,
	)
	tokensServiceIntrospectKeyTypeTokenHandler := connect_go.NewUnaryHandler(
		TokensServiceIntrospectKeyTypeTokenProcedure,
		svc.IntrospectKeyTypeToken,
		opts...,
	)
	return "/blockyapis.authz.v1alpha.TokensService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokensServiceIssueTokenProcedure:
			tokensServiceIssueTokenHandler.ServeHTTP(w, r)
		case TokensServiceRefreshTokenProcedure:
			tokensServiceRefreshTokenHandler.ServeHTTP(w, r)
		case TokensServiceIntrospectTokenProcedure:
			tokensServiceIntrospectTokenHandler.ServeHTTP(w, r)
		case TokensServiceIssueKeyTypeTokenProcedure:
			tokensServiceIssueKeyTypeTokenHandler.ServeHTTP(w, r)
		case TokensServiceIntrospectKeyTypeTokenProcedure:
			tokensServiceIntrospectKeyTypeTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokensServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokensServiceHandler struct{}

func (UnimplementedTokensServiceHandler) IssueToken(context.Context, *connect_go.Request[v1alpha.IssueTokenRequest]) (*connect_go.Response[v1alpha.IssueTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.v1alpha.TokensService.IssueToken is not implemented"))
}

func (UnimplementedTokensServiceHandler) RefreshToken(context.Context, *connect_go.Request[v1alpha.RefreshTokenRequest]) (*connect_go.Response[v1alpha.RefreshTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.v1alpha.TokensService.RefreshToken is not implemented"))
}

func (UnimplementedTokensServiceHandler) IntrospectToken(context.Context, *connect_go.Request[v1alpha.IntrospectTokenRequest]) (*connect_go.Response[v1alpha.IntrospectTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.v1alpha.TokensService.IntrospectToken is not implemented"))
}

func (UnimplementedTokensServiceHandler) IssueKeyTypeToken(context.Context, *connect_go.Request[v1alpha.IssueKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IssueKeyTypeTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.v1alpha.TokensService.IssueKeyTypeToken is not implemented"))
}

func (UnimplementedTokensServiceHandler) IntrospectKeyTypeToken(context.Context, *connect_go.Request[v1alpha.IntrospectKeyTypeTokenRequest]) (*connect_go.Response[v1alpha.IntrospectKeyTypeTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockyapis.authz.v1alpha.TokensService.IntrospectKeyTypeToken is not implemented"))
}
